# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# This configuration file uses a combination of Block-Abstraction
# Memoization (BAM) with Value Analysis and Predicate Analysis.
# ----------------------------------------------------------------------


# The specification to check in SV-COMP'16
specification = ../specification/sv-comp-reachability.spc

# The file to which the counterexample is written (required by competition).
counterexample.export.file = ErrorPath.txt

# The file to which the witness is written (required by competition).
counterexample.export.graphml = witness.graphml

# Disable all output except the error path.
output.disable = true

# Disable statistics for memory consumption.
statistics.memory = false

# Multi edges are not important for our efficiency,
# but prevent precise witnesses and concurrency analysis
cpa.composite.aggregateBasicBlocks = false

# Simplified CFA is bad for witnesses
cfa.simplifyCfa = false

# Use sequential combination of analyses.
analysis.restartAfterUnknown = true




# The analyses used for reachability properties.
restartAlgorithm.configFiles = ../valueAnalysis-predicateAnalysis-bam.properties, ../valueAnalysis-predicateAnalysis-bam-rec-bounded.properties::if-recursive



# Tell all analyses to skip (non-explicit) recursion
analysis.summaryEdges = true
cpa.callstack.skipVoidRecursion = true
cpa.callstack.skipFunctionPointerRecursion = true

cpa.predicate.useArraysForHeap = false
cpa.predicate.maxArrayLength = 20

# malloc never returns null according to SV-Comp rules
cpa.predicate.memoryAllocationsAlwaysSucceed = true
