# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
# callstack is necessary for inlining to work well
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true

analysis.algorithm.CEGAR = true

cegar.refiner = cpa.predicate.BAMPredicateRefiner

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.bam.BAMCPA
BAMCPA.cpa = cpa.arg.ARGCPA

ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.predicate.BAMPredicateCPA

# this automaton defines which locations are the error locations
specification = ../specification/sv-comp-errorlabel.spc

# BAM settings
cpa.bam.blockHeuristic = FunctionAndLoopPartitioning
cpa.bam.gatherCacheMissStatistics = false

# Use ABE with abstractions at loops
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = true

# Disable all output files except the error path
output.disable=true
counterexample.export.file = ErrorPath.txt

cpa.predicate.handlePointerAliasing = false

solver.solver = MathSAT5
cpa.predicate.encodeBitvectorAs = RATIONAL
