# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# This configuration file uses sets of intervals to check the overflow property.
# ----------------------------------------------------------------------

#include ../bmc.properties

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA, cpa.assumptions.storage.AssumptionStorageCPA, cpa.loopbound.LoopBoundCPA, cpa.value.ValueAnalysisCPA, cpa.invariants.InvariantsCPA

# Disable all output files except the witness.
output.disable = true

# Do not waste time on memory statistics
statistics.memory = false

# Simplifications must be turned off; they would hide the overflows
cfa.simplifyConstExpressions = false

# multi edges are not required for the overflow tasks
cpa.composite.aggregateBasicBlocks = false

# According to the SVCOMP rules, memory allocations always succeed
cpa.predicate.memoryAllocationsAlwaysSucceed = true

# The file to which the witness is written (required by competition).
counterexample.export.graphml = violation-witness.graphml
bmc.invariantsExport = correctness-witness.graphml
# Compression is not supported by UltimateAutomizer
counterexample.export.compressWitness = false
# Simplified CFA is bad for witnesses
cfa.simplifyCfa = false

# checking counterexamples, esp. with CBMC does not make sense
analysis.checkCounterexamples = false

# Activate iterative deepening (0 is infinite deepening)
cpa.loopbound.maxLoopIterationsUpperBound = 0
# Start iterative deepening with an initial bound of 1
cpa.loopbound.maxLoopIterations = 1
# Increment the bound by one in every iteration of deepening
cpa.loopbound.maxLoopIterationAdjusterFactory = INCREMENT
cpa.predicate.useArraysForHeap = false
cpa.predicate.maxArrayLength = 20

# Configure the CPA used to find overflows for maximum precision
cpa.invariants.interestingVariableLimit = -1
cpa.invariants.abstractionStateFactory = NEVER
cpa.invariants.analyzeTargetPathsOnly = false
cpa.invariants.analyzeRelevantVariablesOnly = false
cpa.invariants.maximumFormulaDepth = 1
cpa.invariants.allowOverapproximationOfUnsupportedFeatures = false
cpa.invariants.merge = SEP

# Switch of and use plain BMC instead;
# we don't support the Overflow property in k-induction yet
bmc.induction = false

# This is the configuration used when verifying the overflow property
overflow.config = svcomp17-k-induction--overflow.properties

# specification to find overflow related problems
specification = ../specification/sv-comp-overflow.spc

limits.time.cpu::required = 900
