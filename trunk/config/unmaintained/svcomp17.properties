# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# This configuration file uses a sequential combination
# of three different analyses, namely a value analysis,
# a bounded model checking analysis with k-induction,
# and a predicate analysis, in a total of six different
# configurations.
# This configuration file also specifies the configuration
# to be used for reachability properties on recursive
# programs and for properties regarding memory safety.
# ----------------------------------------------------------------------

# The specification to check in SV-COMP'17
specification = ../specification/sv-comp-reachability.spc

# The file to which the witness is written (required by competition).
counterexample.export.graphml = violation-witness.graphml
cpa.arg.proofWitness = correctness-witness.graphml
# Compression is not supported by UltimateAutomizer
counterexample.export.compressWitness = false

# Disable all output except the error path.
output.disable = true

# Disable statistics for memory consumption.
statistics.memory = false

# Multi edges are not important for our efficiency,
# but prevent precise witnesses and concurrency analysis
cpa.composite.aggregateBasicBlocks = false

# Simplified CFA is bad for witnesses
cfa.simplifyCfa = false

# Use sequential combination of analyses.
analysis.restartAfterUnknown = true

# if we find a concurrent program, we copy the CFA to avoid colliding functionnames.
cfa.useCFACloningForMultiThreadedPrograms=true

# The analyses used for reachability properties.
restartAlgorithm.configFiles = components/svcomp17--01-valueAnalysis.properties, components/svcomp17--02-valueAnalysis-itp.properties, components/svcomp17--03-predicateAnalysis-bitprecise.properties, components/svcomp17--04-bmc-k-induction.properties, components/svcomp17--recursion.properties::if-recursive, components/svcomp17--concurrency.properties::if-concurrent

# The analyses used for memory safety properties;
# everything in this file is then ignored.
memorysafety.config = svcomp17--memorysafety.properties

# This is the configuration used when verifying the overflow property;
# everything in this file is then ignored.
overflow.config = svcomp17--overflow.properties

# This is the configuration used for verifying the termination property:
# everything in this file is then ignored.
termination.config = svcomp17--termination.properties

# Tell all analyses to skip (non-explicit) recursion
analysis.summaryEdges = true
cpa.callstack.skipVoidRecursion = true
cpa.callstack.skipFunctionPointerRecursion = true

cpa.predicate.useArraysForHeap = false
cpa.predicate.maxArrayLength = 20

# malloc never returns null according to SV-Comp rules
cpa.predicate.memoryAllocationsAlwaysSucceed = true

limits.time.cpu::required = 900
