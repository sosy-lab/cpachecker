# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
# callstack is necessary for ABE with blocks across function boundaries to work well
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true

# enable analysis with CPA enabler
analysis.algorithm.analysisWithEnabler =true

# enable refinement
analysis.algorithm.CEGAR = true

cegar.refiner = cpa.predicate.PredicateRefiner
# cpa.predicate.refinement.performInitialStaticRefinement = true

# cpa structure
# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA

 CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.predicate.PredicateCPA, cpa.validvars.ValidVarsCPA, cpa.value.ValueAnalysisCPA

# configuration of predicate analysis
cpa.composite.inCPAEnabledAnalysis = true
cpa.arg.inCPAEnabledAnalysis = true
cpa.arg.deleteInCPAEnabledAnalysis = false
cpa.predicate.blk.alwaysAtJoin = true
cpa.predicate.ignoreIrrelevantVariables = false

# configuration of values analysis (constant propagation)
cpa.value.merge = JOIN

#include ../includes/resource-limits.properties
