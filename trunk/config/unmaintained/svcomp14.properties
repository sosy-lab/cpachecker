# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# This configuration file uses a sequential combination of two
# analyses: the ValueAnalysisCPA with a maximum execution time of 100s
# and the Adjustable-Block Encoding CPA for predicate analysis.
# ----------------------------------------------------------------------

# The specification to check.
specification = ../specification/sv-comp-errorlabel.spc

cpa.composite.aggregateBasicBlocks = true

# Use sequential combination of analyses.
analysis.restartAfterUnknown = true

# The used analyses.
restartAlgorithm.configFiles = components/svcomp14--01-valueAnalysis-simple.properties, components/svcomp14--02-valueAnalysis.properties, components/svcomp14--03-predicateAnalysis.properties, components/svcomp14--04-predicateAnalysis-ABElf.properties::if-interrupted, components/svcomp14--05-predicateAnalysis-bitprecise.properties

# Disable all output files except the error path.
output.disable=true

# Write counterexample to file (required by competition).
counterexample.export.file = ErrorPath.txt

# Disable statistics for memory consumption.
statistics.memory = false

# skip (non-explicit) recursion
analysis.summaryEdges = true
cpa.callstack.skipVoidRecursion=true
cpa.callstack.skipFunctionPointerRecursion=true

# This is the configuration used when verifying memory safety properties
# (everything in this file is then ignored).
memorysafety.config = svcomp14--memorysafety.properties

cpa.predicate.useArraysForHeap = false
cpa.predicate.maxArrayLength = 20
solver.solver = MathSAT5
cpa.predicate.encodeBitvectorAs = RATIONAL

# malloc never returns null according to SV-Comp rules
cpa.predicate.memoryAllocationsAlwaysSucceed = true
