# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# This configuration file enables overflow checking with k-Induction
# ----------------------------------------------------------------------

#include ../../../components/kInduction/kInduction.properties

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA, cpa.assumptions.storage.AssumptionStorageCPA, cpa.loopbound.LoopBoundCPA, cpa.value.ValueAnalysisCPA, cpa.invariants.InvariantsCPA

# SV-COMP16 options:
counterexample.export.file=ErrorPath.txt
counterexample.export.graphml=witness.graphml
output.disable=true
statistics.memory=false
cpa.callstack.skipVoidRecursion=true
cpa.callstack.skipFunctionPointerRecursion=true
cpa.predicate.useArraysForHeap = false
cpa.predicate.maxArrayLength = 20
cpa.predicate.memoryAllocationsAlwaysSucceed=true
cpa.composite.aggregateBasicBlocks=false

cpa.invariants.merge = SEP
cpa.invariants.interestingVariableLimit = 0
cpa.invariants.abstractionStateFactory = NEVER
cpa.invariants.analyzeTargetPathsOnly = false
cpa.invariants.analyzeRelevantVariablesOnly = false
cpa.invariants.maximumFormulaDepth = 1

# Simplifications must be turned off; they would hide the overflows
cfa.simplifyConstExpressions=false

# checking counterexamples, esp. with CBMC does not make sense
analysis.checkCounterexamples = false
