# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# This configuration file enables k-Induction
# ----------------------------------------------------------------------

#include ../../../components/kInduction/kInduction.properties

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA, cpa.assumptions.storage.AssumptionStorageCPA, cpa.loopbound.LoopBoundCPA, cpa.value.ValueAnalysisCPA, cpa.pointer2.PointerCPA

# The file to which the witness is written (required by competition).
counterexample.export.graphml = violation-witness.graphml
bmc.invariantsExport = correctness-witness.graphml

output.disable=true
statistics.memory=false

# Multi edges are not important for our efficiency,
# but prevent precise witnesses and concurrency analysis
cpa.composite.aggregateBasicBlocks = false

# Simplified CFA is bad for witnesses
cfa.simplifyCfa = false

# Tell all analyses to skip (non-explicit) recursion
analysis.summaryEdges = true
cpa.callstack.skipVoidRecursion = true
cpa.callstack.skipFunctionPointerRecursion = true

cpa.predicate.useArraysForHeap = false
cpa.predicate.maxArrayLength = 20

# malloc never returns null according to SV-Comp rules
cpa.predicate.memoryAllocationsAlwaysSucceed = true

# Check counterexamples
analysis.checkCounterexamples=true
counterexample.checker=CBMC
