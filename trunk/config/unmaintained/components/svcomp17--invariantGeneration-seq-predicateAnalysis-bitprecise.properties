# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# This configuration file configures predicate analysis with CEGAR
# for invariant generation for k-induction.
# ----------------------------------------------------------------------

#include ../../includes/predicateAnalysis-ABEl.properties

# ************** SV-COMP'17 specifics ***********************

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA, cpa.pointer2.PointerCPA

# Use CBMC to check counterexamples
analysis.checkCounterexamples = true
counterexample.checker = CBMC
cegar.globalRefinement = true
cegar.refiner = cpa.predicate.PredicateGlobalRefiner

limits.time.cpu = 900s
limits.time.cpu::required = 900s

# The specification to check in SV-COMP'17
specification = ../../specification/sv-comp-reachability.spc

# Disable all output except the error path.
output.disable = true

# Disable statistics for memory consumption.
statistics.memory = false

# Multi edges are not important for our efficiency,
# but prevent precise witnesses and concurrency analysis
cpa.composite.aggregateBasicBlocks = false

# Simplified CFA is bad for witnesses
cfa.simplifyCfa = false

# Tell all analyses to skip (non-explicit) recursion
analysis.summaryEdges = true
cpa.callstack.skipVoidRecursion = true
cpa.callstack.skipFunctionPointerRecursion = true

# malloc never returns null according to SV-Comp rules
cpa.predicate.memoryAllocationsAlwaysSucceed = true

# Run until state space is fully explored
cpa.automaton.breakOnTargetState = 0
