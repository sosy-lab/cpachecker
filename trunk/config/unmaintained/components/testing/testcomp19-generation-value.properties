# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# This configuration file uses the TestCaseGeneratorAlgorithm.
# ----------------------------------------------------------------------

analysis.useTestCaseGeneratorAlgorithm = true

# ARGCPA is needed for counterexample analysis
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.value.ValueAnalysisCPA, cpa.testtargets.TestTargetCPA, cpa.automaton.ControlAutomatonCPA TerminatingFunctions

TerminatingFunctions.cpa.automaton.inputFile = ../../../specification/test-comp-terminatingfunctions.spc

# harness export cannot deal with aggregated blocks
cpa.composite.aggregateBasicBlocks = false

# Don't use any specification so that it doesn't interfere with test goals
# will use property file to specify test goals
specification =

# use counterexample information from counterexample check
analysis.checkCounterexamples = true
counterexample.checker = CPACHECKER
counterexample.checker.config = ../../../cex-checks/predicateAnalysis-as-cex-check-testgeneration.properties

# If not already done by the analysis, store a found counterexample in the ARG
# counterexample needed to generate tests
analysis.alwaysStoreCounterexamples = true

# needed to get proper test cases from value analysis (use model from CEX check)
counterexample.checker.changeCEXInfo = true

# deactivate, led to assertion failures
counterexample.continueAfterInfeasibleError = false

analysis.algorithm.CEGAR               = true
cegar.refiner                          = cpa.value.refiner.ValueAnalysisRefiner

precision.sharing                      = SCOPE

[cpa.value.refinement]
restart           = ROOT
prefixPreference = DOMAIN_MIN,WIDTH_MIN,LENGTH_MIN

[cpa.value.interpolation]
applyItpEqualityOptimization = false
applyRenamingOptimization    = false
applyUnsatSuffixOptimization = false

# BFS has shown to be a good traversal strategy for value analysis,
# so we use this by default
[analysis.traversal]
order = bfs
useReversePostorder = false
useCallstack = false
