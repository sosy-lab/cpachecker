# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA
# for predicate analysis with CEGAR as described in
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et al.).
# It is configured for abstractions at loop heads, similar to LBE but
# with function inlining.
# This configuration works best on most examples,
# but may have memory problems on really big programs.
# ----------------------------------------------------------------------

# Check counterexamples with CBMC.
analysis.checkCounterexamples = true

# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
# callstack is necessary for ABE with blocks across function boundaries to work well
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true

# Use CEGAR.
analysis.algorithm.CEGAR = true

cegar.refiner = cpa.predicate.PredicateRefiner

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA

# The specification to check.
specification = ../../specification/sv-comp-errorlabel.spc

# Abstractions only at loop heads.
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = true

cpa.predicate.useArraysForHeap = false
cpa.predicate.maxArrayLength = 20
solver.solver = MathSAT5
cpa.predicate.encodeBitvectorAs = RATIONAL

# Write counterexample to file (required by competition).
counterexample.export.file = ErrorPath.txt

# malloc never returns null according to SV-Comp rules
cpa.predicate.memoryAllocationsAlwaysSucceed = true

