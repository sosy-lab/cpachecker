# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ------------------------------------------------------------------
# This configuration can be used to check counterexample of another
# analysis, e.g., a predicate analysis.
# ------------------------------------------------------------------

cpa                     = cpa.arg.ARGCPA
ARGCPA.cpa              = cpa.composite.CompositeCPA
CompositeCPA.cpas       = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.value.ValueAnalysisCPA, cpa.smg.SMGCPA, cpa.functionpointer.FunctionPointerCPA

cpa.smg.memoryErrors = true
cpa.smg.handleNonFreedMemoryInMainAsMemLeak = true

cpa.smg.enableMallocFail = false
cpa.smg.unknownOnUndefined = false
cpa.smg.handleUnknownFunctions = assume_safe
cpa.smg.runtimeCheck = NONE

analysis.traversal.order                  = bfs
analysis.traversal.useReversePostorder    = false
analysis.traversal.useCallstack           = false

analysis.summaryEdges       = true

analysis.checkCounterexamples = false

// Secondary analysis should not produce output.
output.disable = true

// If main analysis has -skipRecursion, we want to ignore recursive calls here as well.
// If main analysis does not have -skipRecursion, setting this here has no effect.
cpa.callstack.skipRecursion = true

cfa.simplifyCfa = false
cpa.value.optimizeBooleanVariables = false
precision.trackAddressedVariables = false
