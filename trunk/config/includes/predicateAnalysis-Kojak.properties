# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# --------------------------------------------------------------------------
# This configures the analysis to build a global ARG that is structured
# the corresponding CFA. This ARG is then refined using abstraction
# splitting and slicing as presented in the paper:
#   Ermis, Evren, Jochen Hoenicke, and Andreas Podelski.
#   "Splitting via Interpolants." VMCAI. Vol. 12. 2012.
# The analysis ends if all error states have been removed or a feasible
# counterexample has been found.
# --------------------------------------------------------------------------

#include predicateAnalysis-SlicingAbstractionsRefiner.properties

# Kojak is effectively a global one time refinement:
cegar.globalRefinement = true
cpa.automaton.breakOnTargetState = 0

# We want to merge back instead of relying on coverage:
cpa.arg.mergeOnWrappedSubsumption = true

# Special settings for things that break if the ARG contains loops:
cpa.predicate.refinement.graphblockformulastrategy = true
# For counterexample check this would be needed:
# counterexample.ambigiousARG = true

# temporarily disable an assertion that fails
# cf. https://gitlab.com/sosy-lab/software/cpachecker/-/issues/718
counterexample.export.allowImpreciseCounterexamples = true
