# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
# SPDX-FileCopyrightText: 2014-2017 UniversitÃ© Grenoble Alpes
#
# SPDX-License-Identifier: Apache-2.0

cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.location.LocationCPA,\
    cpa.callstack.CallstackCPA,\
    cpa.functionpointer.FunctionPointerCPA,\
    cpa.loopbound.LoopBoundCPA,\
    cpa.policyiteration.PolicyCPA,\
    cpa.congruence.CongruenceCPA,\
    cpa.targetreachability.TargetReachabilityCPA,\
    cpa.assumptions.storage.AssumptionStorageCPA

specification = ../specification/default.spc

cpa.reportFalseAsUnknown=true

rcnf.expansionResultSizeLimit = 100

[cfa]
findLiveVariables = true

[solver]
solver = Z3
z3.requireProofs = false

[cpa.predicate]
simplifyGeneratedPathFormulas=true
# JavaSMT has bug with array handling of Z3: https://github.com/sosy-lab/java-smt/issues/95
# So for now we use the bounded UF encoding
useArraysForHeap = false
maxArrayLength = 3
# Various crashes and wrong proofs with bitprecise semantics, so use linear approximation
encodeBitvectorAs = INTEGER
encodeFloatAs = RATIONAL

[cpa.lpi]
delayAbstractionUntilStrengthen=true

[precision.template]
maxExpressionSize=2

# Picking a correct order is incredibly important and can mean >100x difference
# in performance.
[analysis.traversal]
order = dfs
useCallstack = true
useReversePostorder = true
useLoopstack = true
