# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA C1
C1.cpas = cpa.location.LocationCPA L1, cpa.slicing.SlicingCPA
SlicingCPA.cpa = cpa.composite.CompositeCPA

cpa.slicing.refinableSlice = false

# Use predicate analysis to cross-check counterexamples,
# because invalid ones may be produced through slicing (e.g., because of irrelevant branchings)
analysis.checkCounterexamples = true
counterexample.checker = CPACHECKER
counterexample.checker.config = ../cex-checks/predicateAnalysis-as-cex-check-cexrefinement.properties
# Use counterexample from CEX-check for witness.
# Otherwise, a single, concrete error path may be used as counterexample.
# This path may be infeasible due to irrelevant branchings that were abstracted from
# in the counterexample checked by the CEX-check.
counterexample.checker.forceCEXChange = true

# temporarily disable an assertion that fails
# cf. https://gitlab.com/sosy-lab/software/cpachecker/-/issues/716
counterexample.export.allowImpreciseCounterexamples = true
