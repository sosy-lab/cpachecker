# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ------------------------------------------------------------------
# This configuration file is used
# inside Linux Driver Verification Tools by default.
# It uses value analysis and predicate analysis
# with handlePointerAliasing using uninterpreted functions.
# It skips the recursion, ignores function calls by unknown pointer
# and defines a set of nondeterministic functions used in LDV.
# ------------------------------------------------------------------

#include valueAnalysis-predicateAnalysis-Cegar-ABElf-conservative.properties

CompositeCPA.cpas       = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.value.ValueAnalysisCPA, cpa.predicate.PredicateCPA, cpa.conditions.path.PathConditionsCPA

# this automaton defines which locations are the error locations
specification = specification/sv-comp-errorlabel.spc

# drop variables from abstract state once they have more then 22 distinct assignments along the current path
cpa.conditions.path.condition = AssignmentsInPathCondition
cpa.conditions.path.assignments.threshold = 22

# rev.8272 of CPAchecker has added support for global structure initializations
# it has negative effect for drivers, so switch it off
# outdated in rev.14526
# cpa.value.interpolation.ignoreLoopsExitAssumes = false

output.disable         = true
cfa.export = false
cpa.arg.export = false
statistics.memory      = false
counterexample.export.file = ErrorPath.txt

# Set 64-bit machine model
analysis.machineModel = Linux64

# Disable counterexample double-check
analysis.checkCounterexamples = false

# Turn on Immutable CFA 3
analysis.summaryEdges = true
analysis.functionPointerCalls = true
cpa.callstack.skipRecursion = true

# Set several custom (LDV-specific) nondet functions
cpa.predicate.nondetFunctions = nondet_int,sscanf,random,ldv_undef_ptr,ldv_undef_int,ldv_undef_ulong

# Ignore function calls by pointer if the value of pointer variable is not known by FunctionPointerCPA
cpa.functionpointer.ignoreUnknownFunctionPointerCalls=true

# Workaround for #193
# (Conflicting PredicateCPA and FunctionPointerCPA with ignoreUnknownFunctionPointerCalls heuristic)
cpa.predicate.trackFunctionPointers=false

solver.solver = SMTInterpol
cpa.predicate.encodeBitvectorAs = INTEGER
cpa.predicate.encodeFloatAs = RATIONAL
cpa.predicate.useArraysForHeap = false
cpa.predicate.defaultArrayLength = 1
cpa.predicate.maxArrayLength = 1

# disable an assertion that fails
# cf. https://gitlab.com/sosy-lab/software/cpachecker/-/issues/283
counterexample.export.allowImpreciseCounterexamples = true

# Setting the option to make memory allocations behave according the C standard:
# return 0 in case of failure
cpa.predicate.memoryAllocationsAlwaysSucceed = false

# Avoid typically huge amount of messages about dead code
cfa.showDeadCode = false

# Disable simplification of witnesses
cpa.arg.witness.removeInsufficientEdges=false
