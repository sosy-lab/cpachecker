# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ------------------------------------------------------------------
# This configuration file uses value analysis of local integer
# variables in a model-checking configuration.
# Certain variables (__SELECTED_FEATURE_*) are instead tracked with BDDs (with the BDDCPA).
# Found errors are cross-checked by executing the concrete counterexample program.
# ------------------------------------------------------------------

# ARGCPA is needed for counterexample analysis
cpa = cpa.arg.ARGCPA

ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.value.ValueAnalysisCPA, cpa.predicate.PredicateCPA

analysis.checkCounterexamples = true
analysis.algorithm.CEGAR = true
cegar.refiner = cpa.predicate.PredicateRefiner

counterexample.checker = CONCRETE_EXECUTION

counterexample.continueAfterInfeasibleError = true
analysis.stopAfterError=false

ValueAnalysisCPA.precision.trackBooleanVariables = true
ValueAnalysisCPA.precision.trackIntAddVariables = true
ValueAnalysisCPA.precision.trackIntEqualVariables = true
ValueAnalysisCPA.precision.trackVariablesBesidesEqAddBool = true

# Verification witness: Include the considered case of an assume?
cpa.arg.witness.exportAssumeCaseInfo = true

# Verification witness: Include assumptions (C statements)?
cpa.arg.witness.exportAssumptions = true

# this automaton defines which locations are the error locations
specification = specification/default.spc
