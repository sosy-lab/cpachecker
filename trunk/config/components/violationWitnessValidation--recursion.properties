# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# This configuration file uses a combination of block-abstraction memoization
# and predicate-analysis to verify recursive procedures.
# ----------------------------------------------------------------------

#include ../valueAnalysis-predicateAnalysis-bam-rec.properties

# Disable CPU time limit
limits.time.cpu =

# Strategy is very important for recursion;
# we use Mathsat as solver, because it supports bit vectors.
# Mathsat has no direct tree-itp-support,
# but we can simulate it through nested interpolation.
cpa.predicate.refinement.strategy = tree_nested

cpa.composite.aggregateBasicBlocks = false

analysis.checkCounterexamples = false

specification =

# do not ignore any variables; otherwise assumptions over these variables mess up strengthening
cpa.predicate.ignoreIrrelevantVariables = false

# Initial static refinement does not work well with witness automata
cpa.predicate.refinement.performInitialStaticRefinement = false
