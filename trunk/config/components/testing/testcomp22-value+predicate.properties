# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

analysis.useCompositionAnalysis = true
compositionAlgorithm.strategy=CircularCompositionStrategy
compositionAlgorithm.writeIntermediateOutputFiles = false
compositionAlgorithm.intermediateStatistics = NONE
compositionAlgorithm.propertyChecked = false

testcase.targets.optimization.strategy = TESTCOMP

# The used analyses.
compositionAlgorithm.configFiles = testcomp22-generation-value.properties::continue_20, testcomp21-generation-predicate.properties::continue_80

# If option is set the time limits per round are adapted according to seen progress
compositionAlgorithm.circular.adaptTimeLimits = true
testcase.progress=RELATIVE_TOTAL
testcase.mutants=5

# change these parameters to be better at recursive programs
cpa.callstack.depth=0
# setting this option is unsound, but we may get a valid test case by fortune if we encounter too many recursive calls
cpa.callstack.skipVoidRecursion = false
