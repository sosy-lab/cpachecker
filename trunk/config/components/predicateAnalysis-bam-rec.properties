# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# This configuration file uses a combination of block abstraction memoization
# and predicate-analysis to verify recursive procedures.
#
# Predicate analysis for recursive procedures has to take care of scoping.
# We compute interpolants according to function scopes to avoid colliding symbols in recursive scopes.
# This strategy is denoted as `tree interpolation`.
# It depends on the used SMT solver which exact strategy can be applied,
# i.e., only a single query or several queries with several prover stacks.
# Additionally, we require a special encoding of function parameters and
# global variables at function entry and return location,
# and an additional abstraction computation at the function call node.
# ----------------------------------------------------------------------

#include predicateAnalysis-bam.properties
#include ../includes/bam-rec.properties

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.predicate.BAMPredicateCPA, cpa.functionpointer.FunctionPointerCPA

# strategy is very important for recursion!
# MathSAT5 does not support the "tree" strategy
cpa.predicate.refinement.strategy = tree_nested

# use additional symbols, needed for tree-interpolation (for some solvers)
cpa.predicate.useParameterVariables = true
cpa.predicate.useParameterVariablesForGlobals = true

# set abstraction locations according to BAM
cpa.predicate.blk.alwaysAtFunctions = true
cpa.predicate.blk.alwaysAtLoops     = true
cpa.predicate.blk.alwaysAtFunctionCallNodes = true

cpa.predicate.handlePointerAliasing = false
