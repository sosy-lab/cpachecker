# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

// ----------------------------------------------------------------------
// This configuration file is for slicing a task along loop iterations.
// The idea is to unroll the loops a specific amount of times.
// This modulus k is set by cpa.loopbound.cyclicStopModulus.
// Then we can specify slices by specifying that the ARG should only
// contain target states that where found in a certain loop iteration i,
// which can be done by setting cpa.loopbound.checkOnlyAtBounds to a
// subset of the range {0,..,k}
// The generated C program filename can be specified using
// cpa.arg.CTranslation.file.
// ----------------------------------------------------------------------

specification = specification/default.spc

cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.loopbound.LoopBoundCPA

// Ignore target states during ARG creation
cpa.automaton.breakOnTargetState = 0

// the loop unrolling bound
cpa.loopbound.cyclicStopModulus=3

// this checks all errors, i.e., it is sound(for splitting, use a sublist):
cpa.loopbound.checkOnlyAtBounds=0,1,2,3

// we need to avoid using a partitioned reached set,
// as the cyclic stop operator is ineffective in that case
// because LoopBoundStates are partitioned using their stack,
// i.e., states with congruent depths would never see each other:
analysis.reachedSet=LOCATIONMAPPED

# Options for residual program generation
cpa.composite.aggregateBasicBlocks = false
cpa.arg.translateToC = true
cpa.arg.export.code.handleTargetStates=VERIFIERERROR
cpa.arg.export.code.header=false
