# This file is part of SoSy-Lab Java-Project Template,
# a collection of common files and build definitions for Java projects:
# https://gitlab.com/sosy-lab/software/java-project-template
#
# SPDX-FileCopyrightText: 2018-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# DO NOT EDIT LOCALLY!
# Keep this file synchronized with
# https://gitlab.com/sosy-lab/software/java-project-template

stages:
  - images
  - dependencies
  - build
  - checks
  - deploy

# Default image for non-JDK-specific jobs
image: ${CI_REGISTRY_IMAGE}/test:jdk-11

variables:
  IVY_CACHE_DIR: "${CI_PROJECT_DIR}/.ivy2"
  ANT_PROPS_BUILD: "-Divy.disable=true"
  ANT_PROPS_CHECKS: "-Divy.disable=true -DskipBuild=true"


# Download dependencies and provide them to later stages
build-dependencies:
  stage: dependencies
  dependencies: []
  script: "ant build-dependencies"
  interruptible: true
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - ".ivy2/"
      - "lib/java/"
  artifacts:
    paths:
      - "lib/java/"


# Build binaries and provide them to later stages
.build: &build
  stage: build
  script: "ant $ANT_PROPS_BUILD jar"
  interruptible: true
  artifacts:
    paths:
      - "bin/"
      - "*.jar"

build:jdk-11:
  <<: *build
  image: ${CI_REGISTRY_IMAGE}/test:jdk-11

build:jdk-17:
  <<: *build
  image: ${CI_REGISTRY_IMAGE}/test:jdk-17


# For checks that need the binaries
.binary_check: &binary_check
  stage: checks
  interruptible: true

# For checks that only need the source code, not the binaries
.source_check: &source_check
  stage: checks
  dependencies:
    - build-dependencies
  needs:
    - build-dependencies
  interruptible: true


.build-project-ecj: &build-project-ecj
  <<: *source_check
  script: "ant $ANT_PROPS_BUILD build-project-ecj"

build-project-ecj:jdk-11:
  <<: *build-project-ecj
  image: ${CI_REGISTRY_IMAGE}/test:jdk-11

build-project-ecj:jdk-17:
  <<: *build-project-ecj
  image: ${CI_REGISTRY_IMAGE}/test:jdk-17


check-format:
  <<: *source_check
  script: "ant $ANT_PROPS_CHECKS format-source && git diff -s --exit-code"

checkstyle:
  <<: *source_check
  script:
    - "ant $ANT_PROPS_CHECKS checkstyle"
    - "ant $ANT_PROPS_CHECKS run-checkstyle -Dcheckstyle.output=plain && cat Checkstyle*.xml && test $(cat Checkstyle*xml | grep -vic audit) -eq 0"
  artifacts:
    paths:
      - "Checkstyle*html"
    when: on_failure

javadoc:
  <<: *binary_check
  script: "ant $ANT_PROPS_CHECKS javadoc"
  dependencies:
    - build-dependencies
    - build:jdk-11
  needs:
    - build-dependencies
    - build:jdk-11
  artifacts:
    paths:
      - "Javadoc/"

spotbugs:
  <<: *binary_check
  script:
    - 'ant $ANT_PROPS_CHECKS spotbugs'
    - 'test \! -f SpotBugs.html'
  dependencies:
    - build-dependencies
    - build:jdk-11
  needs:
    - build-dependencies
    - build:jdk-11
  artifacts:
    paths:
      - "SpotBugs.html"
    when: on_failure

.unit-tests: &unit-tests
  <<: *binary_check
  script: "ant $ANT_PROPS_CHECKS unit-tests-coverage"
  artifacts:
    paths:
      - "JUnit.html"
      - "JUnit-coverage/"
      - "junit/coverage.xml"
    when: always
    reports:
      junit: "junit/TESTS-TestSuites.xml"

unit-tests:jdk-11:
  <<: *unit-tests
  dependencies:
    - build-dependencies
    - build:jdk-11
  needs:
    - build-dependencies
    - build:jdk-11
  image: ${CI_REGISTRY_IMAGE}/test:jdk-11

unit-tests:jdk-17:
  <<: *unit-tests
  dependencies:
    - build-dependencies
    - build:jdk-17
  needs:
    - build-dependencies
    - build:jdk-17
  image: ${CI_REGISTRY_IMAGE}/test:jdk-17


refaster:
  <<: *source_check
  image: ${CI_REGISTRY_IMAGE}/test:jdk-11
  before_script:
    - 'test -d refaster || git clone https://gitlab.com/sosy-lab/software/refaster.git'
    - 'cd refaster'
    - 'git fetch'
    - 'git checkout $REFASTER_REPO_REVISION'
    - 'ant build-refaster-rule -Drefaster.source.pattern=**/*.java -Drefaster.rule.file=../rule.refaster -Derrorprone.version=$REFASTER_VERSION'
    - 'cd -'
  script:
    - 'ant $ANT_PROPS_BUILD refaster -Drefaster.rule.file=rule.refaster'
  interruptible: true
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - ".ivy2/"
      - "refaster/"
  artifacts:
    paths:
      - "error-prone.patch"
      - "rule.refaster"
    when: on_failure
  except:
    variables:
      - $REFASTER_REPO_REVISION == null # required for job
      - $REFASTER_VERSION == null # required for job


# check license declarations etc.
reuse:
  stage: checks
  dependencies: []
  needs: []
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  script:
    - reuse lint


deploy-gh-pages:
  stage: deploy
  script: "build/deploy-gh-pages.sh"
  dependencies:
    - build:jdk-11
    - javadoc
  needs:
    - build:jdk-11
    - javadoc
  only:
    variables:
      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # only on default branch
      - $CI_PROJECT_PATH == $PROJECT_PATH # not on forks
  except:
    variables:
      - $GH_TOKEN == null # required for job


# Build Docker images
# following this guideline: https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
.build-docker:
  stage: images
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  variables:
    EXTRA_ARGS: ""
  script:
    - mkdir -p /root/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --dockerfile $CI_PROJECT_DIR/$DOCKERFILE --destination $CI_REGISTRY_IMAGE$IMAGE $EXTRA_ARGS
  only:
    - schedules
    - web

build-docker:test:jdk-11:
  extends: .build-docker
  variables:
    DOCKERFILE: build/gitlab-ci.Dockerfile.jdk-11
    IMAGE: /test:jdk-11

build-docker:test:jdk-17:
  extends: .build-docker
  variables:
    DOCKERFILE: build/gitlab-ci.Dockerfile.jdk-17
    IMAGE: /test:jdk-17
