// SPDX-FileCopyrightText: 2000 Jeff Carneal <jeff@apex.net>
// SPDX-FileCopyrightText: 2000 Miquel van Smoorenburg <miquels@cistron.nl>
// SPDX-FileCopyrightText: 2000 The FreeRADIUS server project
//
// SPDX-License-Identifier: GPL-2.0-or-later

/* Generated by CIL v. 1.3.7 */
/* print_CIL_Input is true */

#line 31 "/usr/include/bits/types.h"
typedef unsigned char __u_char;
#line 32 "/usr/include/bits/types.h"
typedef unsigned short __u_short;
#line 149 "/usr/include/bits/types.h"
typedef long __time_t;
#line 35 "/usr/include/sys/types.h"
typedef __u_char u_char;
#line 36 "/usr/include/sys/types.h"
typedef __u_short u_short;
#line 76 "/usr/include/time.h"
typedef __time_t time_t;
#line 211 "/usr/lib/gcc/x86_64-linux-gnu/4.4.1/include/stddef.h"
typedef unsigned long size_t;
#line 50 "/usr/include/bits/pthreadtypes.h"
typedef unsigned long pthread_t;
#line 49 "/usr/include/stdint.h"
typedef unsigned char uint8_t;
#line 52 "/usr/include/stdint.h"
typedef unsigned int uint32_t;
#line 84 "../include/libradius.h"
struct dict_value {
   char name[32] ;
   char attrname[32] ;
   int attr ;
   int value ;
   struct dict_value *next ;
};
#line 84 "../include/libradius.h"
typedef struct dict_value DICT_VALUE;
#line 99 "../include/libradius.h"
struct value_pair {
   char name[32] ;
   int attribute ;
   int type ;
   int length ;
   uint32_t lvalue ;
   int operator ;
   int addport ;
   uint8_t strvalue[254] ;
   struct value_pair *next ;
};
#line 99 "../include/libradius.h"
typedef struct value_pair VALUE_PAIR;
#line 120 "../include/libradius.h"
struct radius_packet {
   int sockfd ;
   uint32_t src_ipaddr ;
   uint32_t dst_ipaddr ;
   u_short src_port ;
   u_short dst_port ;
   int id ;
   int code ;
   uint8_t vector[16] ;
   time_t timestamp ;
   int verified ;
   uint8_t *data ;
   int data_len ;
   VALUE_PAIR *vps ;
};
#line 120 "../include/libradius.h"
typedef struct radius_packet RADIUS_PACKET;
#line 21 "../include/radiusd.h"
typedef pthread_t child_pid_t;
#line 34 "../include/radiusd.h"
struct auth_req {
   uint32_t magic ;
   RADIUS_PACKET *packet ;
   RADIUS_PACKET *proxy ;
   RADIUS_PACKET *reply ;
   RADIUS_PACKET *proxy_reply ;
   VALUE_PAIR *config_items ;
   VALUE_PAIR *username ;
   VALUE_PAIR *password ;
   char secret[32] ;
   child_pid_t child_pid ;
   time_t timestamp ;
   int number ;
   char proxysecret[32] ;
   int proxy_is_replicate ;
   int proxy_try_count ;
   time_t proxy_next_try ;
   int simul_max ;
   int simul_count ;
   int simul_mpp ;
   int finished ;
   void **container ;
};
#line 34 "../include/radiusd.h"
typedef struct auth_req REQUEST;
#line 110 "../include/radiusd.h"
struct main_config_t {
   int log_auth ;
   int log_auth_badpass ;
   int log_auth_goodpass ;
   int do_usercollide ;
   char *do_lower_user ;
   char *do_lower_pass ;
   char *do_nospace_user ;
   char *do_nospace_pass ;
   char *nospace_time ;
};
#line 363 "/usr/include/stdio.h"
extern  __attribute__((__nothrow__)) int ( /* format attribute */  snprintf)(char * __restrict  __s ,
                                                                             size_t __maxlen ,
                                                                             char const   * __restrict  __format 
                                                                             , ...) ;
#line 186 "/usr/include/time.h"
extern  __attribute__((__nothrow__)) time_t time(time_t *__timer ) ;
#line 139 "../include/libradius.h"
extern void librad_safeprint(char *in , int inlen , char *out , int outlen ) ;
#line 155
extern DICT_VALUE *dict_valbyattr(int attr , int val ) ;
#line 179
extern int rad_pwdecode(char *encpw , int len , char const   *secret , char const   *vector ) ;
#line 180
extern int rad_chap_encode(RADIUS_PACKET *packet , char *output , int id , VALUE_PAIR *password ) ;
#line 185
extern VALUE_PAIR *paircreate(int attr , int type ) ;
#line 186
extern void pairfree(VALUE_PAIR ** ) ;
#line 187
extern VALUE_PAIR *pairfind(VALUE_PAIR * , int  ) ;
#line 188
extern void pairdelete(VALUE_PAIR ** , int  ) ;
#line 189
extern void pairadd(VALUE_PAIR ** , VALUE_PAIR * ) ;
#line 194
extern VALUE_PAIR *pairmake(char const   *attribute , char const   *value , int operator ) ;
#line 224
extern char *strNcpy(char *dest , char const   *src , int n ) ;
#line 488 "/usr/include/stdlib.h"
extern  __attribute__((__nothrow__)) void free(void *__ptr ) ;
#line 543
extern  __attribute__((__nothrow__, __noreturn__)) void exit(int __status ) ;
#line 67 "/usr/include/string.h"
extern  __attribute__((__nothrow__)) int memcmp(void const   *__s1 , void const   *__s2 ,
                                                size_t __n )  __attribute__((__pure__,
__nonnull__(1,2))) ;
#line 127
extern  __attribute__((__nothrow__)) char *strcpy(char * __restrict  __dest , char const   * __restrict  __src )  __attribute__((__nonnull__(1,2))) ;
#line 142
extern  __attribute__((__nothrow__)) int strcmp(char const   *__s1 , char const   *__s2 )  __attribute__((__pure__,
__nonnull__(1,2))) ;
#line 173
extern  __attribute__((__nothrow__)) char *strdup(char const   *__s )  __attribute__((__nonnull__(1),
__malloc__)) ;
#line 397
extern  __attribute__((__nothrow__)) size_t strlen(char const   *__s )  __attribute__((__pure__,
__nonnull__(1))) ;
#line 81 "/usr/include/ctype.h"
extern  __attribute__((__nothrow__)) unsigned short const   **__ctype_b_loc(void)  __attribute__((__const__)) ;
#line 33 "/usr/include/crypt.h"
extern  __attribute__((__nothrow__)) char *crypt(char const   *__key , char const   *__salt )  __attribute__((__nonnull__(1,2))) ;
#line 365 "/usr/include/netinet/in.h"
extern  __attribute__((__nothrow__)) uint32_t ntohl(uint32_t __netlong )  __attribute__((__const__)) ;
#line 368
extern  __attribute__((__nothrow__)) uint32_t htonl(uint32_t __hostlong )  __attribute__((__const__)) ;
#line 158 "../include/radiusd.h"
extern int debug_flag ;
#line 180
extern struct main_config_t mainconfig ;
#line 229
extern char const   *nas_name2(RADIUS_PACKET *r ) ;
#line 237
extern int ( /* format attribute */  radlog)(int  , char const   *  , ...) ;
#line 242
extern int ( /* format attribute */  log_debug)(char const   *  , ...) ;
#line 253
char *auth_name(char *buf , size_t buflen , REQUEST *request , int do_cli ) ;
#line 254
int rad_authenticate(REQUEST *request ) ;
#line 255
VALUE_PAIR *rad_getpass(REQUEST *request ) ;
#line 256
int rad_check_password(REQUEST *request ) ;
#line 259
extern int radius_exec_program(char const   * , REQUEST * , int  , char const   **user_msg ) ;
#line 263
extern int timestr_match(char * , time_t  ) ;
#line 278
extern int radius_xlat(char *out , int outlen , char const   *fmt , REQUEST *request ,
                       int (*func)(char *out , int outlen , char const   *in ) ) ;
#line 50 "../include/modules.h"
extern int module_authorize(REQUEST *request ) ;
#line 51
extern int module_authenticate(int type , REQUEST *request ) ;
#line 54
extern int module_checksimul(REQUEST *request , int maxsimul ) ;
#line 54 "auth.c"
char *auth_name(char *buf , size_t buflen , REQUEST *request , int do_cli ) 
{ VALUE_PAIR *cli ;
  VALUE_PAIR *pair ;
  int port ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  unsigned long __cil_tmp11 ;
  unsigned long __cil_tmp12 ;
  RADIUS_PACKET *__cil_tmp13 ;
  unsigned long __cil_tmp14 ;
  unsigned long __cil_tmp15 ;
  VALUE_PAIR *__cil_tmp16 ;
  void *__cil_tmp17 ;
  unsigned long __cil_tmp18 ;
  unsigned long __cil_tmp19 ;
  unsigned long __cil_tmp20 ;
  unsigned long __cil_tmp21 ;
  RADIUS_PACKET *__cil_tmp22 ;
  unsigned long __cil_tmp23 ;
  unsigned long __cil_tmp24 ;
  VALUE_PAIR *__cil_tmp25 ;
  void *__cil_tmp26 ;
  unsigned long __cil_tmp27 ;
  unsigned long __cil_tmp28 ;
  unsigned long __cil_tmp29 ;
  unsigned long __cil_tmp30 ;
  uint32_t __cil_tmp31 ;
  unsigned long __cil_tmp32 ;
  unsigned long __cil_tmp33 ;
  unsigned long __cil_tmp34 ;
  unsigned long __cil_tmp35 ;
  uint8_t *__cil_tmp36 ;
  char *__cil_tmp37 ;
  unsigned long __cil_tmp38 ;
  unsigned long __cil_tmp39 ;
  RADIUS_PACKET *__cil_tmp40 ;
  char * __restrict  __cil_tmp41 ;
  char const   * __restrict  __cil_tmp42 ;
  RADIUS_PACKET **mem_43 ;
  VALUE_PAIR **mem_44 ;
  RADIUS_PACKET **mem_45 ;
  VALUE_PAIR **mem_46 ;
  uint32_t *mem_47 ;
  RADIUS_PACKET **mem_48 ;

  {
  {
#line 57
  port = 0;
#line 59
  __cil_tmp11 = (unsigned long )request;
#line 59
  __cil_tmp12 = __cil_tmp11 + 8;
#line 59
  mem_43 = (RADIUS_PACKET **)__cil_tmp12;
#line 59
  __cil_tmp13 = *mem_43;
#line 59
  __cil_tmp14 = (unsigned long )__cil_tmp13;
#line 59
  __cil_tmp15 = __cil_tmp14 + 72;
#line 59
  mem_44 = (VALUE_PAIR **)__cil_tmp15;
#line 59
  __cil_tmp16 = *mem_44;
#line 59
  cli = pairfind(__cil_tmp16, 31);
  }
  {
#line 59
  __cil_tmp17 = (void *)0;
#line 59
  __cil_tmp18 = (unsigned long )__cil_tmp17;
#line 59
  __cil_tmp19 = (unsigned long )cli;
#line 59
  if (__cil_tmp19 == __cil_tmp18) {
#line 60
    do_cli = 0;
  } else {

  }
  }
  {
#line 61
  __cil_tmp20 = (unsigned long )request;
#line 61
  __cil_tmp21 = __cil_tmp20 + 8;
#line 61
  mem_45 = (RADIUS_PACKET **)__cil_tmp21;
#line 61
  __cil_tmp22 = *mem_45;
#line 61
  __cil_tmp23 = (unsigned long )__cil_tmp22;
#line 61
  __cil_tmp24 = __cil_tmp23 + 72;
#line 61
  mem_46 = (VALUE_PAIR **)__cil_tmp24;
#line 61
  __cil_tmp25 = *mem_46;
#line 61
  pair = pairfind(__cil_tmp25, 5);
  }
  {
#line 61
  __cil_tmp26 = (void *)0;
#line 61
  __cil_tmp27 = (unsigned long )__cil_tmp26;
#line 61
  __cil_tmp28 = (unsigned long )pair;
#line 61
  if (__cil_tmp28 != __cil_tmp27) {
#line 62
    __cil_tmp29 = (unsigned long )pair;
#line 62
    __cil_tmp30 = __cil_tmp29 + 44;
#line 62
    mem_47 = (uint32_t *)__cil_tmp30;
#line 62
    __cil_tmp31 = *mem_47;
#line 62
    port = (int )__cil_tmp31;
  } else {

  }
  }
#line 64
  if (do_cli) {
#line 64
    __cil_tmp32 = 0 * 1UL;
#line 64
    __cil_tmp33 = 56 + __cil_tmp32;
#line 64
    __cil_tmp34 = (unsigned long )cli;
#line 64
    __cil_tmp35 = __cil_tmp34 + __cil_tmp33;
#line 64
    __cil_tmp36 = (uint8_t *)__cil_tmp35;
#line 64
    __cil_tmp37 = (char *)__cil_tmp36;
#line 64
    tmp = (char const   *)__cil_tmp37;
  } else {
#line 64
    tmp = "";
  }
#line 64
  if (do_cli) {
#line 64
    tmp___0 = " cli ";
  } else {
#line 64
    tmp___0 = "";
  }
  {
#line 64
  __cil_tmp38 = (unsigned long )request;
#line 64
  __cil_tmp39 = __cil_tmp38 + 8;
#line 64
  mem_48 = (RADIUS_PACKET **)__cil_tmp39;
#line 64
  __cil_tmp40 = *mem_48;
#line 64
  tmp___1 = nas_name2(__cil_tmp40);
#line 64
  __cil_tmp41 = (char * __restrict  )buf;
#line 64
  __cil_tmp42 = (char const   * __restrict  )"from nas %.128s port %d%s%.128s";
#line 64
  snprintf(__cil_tmp41, buflen, __cil_tmp42, tmp___1, port, tmp___0, tmp);
  }
#line 68
  return (buf);
}
}
#line 75 "auth.c"
static int check_expiration(REQUEST *request ) 
{ int result ;
  VALUE_PAIR *check_item ;
  VALUE_PAIR *vp ;
  time_t tmp ;
  unsigned long __cil_tmp6 ;
  unsigned long __cil_tmp7 ;
  void *__cil_tmp8 ;
  unsigned long __cil_tmp9 ;
  unsigned long __cil_tmp10 ;
  unsigned long __cil_tmp11 ;
  unsigned long __cil_tmp12 ;
  int __cil_tmp13 ;
  void *__cil_tmp14 ;
  time_t *__cil_tmp15 ;
  unsigned int __cil_tmp16 ;
  unsigned long __cil_tmp17 ;
  unsigned long __cil_tmp18 ;
  uint32_t __cil_tmp19 ;
  unsigned long __cil_tmp20 ;
  unsigned long __cil_tmp21 ;
  RADIUS_PACKET *__cil_tmp22 ;
  unsigned long __cil_tmp23 ;
  unsigned long __cil_tmp24 ;
  VALUE_PAIR **__cil_tmp25 ;
  unsigned long __cil_tmp26 ;
  unsigned long __cil_tmp27 ;
  RADIUS_PACKET *__cil_tmp28 ;
  unsigned long __cil_tmp29 ;
  unsigned long __cil_tmp30 ;
  unsigned long __cil_tmp31 ;
  unsigned long __cil_tmp32 ;
  VALUE_PAIR **mem_33 ;
  int *mem_34 ;
  uint32_t *mem_35 ;
  RADIUS_PACKET **mem_36 ;
  RADIUS_PACKET **mem_37 ;
  VALUE_PAIR **mem_38 ;
  struct value_pair **mem_39 ;

  {
#line 78
  __cil_tmp6 = (unsigned long )request;
#line 78
  __cil_tmp7 = __cil_tmp6 + 40;
#line 78
  mem_33 = (VALUE_PAIR **)__cil_tmp7;
#line 78
  check_item = *mem_33;
#line 80
  result = 0;
  {
#line 81
  while (1) {
    while_0_continue: /* CIL Label */ ;
#line 81
    if (result == 0) {
      {
#line 81
      __cil_tmp8 = (void *)0;
#line 81
      __cil_tmp9 = (unsigned long )__cil_tmp8;
#line 81
      __cil_tmp10 = (unsigned long )check_item;
#line 81
      if (__cil_tmp10 != __cil_tmp9) {

      } else {
        goto while_0_break;
      }
      }
    } else {
      goto while_0_break;
    }
    {
#line 86
    __cil_tmp11 = (unsigned long )check_item;
#line 86
    __cil_tmp12 = __cil_tmp11 + 32;
#line 86
    mem_34 = (int *)__cil_tmp12;
#line 86
    __cil_tmp13 = *mem_34;
#line 86
    if (__cil_tmp13 == 21) {
      {
#line 94
      __cil_tmp14 = (void *)0;
#line 94
      __cil_tmp15 = (time_t *)__cil_tmp14;
#line 94
      tmp = time(__cil_tmp15);
      }
      {
#line 94
      __cil_tmp16 = (unsigned int )tmp;
#line 94
      __cil_tmp17 = (unsigned long )check_item;
#line 94
      __cil_tmp18 = __cil_tmp17 + 44;
#line 94
      mem_35 = (uint32_t *)__cil_tmp18;
#line 94
      __cil_tmp19 = *mem_35;
#line 94
      if (__cil_tmp19 < __cil_tmp16) {
        {
#line 97
        result = -1;
#line 98
        vp = pairmake("Reply-Message", "Password Has Expired\r\n", 8);
#line 101
        __cil_tmp20 = (unsigned long )request;
#line 101
        __cil_tmp21 = __cil_tmp20 + 24;
#line 101
        mem_36 = (RADIUS_PACKET **)__cil_tmp21;
#line 101
        __cil_tmp22 = *mem_36;
#line 101
        __cil_tmp23 = (unsigned long )__cil_tmp22;
#line 101
        __cil_tmp24 = __cil_tmp23 + 72;
#line 101
        __cil_tmp25 = (VALUE_PAIR **)__cil_tmp24;
#line 101
        pairfree(__cil_tmp25);
#line 102
        __cil_tmp26 = (unsigned long )request;
#line 102
        __cil_tmp27 = __cil_tmp26 + 24;
#line 102
        mem_37 = (RADIUS_PACKET **)__cil_tmp27;
#line 102
        __cil_tmp28 = *mem_37;
#line 102
        __cil_tmp29 = (unsigned long )__cil_tmp28;
#line 102
        __cil_tmp30 = __cil_tmp29 + 72;
#line 102
        mem_38 = (VALUE_PAIR **)__cil_tmp30;
#line 102
        *mem_38 = vp;
        }
        goto while_0_break;
      } else {

      }
      }
    } else {

    }
    }
#line 106
    __cil_tmp31 = (unsigned long )check_item;
#line 106
    __cil_tmp32 = __cil_tmp31 + 312;
#line 106
    mem_39 = (struct value_pair **)__cil_tmp32;
#line 106
    check_item = *mem_39;
  }
  while_0_break: /* CIL Label */ ;
  }
#line 108
  return (result);
}
}
#line 116 "auth.c"
static int rad_authlog(char const   *msg , REQUEST *request , int goodpass ) 
{ char clean_password[1024] ;
  char clean_username[1024] ;
  char buf[1024] ;
  char *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  void *__cil_tmp13 ;
  unsigned long __cil_tmp14 ;
  unsigned long __cil_tmp15 ;
  unsigned long __cil_tmp16 ;
  VALUE_PAIR *__cil_tmp17 ;
  unsigned long __cil_tmp18 ;
  unsigned long __cil_tmp19 ;
  unsigned long __cil_tmp20 ;
  unsigned long __cil_tmp21 ;
  unsigned long __cil_tmp22 ;
  VALUE_PAIR *__cil_tmp23 ;
  unsigned long __cil_tmp24 ;
  unsigned long __cil_tmp25 ;
  unsigned long __cil_tmp26 ;
  unsigned long __cil_tmp27 ;
  unsigned long __cil_tmp28 ;
  unsigned long __cil_tmp29 ;
  VALUE_PAIR *__cil_tmp30 ;
  unsigned long __cil_tmp31 ;
  unsigned long __cil_tmp32 ;
  uint8_t *__cil_tmp33 ;
  char *__cil_tmp34 ;
  unsigned long __cil_tmp35 ;
  unsigned long __cil_tmp36 ;
  VALUE_PAIR *__cil_tmp37 ;
  unsigned long __cil_tmp38 ;
  unsigned long __cil_tmp39 ;
  int __cil_tmp40 ;
  unsigned long __cil_tmp41 ;
  unsigned long __cil_tmp42 ;
  char *__cil_tmp43 ;
  int __cil_tmp44 ;
  unsigned long __cil_tmp45 ;
  unsigned long __cil_tmp46 ;
  char *__cil_tmp47 ;
  char * __restrict  __cil_tmp48 ;
  char const   * __restrict  __cil_tmp49 ;
  unsigned long __cil_tmp50 ;
  unsigned long __cil_tmp51 ;
  VALUE_PAIR *__cil_tmp52 ;
  unsigned long __cil_tmp53 ;
  unsigned long __cil_tmp54 ;
  VALUE_PAIR *__cil_tmp55 ;
  unsigned long __cil_tmp56 ;
  unsigned long __cil_tmp57 ;
  int __cil_tmp58 ;
  unsigned long __cil_tmp59 ;
  unsigned long __cil_tmp60 ;
  char *__cil_tmp61 ;
  char * __restrict  __cil_tmp62 ;
  char const   * __restrict  __cil_tmp63 ;
  unsigned long __cil_tmp64 ;
  unsigned long __cil_tmp65 ;
  unsigned long __cil_tmp66 ;
  unsigned long __cil_tmp67 ;
  VALUE_PAIR *__cil_tmp68 ;
  unsigned long __cil_tmp69 ;
  unsigned long __cil_tmp70 ;
  unsigned long __cil_tmp71 ;
  unsigned long __cil_tmp72 ;
  unsigned long __cil_tmp73 ;
  unsigned long __cil_tmp74 ;
  VALUE_PAIR *__cil_tmp75 ;
  unsigned long __cil_tmp76 ;
  unsigned long __cil_tmp77 ;
  uint8_t *__cil_tmp78 ;
  char *__cil_tmp79 ;
  unsigned long __cil_tmp80 ;
  unsigned long __cil_tmp81 ;
  VALUE_PAIR *__cil_tmp82 ;
  unsigned long __cil_tmp83 ;
  unsigned long __cil_tmp84 ;
  int __cil_tmp85 ;
  unsigned long __cil_tmp86 ;
  unsigned long __cil_tmp87 ;
  char *__cil_tmp88 ;
  int __cil_tmp89 ;
  unsigned long __cil_tmp90 ;
  unsigned long __cil_tmp91 ;
  char *__cil_tmp92 ;
  char * __restrict  __cil_tmp93 ;
  char const   * __restrict  __cil_tmp94 ;
  unsigned long __cil_tmp95 ;
  unsigned long __cil_tmp96 ;
  char *__cil_tmp97 ;
  unsigned long __cil_tmp98 ;
  unsigned long __cil_tmp99 ;
  char *__cil_tmp100 ;
  unsigned long __cil_tmp101 ;
  unsigned long __cil_tmp102 ;
  char *__cil_tmp103 ;
  unsigned long __cil_tmp104 ;
  unsigned long __cil_tmp105 ;
  char *__cil_tmp106 ;
  unsigned long __cil_tmp107 ;
  unsigned long __cil_tmp108 ;
  char *__cil_tmp109 ;
  unsigned long __cil_tmp110 ;
  unsigned long __cil_tmp111 ;
  char *__cil_tmp112 ;
  VALUE_PAIR **mem_113 ;
  VALUE_PAIR **mem_114 ;
  VALUE_PAIR **mem_115 ;
  VALUE_PAIR **mem_116 ;
  int *mem_117 ;
  VALUE_PAIR **mem_118 ;
  VALUE_PAIR **mem_119 ;
  int *mem_120 ;
  VALUE_PAIR **mem_121 ;
  VALUE_PAIR **mem_122 ;
  VALUE_PAIR **mem_123 ;
  int *mem_124 ;

  {
#line 122
  if (! mainconfig.log_auth) {
#line 123
    return (0);
  } else {

  }
  {
#line 128
  __cil_tmp13 = (void *)0;
#line 128
  __cil_tmp14 = (unsigned long )__cil_tmp13;
#line 128
  __cil_tmp15 = (unsigned long )request;
#line 128
  __cil_tmp16 = __cil_tmp15 + 48;
#line 128
  mem_113 = (VALUE_PAIR **)__cil_tmp16;
#line 128
  __cil_tmp17 = *mem_113;
#line 128
  __cil_tmp18 = (unsigned long )__cil_tmp17;
#line 128
  if (__cil_tmp18 == __cil_tmp14) {
#line 129
    if (debug_flag > 1) {
      {
#line 129
      log_debug("rad_authlog:  no username found");
      }
    } else {

    }
#line 130
    return (-1);
  } else {

  }
  }
  {
#line 133
  __cil_tmp19 = 0 * 1UL;
#line 133
  __cil_tmp20 = 56 + __cil_tmp19;
#line 133
  __cil_tmp21 = (unsigned long )request;
#line 133
  __cil_tmp22 = __cil_tmp21 + 48;
#line 133
  mem_114 = (VALUE_PAIR **)__cil_tmp22;
#line 133
  __cil_tmp23 = *mem_114;
#line 133
  __cil_tmp24 = (unsigned long )__cil_tmp23;
#line 133
  __cil_tmp25 = __cil_tmp24 + __cil_tmp20;
#line 133
  if ((uint8_t *)__cil_tmp25) {
    {
#line 134
    __cil_tmp26 = 0 * 1UL;
#line 134
    __cil_tmp27 = 56 + __cil_tmp26;
#line 134
    __cil_tmp28 = (unsigned long )request;
#line 134
    __cil_tmp29 = __cil_tmp28 + 48;
#line 134
    mem_115 = (VALUE_PAIR **)__cil_tmp29;
#line 134
    __cil_tmp30 = *mem_115;
#line 134
    __cil_tmp31 = (unsigned long )__cil_tmp30;
#line 134
    __cil_tmp32 = __cil_tmp31 + __cil_tmp27;
#line 134
    __cil_tmp33 = (uint8_t *)__cil_tmp32;
#line 134
    __cil_tmp34 = (char *)__cil_tmp33;
#line 134
    __cil_tmp35 = (unsigned long )request;
#line 134
    __cil_tmp36 = __cil_tmp35 + 48;
#line 134
    mem_116 = (VALUE_PAIR **)__cil_tmp36;
#line 134
    __cil_tmp37 = *mem_116;
#line 134
    __cil_tmp38 = (unsigned long )__cil_tmp37;
#line 134
    __cil_tmp39 = __cil_tmp38 + 40;
#line 134
    mem_117 = (int *)__cil_tmp39;
#line 134
    __cil_tmp40 = *mem_117;
#line 134
    __cil_tmp41 = 0 * 1UL;
#line 134
    __cil_tmp42 = (unsigned long )(clean_username) + __cil_tmp41;
#line 134
    __cil_tmp43 = (char *)__cil_tmp42;
#line 134
    __cil_tmp44 = (int )1024UL;
#line 134
    librad_safeprint(__cil_tmp34, __cil_tmp40, __cil_tmp43, __cil_tmp44);
    }
  } else {
    {
#line 138
    __cil_tmp45 = 0 * 1UL;
#line 138
    __cil_tmp46 = (unsigned long )(clean_username) + __cil_tmp45;
#line 138
    __cil_tmp47 = (char *)__cil_tmp46;
#line 138
    __cil_tmp48 = (char * __restrict  )__cil_tmp47;
#line 138
    __cil_tmp49 = (char const   * __restrict  )"<No Username>";
#line 138
    strcpy(__cil_tmp48, __cil_tmp49);
    }
  }
  }
#line 144
  if (mainconfig.log_auth_badpass) {
    goto _L;
  } else {
#line 144
    if (mainconfig.log_auth_goodpass) {
      _L: /* CIL Label */ 
      {
#line 145
      __cil_tmp50 = (unsigned long )request;
#line 145
      __cil_tmp51 = __cil_tmp50 + 56;
#line 145
      mem_118 = (VALUE_PAIR **)__cil_tmp51;
#line 145
      __cil_tmp52 = *mem_118;
#line 145
      if (! __cil_tmp52) {
#line 146
        if (debug_flag > 1) {
          {
#line 146
          log_debug("rad_authlog:  no password found");
          }
        } else {

        }
#line 147
        return (-1);
      } else {

      }
      }
      {
#line 150
      __cil_tmp53 = (unsigned long )request;
#line 150
      __cil_tmp54 = __cil_tmp53 + 56;
#line 150
      mem_119 = (VALUE_PAIR **)__cil_tmp54;
#line 150
      __cil_tmp55 = *mem_119;
#line 150
      __cil_tmp56 = (unsigned long )__cil_tmp55;
#line 150
      __cil_tmp57 = __cil_tmp56 + 32;
#line 150
      mem_120 = (int *)__cil_tmp57;
#line 150
      __cil_tmp58 = *mem_120;
#line 150
      if (__cil_tmp58 == 3) {
        {
#line 151
        __cil_tmp59 = 0 * 1UL;
#line 151
        __cil_tmp60 = (unsigned long )(clean_password) + __cil_tmp59;
#line 151
        __cil_tmp61 = (char *)__cil_tmp60;
#line 151
        __cil_tmp62 = (char * __restrict  )__cil_tmp61;
#line 151
        __cil_tmp63 = (char const   * __restrict  )"<CHAP-Password>";
#line 151
        strcpy(__cil_tmp62, __cil_tmp63);
        }
      } else {
        {
#line 153
        __cil_tmp64 = 0 * 1UL;
#line 153
        __cil_tmp65 = 56 + __cil_tmp64;
#line 153
        __cil_tmp66 = (unsigned long )request;
#line 153
        __cil_tmp67 = __cil_tmp66 + 48;
#line 153
        mem_121 = (VALUE_PAIR **)__cil_tmp67;
#line 153
        __cil_tmp68 = *mem_121;
#line 153
        __cil_tmp69 = (unsigned long )__cil_tmp68;
#line 153
        __cil_tmp70 = __cil_tmp69 + __cil_tmp65;
#line 153
        if ((uint8_t *)__cil_tmp70) {
          {
#line 154
          __cil_tmp71 = 0 * 1UL;
#line 154
          __cil_tmp72 = 56 + __cil_tmp71;
#line 154
          __cil_tmp73 = (unsigned long )request;
#line 154
          __cil_tmp74 = __cil_tmp73 + 56;
#line 154
          mem_122 = (VALUE_PAIR **)__cil_tmp74;
#line 154
          __cil_tmp75 = *mem_122;
#line 154
          __cil_tmp76 = (unsigned long )__cil_tmp75;
#line 154
          __cil_tmp77 = __cil_tmp76 + __cil_tmp72;
#line 154
          __cil_tmp78 = (uint8_t *)__cil_tmp77;
#line 154
          __cil_tmp79 = (char *)__cil_tmp78;
#line 154
          __cil_tmp80 = (unsigned long )request;
#line 154
          __cil_tmp81 = __cil_tmp80 + 56;
#line 154
          mem_123 = (VALUE_PAIR **)__cil_tmp81;
#line 154
          __cil_tmp82 = *mem_123;
#line 154
          __cil_tmp83 = (unsigned long )__cil_tmp82;
#line 154
          __cil_tmp84 = __cil_tmp83 + 40;
#line 154
          mem_124 = (int *)__cil_tmp84;
#line 154
          __cil_tmp85 = *mem_124;
#line 154
          __cil_tmp86 = 0 * 1UL;
#line 154
          __cil_tmp87 = (unsigned long )(clean_password) + __cil_tmp86;
#line 154
          __cil_tmp88 = (char *)__cil_tmp87;
#line 154
          __cil_tmp89 = (int )1024UL;
#line 154
          librad_safeprint(__cil_tmp79, __cil_tmp85, __cil_tmp88, __cil_tmp89);
          }
        } else {
          {
#line 158
          __cil_tmp90 = 0 * 1UL;
#line 158
          __cil_tmp91 = (unsigned long )(clean_password) + __cil_tmp90;
#line 158
          __cil_tmp92 = (char *)__cil_tmp91;
#line 158
          __cil_tmp93 = (char * __restrict  )__cil_tmp92;
#line 158
          __cil_tmp94 = (char const   * __restrict  )"<No Password>";
#line 158
          strcpy(__cil_tmp93, __cil_tmp94);
          }
        }
        }
      }
      }
    } else {

    }
  }
#line 163
  if (goodpass) {
    {
#line 164
    __cil_tmp95 = 0 * 1UL;
#line 164
    __cil_tmp96 = (unsigned long )(buf) + __cil_tmp95;
#line 164
    __cil_tmp97 = (char *)__cil_tmp96;
#line 164
    tmp = auth_name(__cil_tmp97, 1024UL, request, 1);
    }
#line 164
    if (mainconfig.log_auth_goodpass) {
#line 164
      __cil_tmp98 = 0 * 1UL;
#line 164
      __cil_tmp99 = (unsigned long )(clean_password) + __cil_tmp98;
#line 164
      __cil_tmp100 = (char *)__cil_tmp99;
#line 164
      tmp___0 = (char const   *)__cil_tmp100;
    } else {
#line 164
      tmp___0 = "";
    }
#line 164
    if (mainconfig.log_auth_goodpass) {
#line 164
      tmp___1 = "/";
    } else {
#line 164
      tmp___1 = "";
    }
    {
#line 164
    __cil_tmp101 = 0 * 1UL;
#line 164
    __cil_tmp102 = (unsigned long )(clean_username) + __cil_tmp101;
#line 164
    __cil_tmp103 = (char *)__cil_tmp102;
#line 164
    radlog(2, "%s: [%s%s%s] (%s)", msg, __cil_tmp103, tmp___1, tmp___0, tmp);
    }
  } else {
    {
#line 171
    __cil_tmp104 = 0 * 1UL;
#line 171
    __cil_tmp105 = (unsigned long )(buf) + __cil_tmp104;
#line 171
    __cil_tmp106 = (char *)__cil_tmp105;
#line 171
    tmp___2 = auth_name(__cil_tmp106, 1024UL, request, 1);
    }
#line 171
    if (mainconfig.log_auth_badpass) {
#line 171
      __cil_tmp107 = 0 * 1UL;
#line 171
      __cil_tmp108 = (unsigned long )(clean_password) + __cil_tmp107;
#line 171
      __cil_tmp109 = (char *)__cil_tmp108;
#line 171
      tmp___3 = (char const   *)__cil_tmp109;
    } else {
#line 171
      tmp___3 = "";
    }
#line 171
    if (mainconfig.log_auth_badpass) {
#line 171
      tmp___4 = "/";
    } else {
#line 171
      tmp___4 = "";
    }
    {
#line 171
    __cil_tmp110 = 0 * 1UL;
#line 171
    __cil_tmp111 = (unsigned long )(clean_username) + __cil_tmp110;
#line 171
    __cil_tmp112 = (char *)__cil_tmp111;
#line 171
    radlog(2, "%s: [%s%s%s] (%s)", msg, __cil_tmp112, tmp___4, tmp___3, tmp___2);
    }
  }
#line 179
  return (0);
}
}
#line 192 "auth.c"
int rad_check_password(REQUEST *request ) 
{ VALUE_PAIR *auth_type_pair ;
  VALUE_PAIR *cur_config_item ;
  VALUE_PAIR *password_pair ;
  VALUE_PAIR *auth_item ;
  char string[254] ;
  int auth_type ;
  int result ;
  int auth_type_count ;
  int tmp ;
  int tmp___0 ;
  char *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  DICT_VALUE *tmp___5 ;
  unsigned long __cil_tmp17 ;
  unsigned long __cil_tmp18 ;
  void *__cil_tmp19 ;
  unsigned long __cil_tmp20 ;
  unsigned long __cil_tmp21 ;
  unsigned long __cil_tmp22 ;
  unsigned long __cil_tmp23 ;
  uint32_t __cil_tmp24 ;
  unsigned long __cil_tmp25 ;
  unsigned long __cil_tmp26 ;
  unsigned long __cil_tmp27 ;
  unsigned long __cil_tmp28 ;
  uint8_t *__cil_tmp29 ;
  unsigned long __cil_tmp30 ;
  unsigned long __cil_tmp31 ;
  unsigned long __cil_tmp32 ;
  unsigned long __cil_tmp33 ;
  unsigned long __cil_tmp34 ;
  unsigned long __cil_tmp35 ;
  VALUE_PAIR *__cil_tmp36 ;
  unsigned long __cil_tmp37 ;
  unsigned long __cil_tmp38 ;
  uint8_t *__cil_tmp39 ;
  unsigned long __cil_tmp40 ;
  unsigned long __cil_tmp41 ;
  unsigned long __cil_tmp42 ;
  unsigned long __cil_tmp43 ;
  void *__cil_tmp44 ;
  unsigned long __cil_tmp45 ;
  unsigned long __cil_tmp46 ;
  unsigned long __cil_tmp47 ;
  unsigned long __cil_tmp48 ;
  VALUE_PAIR *__cil_tmp49 ;
  void *__cil_tmp50 ;
  unsigned long __cil_tmp51 ;
  unsigned long __cil_tmp52 ;
  unsigned long __cil_tmp53 ;
  unsigned long __cil_tmp54 ;
  VALUE_PAIR *__cil_tmp55 ;
  unsigned long __cil_tmp56 ;
  unsigned long __cil_tmp57 ;
  unsigned long __cil_tmp58 ;
  unsigned long __cil_tmp59 ;
  uint8_t *__cil_tmp60 ;
  char *__cil_tmp61 ;
  char const   *__cil_tmp62 ;
  unsigned long __cil_tmp63 ;
  unsigned long __cil_tmp64 ;
  unsigned long __cil_tmp65 ;
  unsigned long __cil_tmp66 ;
  uint8_t *__cil_tmp67 ;
  char *__cil_tmp68 ;
  char const   *__cil_tmp69 ;
  void *__cil_tmp70 ;
  unsigned long __cil_tmp71 ;
  unsigned long __cil_tmp72 ;
  unsigned long __cil_tmp73 ;
  unsigned long __cil_tmp74 ;
  unsigned long __cil_tmp75 ;
  unsigned long __cil_tmp76 ;
  unsigned long __cil_tmp77 ;
  unsigned long __cil_tmp78 ;
  unsigned long __cil_tmp79 ;
  unsigned long __cil_tmp80 ;
  uint8_t *__cil_tmp81 ;
  char *__cil_tmp82 ;
  char const   *__cil_tmp83 ;
  unsigned long __cil_tmp84 ;
  unsigned long __cil_tmp85 ;
  unsigned long __cil_tmp86 ;
  unsigned long __cil_tmp87 ;
  uint8_t *__cil_tmp88 ;
  char *__cil_tmp89 ;
  char const   *__cil_tmp90 ;
  unsigned long __cil_tmp91 ;
  unsigned long __cil_tmp92 ;
  unsigned long __cil_tmp93 ;
  unsigned long __cil_tmp94 ;
  uint8_t *__cil_tmp95 ;
  char *__cil_tmp96 ;
  char const   *__cil_tmp97 ;
  char const   *__cil_tmp98 ;
  unsigned long __cil_tmp99 ;
  unsigned long __cil_tmp100 ;
  int __cil_tmp101 ;
  void *__cil_tmp102 ;
  unsigned long __cil_tmp103 ;
  unsigned long __cil_tmp104 ;
  unsigned long __cil_tmp105 ;
  unsigned long __cil_tmp106 ;
  unsigned long __cil_tmp107 ;
  unsigned long __cil_tmp108 ;
  uint8_t *__cil_tmp109 ;
  char *__cil_tmp110 ;
  char const   *__cil_tmp111 ;
  unsigned long __cil_tmp112 ;
  unsigned long __cil_tmp113 ;
  unsigned long __cil_tmp114 ;
  unsigned long __cil_tmp115 ;
  uint8_t *__cil_tmp116 ;
  char *__cil_tmp117 ;
  char const   *__cil_tmp118 ;
  void *__cil_tmp119 ;
  unsigned long __cil_tmp120 ;
  unsigned long __cil_tmp121 ;
  unsigned long __cil_tmp122 ;
  unsigned long __cil_tmp123 ;
  RADIUS_PACKET *__cil_tmp124 ;
  unsigned long __cil_tmp125 ;
  unsigned long __cil_tmp126 ;
  char *__cil_tmp127 ;
  unsigned long __cil_tmp128 ;
  unsigned long __cil_tmp129 ;
  unsigned long __cil_tmp130 ;
  unsigned long __cil_tmp131 ;
  uint8_t __cil_tmp132 ;
  int __cil_tmp133 ;
  unsigned long __cil_tmp134 ;
  unsigned long __cil_tmp135 ;
  char *__cil_tmp136 ;
  char *__cil_tmp137 ;
  void const   *__cil_tmp138 ;
  unsigned long __cil_tmp139 ;
  unsigned long __cil_tmp140 ;
  unsigned long __cil_tmp141 ;
  unsigned long __cil_tmp142 ;
  uint8_t *__cil_tmp143 ;
  uint8_t *__cil_tmp144 ;
  void const   *__cil_tmp145 ;
  unsigned long __cil_tmp146 ;
  unsigned long __cil_tmp147 ;
  unsigned long __cil_tmp148 ;
  unsigned long __cil_tmp149 ;
  char *__cil_tmp150 ;
  VALUE_PAIR **mem_151 ;
  uint32_t *mem_152 ;
  struct value_pair **mem_153 ;
  VALUE_PAIR **mem_154 ;
  RADIUS_PACKET **mem_155 ;
  VALUE_PAIR **mem_156 ;
  VALUE_PAIR **mem_157 ;
  VALUE_PAIR **mem_158 ;
  int *mem_159 ;
  RADIUS_PACKET **mem_160 ;
  uint8_t *mem_161 ;

  {
#line 199
  auth_type = -1;
#line 201
  auth_type_count = 0;
#line 202
  result = 0;
#line 209
  __cil_tmp17 = (unsigned long )request;
#line 209
  __cil_tmp18 = __cil_tmp17 + 40;
#line 209
  mem_151 = (VALUE_PAIR **)__cil_tmp18;
#line 209
  cur_config_item = *mem_151;
  {
#line 210
  while (1) {
    while_1_continue: /* CIL Label */ ;
    {
#line 210
    auth_type_pair = pairfind(cur_config_item, 1000);
    }
    {
#line 210
    __cil_tmp19 = (void *)0;
#line 210
    __cil_tmp20 = (unsigned long )__cil_tmp19;
#line 210
    __cil_tmp21 = (unsigned long )auth_type_pair;
#line 210
    if (__cil_tmp21 != __cil_tmp20) {

    } else {
      goto while_1_break;
    }
    }
#line 211
    __cil_tmp22 = (unsigned long )auth_type_pair;
#line 211
    __cil_tmp23 = __cil_tmp22 + 44;
#line 211
    mem_152 = (uint32_t *)__cil_tmp23;
#line 211
    __cil_tmp24 = *mem_152;
#line 211
    auth_type = (int )__cil_tmp24;
#line 212
    auth_type_count = auth_type_count + 1;
#line 214
    if (debug_flag > 1) {
      {
#line 214
      __cil_tmp25 = 0 * 1UL;
#line 214
      __cil_tmp26 = 56 + __cil_tmp25;
#line 214
      __cil_tmp27 = (unsigned long )auth_type_pair;
#line 214
      __cil_tmp28 = __cil_tmp27 + __cil_tmp26;
#line 214
      __cil_tmp29 = (uint8_t *)__cil_tmp28;
#line 214
      log_debug("  rad_check_password:  Found auth-type %s", __cil_tmp29);
      }
    } else {

    }
#line 216
    __cil_tmp30 = (unsigned long )auth_type_pair;
#line 216
    __cil_tmp31 = __cil_tmp30 + 312;
#line 216
    mem_153 = (struct value_pair **)__cil_tmp31;
#line 216
    cur_config_item = *mem_153;
#line 218
    if (auth_type == 4) {
#line 219
      if (debug_flag > 1) {
        {
#line 219
        log_debug("  rad_check_password: Auth-Type = Reject, rejecting user");
        }
      } else {

      }
#line 220
      return (-2);
    } else {

    }
  }
  while_1_break: /* CIL Label */ ;
  }
#line 224
  if (auth_type_count > 1) {
#line 224
    if (debug_flag) {
      {
#line 225
      __cil_tmp32 = 0 * 1UL;
#line 225
      __cil_tmp33 = 56 + __cil_tmp32;
#line 225
      __cil_tmp34 = (unsigned long )request;
#line 225
      __cil_tmp35 = __cil_tmp34 + 48;
#line 225
      mem_154 = (VALUE_PAIR **)__cil_tmp35;
#line 225
      __cil_tmp36 = *mem_154;
#line 225
      __cil_tmp37 = (unsigned long )__cil_tmp36;
#line 225
      __cil_tmp38 = __cil_tmp37 + __cil_tmp33;
#line 225
      __cil_tmp39 = (uint8_t *)__cil_tmp38;
#line 225
      radlog(4, "Warning:  Found %d auth-types on request for user \'%s\'", auth_type_count,
             __cil_tmp39);
      }
    } else {

    }
  } else {

  }
#line 235
  if (auth_type == 254) {
    goto _L;
  } else {
    {
#line 235
    __cil_tmp40 = (unsigned long )request;
#line 235
    __cil_tmp41 = __cil_tmp40 + 16;
    {
#line 235
    mem_155 = (RADIUS_PACKET **)__cil_tmp41;
#line 235
    if (*mem_155) {
      _L: /* CIL Label */ 
#line 236
      if (debug_flag > 1) {
        {
#line 236
        log_debug("  rad_check_password: Auth-Type = Accept, accepting the user");
        }
      } else {

      }
#line 237
      return (0);
    } else {

    }
    }
    }
  }
#line 244
  __cil_tmp42 = (unsigned long )request;
#line 244
  __cil_tmp43 = __cil_tmp42 + 56;
#line 244
  mem_156 = (VALUE_PAIR **)__cil_tmp43;
#line 244
  auth_item = *mem_156;
  {
#line 245
  __cil_tmp44 = (void *)0;
#line 245
  __cil_tmp45 = (unsigned long )__cil_tmp44;
#line 245
  __cil_tmp46 = (unsigned long )auth_item;
#line 245
  if (__cil_tmp46 == __cil_tmp45) {
#line 246
    if (debug_flag > 1) {
      {
#line 246
      log_debug("  auth: No password in the request");
      }
    } else {

    }
#line 247
    return (-1);
  } else {

  }
  }
  {
#line 253
  __cil_tmp47 = (unsigned long )request;
#line 253
  __cil_tmp48 = __cil_tmp47 + 40;
#line 253
  mem_157 = (VALUE_PAIR **)__cil_tmp48;
#line 253
  __cil_tmp49 = *mem_157;
#line 253
  password_pair = pairfind(__cil_tmp49, 1006);
  }
  {
#line 253
  __cil_tmp50 = (void *)0;
#line 253
  __cil_tmp51 = (unsigned long )__cil_tmp50;
#line 253
  __cil_tmp52 = (unsigned long )password_pair;
#line 253
  if (__cil_tmp52 != __cil_tmp51) {
#line 254
    auth_type = 3;
  } else {
    {
#line 256
    __cil_tmp53 = (unsigned long )request;
#line 256
    __cil_tmp54 = __cil_tmp53 + 40;
#line 256
    mem_158 = (VALUE_PAIR **)__cil_tmp54;
#line 256
    __cil_tmp55 = *mem_158;
#line 256
    password_pair = pairfind(__cil_tmp55, 2);
    }
  }
  }
#line 263
  if (auth_type < 0) {
#line 264
    if (password_pair) {
      {
#line 264
      __cil_tmp56 = 0 * 1UL;
#line 264
      __cil_tmp57 = 56 + __cil_tmp56;
#line 264
      __cil_tmp58 = (unsigned long )password_pair;
#line 264
      __cil_tmp59 = __cil_tmp58 + __cil_tmp57;
#line 264
      __cil_tmp60 = (uint8_t *)__cil_tmp59;
#line 264
      __cil_tmp61 = (char *)__cil_tmp60;
#line 264
      __cil_tmp62 = (char const   *)__cil_tmp61;
#line 264
      tmp___0 = strcmp(__cil_tmp62, "UNIX");
      }
#line 264
      if (tmp___0) {
        goto _L___0;
      } else {
#line 266
        auth_type = 1;
      }
    } else {
      _L___0: /* CIL Label */ 
#line 267
      if (password_pair) {
        {
#line 267
        __cil_tmp63 = 0 * 1UL;
#line 267
        __cil_tmp64 = 56 + __cil_tmp63;
#line 267
        __cil_tmp65 = (unsigned long )password_pair;
#line 267
        __cil_tmp66 = __cil_tmp65 + __cil_tmp64;
#line 267
        __cil_tmp67 = (uint8_t *)__cil_tmp66;
#line 267
        __cil_tmp68 = (char *)__cil_tmp67;
#line 267
        __cil_tmp69 = (char const   *)__cil_tmp68;
#line 267
        tmp = strcmp(__cil_tmp69, "PAM");
        }
#line 267
        if (tmp) {
#line 271
          auth_type = 0;
        } else {
#line 269
          auth_type = 253;
        }
      } else {
#line 271
        auth_type = 0;
      }
    }
  } else {

  }
#line 275
  if (auth_type == 3) {
    goto switch_2_3;
  } else {
#line 286
    if (auth_type == 0) {
      goto switch_2_0;
    } else {
      {
      goto switch_2_default;
#line 274
      if (0) {
        switch_2_3: /* CIL Label */ 
#line 276
        if (debug_flag > 1) {
          {
#line 276
          log_debug("  auth: Crypt");
          }
        } else {

        }
        {
#line 277
        __cil_tmp70 = (void *)0;
#line 277
        __cil_tmp71 = (unsigned long )__cil_tmp70;
#line 277
        __cil_tmp72 = (unsigned long )password_pair;
#line 277
        if (__cil_tmp72 == __cil_tmp71) {
          {
#line 278
          __cil_tmp73 = 0 * 1UL;
#line 278
          __cil_tmp74 = 56 + __cil_tmp73;
#line 278
          __cil_tmp75 = (unsigned long )auth_item;
#line 278
          __cil_tmp76 = __cil_tmp75 + __cil_tmp74;
#line 278
          if ((uint8_t *)__cil_tmp76) {
#line 278
            result = -1;
          } else {
#line 278
            result = 0;
          }
          }
          goto switch_2_break;
        } else {

        }
        }
        {
#line 281
        __cil_tmp77 = 0 * 1UL;
#line 281
        __cil_tmp78 = 56 + __cil_tmp77;
#line 281
        __cil_tmp79 = (unsigned long )auth_item;
#line 281
        __cil_tmp80 = __cil_tmp79 + __cil_tmp78;
#line 281
        __cil_tmp81 = (uint8_t *)__cil_tmp80;
#line 281
        __cil_tmp82 = (char *)__cil_tmp81;
#line 281
        __cil_tmp83 = (char const   *)__cil_tmp82;
#line 281
        __cil_tmp84 = 0 * 1UL;
#line 281
        __cil_tmp85 = 56 + __cil_tmp84;
#line 281
        __cil_tmp86 = (unsigned long )password_pair;
#line 281
        __cil_tmp87 = __cil_tmp86 + __cil_tmp85;
#line 281
        __cil_tmp88 = (uint8_t *)__cil_tmp87;
#line 281
        __cil_tmp89 = (char *)__cil_tmp88;
#line 281
        __cil_tmp90 = (char const   *)__cil_tmp89;
#line 281
        tmp___1 = crypt(__cil_tmp83, __cil_tmp90);
#line 281
        __cil_tmp91 = 0 * 1UL;
#line 281
        __cil_tmp92 = 56 + __cil_tmp91;
#line 281
        __cil_tmp93 = (unsigned long )password_pair;
#line 281
        __cil_tmp94 = __cil_tmp93 + __cil_tmp92;
#line 281
        __cil_tmp95 = (uint8_t *)__cil_tmp94;
#line 281
        __cil_tmp96 = (char *)__cil_tmp95;
#line 281
        __cil_tmp97 = (char const   *)__cil_tmp96;
#line 281
        __cil_tmp98 = (char const   *)tmp___1;
#line 281
        tmp___2 = strcmp(__cil_tmp97, __cil_tmp98);
        }
#line 281
        if (tmp___2 != 0) {
#line 284
          result = -1;
        } else {

        }
        goto switch_2_break;
        switch_2_0: /* CIL Label */ 
#line 287
        if (debug_flag > 1) {
          {
#line 287
          log_debug("  auth: Local");
          }
        } else {

        }
        {
#line 291
        __cil_tmp99 = (unsigned long )auth_item;
#line 291
        __cil_tmp100 = __cil_tmp99 + 32;
#line 291
        mem_159 = (int *)__cil_tmp100;
#line 291
        __cil_tmp101 = *mem_159;
#line 291
        if (__cil_tmp101 != 3) {
          {
#line 296
          __cil_tmp102 = (void *)0;
#line 296
          __cil_tmp103 = (unsigned long )__cil_tmp102;
#line 296
          __cil_tmp104 = (unsigned long )password_pair;
#line 296
          if (__cil_tmp104 == __cil_tmp103) {
#line 299
            result = -1;
          } else {
            {
#line 296
            __cil_tmp105 = 0 * 1UL;
#line 296
            __cil_tmp106 = 56 + __cil_tmp105;
#line 296
            __cil_tmp107 = (unsigned long )password_pair;
#line 296
            __cil_tmp108 = __cil_tmp107 + __cil_tmp106;
#line 296
            __cil_tmp109 = (uint8_t *)__cil_tmp108;
#line 296
            __cil_tmp110 = (char *)__cil_tmp109;
#line 296
            __cil_tmp111 = (char const   *)__cil_tmp110;
#line 296
            __cil_tmp112 = 0 * 1UL;
#line 296
            __cil_tmp113 = 56 + __cil_tmp112;
#line 296
            __cil_tmp114 = (unsigned long )auth_item;
#line 296
            __cil_tmp115 = __cil_tmp114 + __cil_tmp113;
#line 296
            __cil_tmp116 = (uint8_t *)__cil_tmp115;
#line 296
            __cil_tmp117 = (char *)__cil_tmp116;
#line 296
            __cil_tmp118 = (char const   *)__cil_tmp117;
#line 296
            tmp___3 = strcmp(__cil_tmp111, __cil_tmp118);
            }
#line 296
            if (tmp___3 != 0) {
#line 299
              result = -1;
            } else {

            }
          }
          }
          goto switch_2_break;
        } else {

        }
        }
        {
#line 308
        __cil_tmp119 = (void *)0;
#line 308
        __cil_tmp120 = (unsigned long )__cil_tmp119;
#line 308
        __cil_tmp121 = (unsigned long )password_pair;
#line 308
        if (__cil_tmp121 == __cil_tmp120) {
#line 309
          result = -1;
          goto switch_2_break;
        } else {

        }
        }
        {
#line 312
        __cil_tmp122 = (unsigned long )request;
#line 312
        __cil_tmp123 = __cil_tmp122 + 8;
#line 312
        mem_160 = (RADIUS_PACKET **)__cil_tmp123;
#line 312
        __cil_tmp124 = *mem_160;
#line 312
        __cil_tmp125 = 0 * 1UL;
#line 312
        __cil_tmp126 = (unsigned long )(string) + __cil_tmp125;
#line 312
        __cil_tmp127 = (char *)__cil_tmp126;
#line 312
        __cil_tmp128 = 0 * 1UL;
#line 312
        __cil_tmp129 = 56 + __cil_tmp128;
#line 312
        __cil_tmp130 = (unsigned long )auth_item;
#line 312
        __cil_tmp131 = __cil_tmp130 + __cil_tmp129;
#line 312
        mem_161 = (uint8_t *)__cil_tmp131;
#line 312
        __cil_tmp132 = *mem_161;
#line 312
        __cil_tmp133 = (int )__cil_tmp132;
#line 312
        rad_chap_encode(__cil_tmp124, __cil_tmp127, __cil_tmp133, password_pair);
#line 318
        __cil_tmp134 = 0 * 1UL;
#line 318
        __cil_tmp135 = (unsigned long )(string) + __cil_tmp134;
#line 318
        __cil_tmp136 = (char *)__cil_tmp135;
#line 318
        __cil_tmp137 = __cil_tmp136 + 1;
#line 318
        __cil_tmp138 = (void const   *)__cil_tmp137;
#line 318
        __cil_tmp139 = 0 * 1UL;
#line 318
        __cil_tmp140 = 56 + __cil_tmp139;
#line 318
        __cil_tmp141 = (unsigned long )auth_item;
#line 318
        __cil_tmp142 = __cil_tmp141 + __cil_tmp140;
#line 318
        __cil_tmp143 = (uint8_t *)__cil_tmp142;
#line 318
        __cil_tmp144 = __cil_tmp143 + 1;
#line 318
        __cil_tmp145 = (void const   *)__cil_tmp144;
#line 318
        tmp___4 = memcmp(__cil_tmp138, __cil_tmp145, 16UL);
        }
#line 318
        if (tmp___4 != 0) {
#line 320
          result = -1;
        } else {

        }
        goto switch_2_break;
        switch_2_default: /* CIL Label */ ;
#line 323
        if (debug_flag > 1) {
          {
#line 323
          tmp___5 = dict_valbyattr(1000, auth_type);
#line 323
          __cil_tmp146 = 0 * 1UL;
#line 323
          __cil_tmp147 = 0 + __cil_tmp146;
#line 323
          __cil_tmp148 = (unsigned long )tmp___5;
#line 323
          __cil_tmp149 = __cil_tmp148 + __cil_tmp147;
#line 323
          __cil_tmp150 = (char *)__cil_tmp149;
#line 323
          log_debug("  auth: %s", __cil_tmp150);
          }
        } else {

        }
        {
#line 331
        result = module_authenticate(auth_type, request);
        }
#line 339
        if (result == 1) {
          goto switch_3_1;
        } else {
#line 340
          if (result == 0) {
            goto switch_3_1;
          } else {
#line 341
            if (result == 5) {
              goto switch_3_1;
            } else {
#line 342
              if (result == 4) {
                goto switch_3_1;
              } else {
#line 343
                if (result == 6) {
                  goto switch_3_1;
                } else {
#line 344
                  if (result == 7) {
                    goto switch_3_1;
                  } else {
#line 345
                    if (result == 8) {
                      goto switch_3_1;
                    } else {
#line 348
                      if (result == 2) {
                        goto switch_3_2;
                      } else {
#line 351
                        if (result == 3) {
                          goto switch_3_3;
                        } else {
#line 332
                          if (0) {
                            switch_3_1: /* CIL Label */ 
                            switch_3_0: /* CIL Label */ 
                            switch_3_5: /* CIL Label */ 
                            switch_3_4: /* CIL Label */ 
                            switch_3_6: /* CIL Label */ 
                            switch_3_7: /* CIL Label */ 
                            switch_3_8: /* CIL Label */ 
#line 346
                            result = -1;
                            goto switch_3_break;
                            switch_3_2: /* CIL Label */ 
#line 349
                            result = 0;
                            goto switch_3_break;
                            switch_3_3: /* CIL Label */ 
#line 352
                            result = 1;
                            goto switch_3_break;
                          } else {
                            switch_3_break: /* CIL Label */ ;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        goto switch_2_break;
      } else {
        switch_2_break: /* CIL Label */ ;
      }
      }
    }
  }
#line 358
  return (result);
}
}
#line 367 "auth.c"
int rad_authenticate(REQUEST *request ) 
{ VALUE_PAIR *namepair ;
  VALUE_PAIR *check_item ;
  VALUE_PAIR *reply_item ;
  VALUE_PAIR *auth_item ;
  VALUE_PAIR *tmp ;
  int result ;
  int r ;
  char umsg[255] ;
  char const   *user_msg ;
  char const   *password ;
  char *exec_program ;
  int exec_wait ;
  int seen_callback_id ;
  int nas_port ;
  char buf[1024] ;
  char logstr[1024] ;
  VALUE_PAIR *tmp___0 ;
  u_char *p ;
  unsigned short const   **tmp___1 ;
  char const   *tmp___2 ;
  VALUE_PAIR *vpPortId ;
  VALUE_PAIR *vpAddPort ;
  uint32_t tmp___3 ;
  size_t tmp___4 ;
  int tmp___5 ;
  size_t tmp___6 ;
  char const   **__cil_tmp28 ;
  void *__cil_tmp29 ;
  unsigned long __cil_tmp30 ;
  unsigned long __cil_tmp31 ;
  unsigned long __cil_tmp32 ;
  unsigned long __cil_tmp33 ;
  unsigned long __cil_tmp34 ;
  unsigned long __cil_tmp35 ;
  VALUE_PAIR **__cil_tmp36 ;
  unsigned long __cil_tmp37 ;
  unsigned long __cil_tmp38 ;
  unsigned long __cil_tmp39 ;
  unsigned long __cil_tmp40 ;
  RADIUS_PACKET *__cil_tmp41 ;
  unsigned long __cil_tmp42 ;
  unsigned long __cil_tmp43 ;
  int __cil_tmp44 ;
  void *__cil_tmp45 ;
  unsigned long __cil_tmp46 ;
  unsigned long __cil_tmp47 ;
  unsigned long __cil_tmp48 ;
  unsigned long __cil_tmp49 ;
  RADIUS_PACKET *__cil_tmp50 ;
  unsigned long __cil_tmp51 ;
  unsigned long __cil_tmp52 ;
  int __cil_tmp53 ;
  unsigned long __cil_tmp54 ;
  unsigned long __cil_tmp55 ;
  unsigned long __cil_tmp56 ;
  unsigned long __cil_tmp57 ;
  unsigned long __cil_tmp58 ;
  unsigned long __cil_tmp59 ;
  VALUE_PAIR **__cil_tmp60 ;
  unsigned long __cil_tmp61 ;
  unsigned long __cil_tmp62 ;
  RADIUS_PACKET *__cil_tmp63 ;
  unsigned long __cil_tmp64 ;
  unsigned long __cil_tmp65 ;
  unsigned long __cil_tmp66 ;
  unsigned long __cil_tmp67 ;
  RADIUS_PACKET *__cil_tmp68 ;
  unsigned long __cil_tmp69 ;
  unsigned long __cil_tmp70 ;
  unsigned long __cil_tmp71 ;
  unsigned long __cil_tmp72 ;
  RADIUS_PACKET *__cil_tmp73 ;
  unsigned long __cil_tmp74 ;
  unsigned long __cil_tmp75 ;
  unsigned long __cil_tmp76 ;
  unsigned long __cil_tmp77 ;
  RADIUS_PACKET *__cil_tmp78 ;
  unsigned long __cil_tmp79 ;
  unsigned long __cil_tmp80 ;
  void *__cil_tmp81 ;
  unsigned long __cil_tmp82 ;
  unsigned long __cil_tmp83 ;
  RADIUS_PACKET *__cil_tmp84 ;
  unsigned long __cil_tmp85 ;
  unsigned long __cil_tmp86 ;
  int __cil_tmp87 ;
  unsigned long __cil_tmp88 ;
  unsigned long __cil_tmp89 ;
  RADIUS_PACKET *__cil_tmp90 ;
  unsigned long __cil_tmp91 ;
  unsigned long __cil_tmp92 ;
  unsigned long __cil_tmp93 ;
  unsigned long __cil_tmp94 ;
  void *__cil_tmp95 ;
  unsigned long __cil_tmp96 ;
  unsigned long __cil_tmp97 ;
  unsigned long __cil_tmp98 ;
  unsigned long __cil_tmp99 ;
  unsigned long __cil_tmp100 ;
  unsigned long __cil_tmp101 ;
  uint8_t *__cil_tmp102 ;
  void *__cil_tmp103 ;
  unsigned long __cil_tmp104 ;
  unsigned long __cil_tmp105 ;
  unsigned long __cil_tmp106 ;
  unsigned long __cil_tmp107 ;
  RADIUS_PACKET *__cil_tmp108 ;
  unsigned long __cil_tmp109 ;
  unsigned long __cil_tmp110 ;
  VALUE_PAIR *__cil_tmp111 ;
  void *__cil_tmp112 ;
  unsigned long __cil_tmp113 ;
  unsigned long __cil_tmp114 ;
  unsigned long __cil_tmp115 ;
  unsigned long __cil_tmp116 ;
  unsigned long __cil_tmp117 ;
  unsigned long __cil_tmp118 ;
  RADIUS_PACKET *__cil_tmp119 ;
  unsigned long __cil_tmp120 ;
  unsigned long __cil_tmp121 ;
  void *__cil_tmp122 ;
  unsigned long __cil_tmp123 ;
  unsigned long __cil_tmp124 ;
  unsigned long __cil_tmp125 ;
  RADIUS_PACKET *__cil_tmp126 ;
  unsigned long __cil_tmp127 ;
  unsigned long __cil_tmp128 ;
  unsigned long __cil_tmp129 ;
  VALUE_PAIR *__cil_tmp130 ;
  void *__cil_tmp131 ;
  unsigned long __cil_tmp132 ;
  unsigned long __cil_tmp133 ;
  unsigned long __cil_tmp134 ;
  unsigned long __cil_tmp135 ;
  unsigned long __cil_tmp136 ;
  unsigned long __cil_tmp137 ;
  RADIUS_PACKET *__cil_tmp138 ;
  unsigned long __cil_tmp139 ;
  unsigned long __cil_tmp140 ;
  unsigned long __cil_tmp141 ;
  unsigned long __cil_tmp142 ;
  int __cil_tmp143 ;
  unsigned long __cil_tmp144 ;
  unsigned long __cil_tmp145 ;
  unsigned long __cil_tmp146 ;
  unsigned long __cil_tmp147 ;
  u_char __cil_tmp148 ;
  int __cil_tmp149 ;
  u_char __cil_tmp150 ;
  int __cil_tmp151 ;
  unsigned short const   *__cil_tmp152 ;
  unsigned short const   *__cil_tmp153 ;
  unsigned short __cil_tmp154 ;
  int __cil_tmp155 ;
  unsigned long __cil_tmp156 ;
  unsigned long __cil_tmp157 ;
  VALUE_PAIR *__cil_tmp158 ;
  void *__cil_tmp159 ;
  unsigned long __cil_tmp160 ;
  unsigned long __cil_tmp161 ;
  unsigned long __cil_tmp162 ;
  unsigned long __cil_tmp163 ;
  uint32_t __cil_tmp164 ;
  int __cil_tmp165 ;
  unsigned long __cil_tmp166 ;
  unsigned long __cil_tmp167 ;
  uint32_t __cil_tmp168 ;
  unsigned long __cil_tmp169 ;
  unsigned long __cil_tmp170 ;
  char *__cil_tmp171 ;
  char * __restrict  __cil_tmp172 ;
  char const   * __restrict  __cil_tmp173 ;
  unsigned long __cil_tmp174 ;
  unsigned long __cil_tmp175 ;
  uint32_t __cil_tmp176 ;
  int __cil_tmp177 ;
  char const   **__cil_tmp178 ;
  unsigned long __cil_tmp179 ;
  unsigned long __cil_tmp180 ;
  char *__cil_tmp181 ;
  char const   **__cil_tmp182 ;
  unsigned long __cil_tmp183 ;
  unsigned long __cil_tmp184 ;
  RADIUS_PACKET *__cil_tmp185 ;
  unsigned long __cil_tmp186 ;
  unsigned long __cil_tmp187 ;
  unsigned long __cil_tmp188 ;
  unsigned long __cil_tmp189 ;
  RADIUS_PACKET *__cil_tmp190 ;
  unsigned long __cil_tmp191 ;
  unsigned long __cil_tmp192 ;
  VALUE_PAIR **__cil_tmp193 ;
  char const   **__cil_tmp194 ;
  char const   *__cil_tmp195 ;
  unsigned long __cil_tmp196 ;
  unsigned long __cil_tmp197 ;
  RADIUS_PACKET *__cil_tmp198 ;
  unsigned long __cil_tmp199 ;
  unsigned long __cil_tmp200 ;
  unsigned long __cil_tmp201 ;
  unsigned long __cil_tmp202 ;
  char *__cil_tmp203 ;
  char * __restrict  __cil_tmp204 ;
  char const   * __restrict  __cil_tmp205 ;
  unsigned long __cil_tmp206 ;
  unsigned long __cil_tmp207 ;
  uint32_t __cil_tmp208 ;
  unsigned long __cil_tmp209 ;
  unsigned long __cil_tmp210 ;
  char *__cil_tmp211 ;
  char const   *__cil_tmp212 ;
  unsigned long __cil_tmp213 ;
  unsigned long __cil_tmp214 ;
  VALUE_PAIR *__cil_tmp215 ;
  void *__cil_tmp216 ;
  unsigned long __cil_tmp217 ;
  unsigned long __cil_tmp218 ;
  unsigned long __cil_tmp219 ;
  unsigned long __cil_tmp220 ;
  unsigned long __cil_tmp221 ;
  unsigned long __cil_tmp222 ;
  uint8_t *__cil_tmp223 ;
  char *__cil_tmp224 ;
  unsigned long __cil_tmp225 ;
  unsigned long __cil_tmp226 ;
  time_t __cil_tmp227 ;
  char const   **__cil_tmp228 ;
  unsigned long __cil_tmp229 ;
  unsigned long __cil_tmp230 ;
  RADIUS_PACKET *__cil_tmp231 ;
  unsigned long __cil_tmp232 ;
  unsigned long __cil_tmp233 ;
  unsigned long __cil_tmp234 ;
  unsigned long __cil_tmp235 ;
  RADIUS_PACKET *__cil_tmp236 ;
  unsigned long __cil_tmp237 ;
  unsigned long __cil_tmp238 ;
  VALUE_PAIR **__cil_tmp239 ;
  char const   **__cil_tmp240 ;
  char const   *__cil_tmp241 ;
  unsigned long __cil_tmp242 ;
  unsigned long __cil_tmp243 ;
  RADIUS_PACKET *__cil_tmp244 ;
  unsigned long __cil_tmp245 ;
  unsigned long __cil_tmp246 ;
  unsigned long __cil_tmp247 ;
  unsigned long __cil_tmp248 ;
  char *__cil_tmp249 ;
  char * __restrict  __cil_tmp250 ;
  char const   * __restrict  __cil_tmp251 ;
  unsigned long __cil_tmp252 ;
  unsigned long __cil_tmp253 ;
  unsigned long __cil_tmp254 ;
  unsigned long __cil_tmp255 ;
  uint8_t *__cil_tmp256 ;
  unsigned long __cil_tmp257 ;
  unsigned long __cil_tmp258 ;
  char *__cil_tmp259 ;
  char const   *__cil_tmp260 ;
  unsigned long __cil_tmp261 ;
  unsigned long __cil_tmp262 ;
  RADIUS_PACKET *__cil_tmp263 ;
  unsigned long __cil_tmp264 ;
  unsigned long __cil_tmp265 ;
  VALUE_PAIR *__cil_tmp266 ;
  void *__cil_tmp267 ;
  unsigned long __cil_tmp268 ;
  unsigned long __cil_tmp269 ;
  unsigned int __cil_tmp270 ;
  unsigned long __cil_tmp271 ;
  unsigned long __cil_tmp272 ;
  uint32_t __cil_tmp273 ;
  unsigned long __cil_tmp274 ;
  unsigned long __cil_tmp275 ;
  void *__cil_tmp276 ;
  unsigned long __cil_tmp277 ;
  unsigned long __cil_tmp278 ;
  unsigned long __cil_tmp279 ;
  unsigned long __cil_tmp280 ;
  unsigned long __cil_tmp281 ;
  unsigned long __cil_tmp282 ;
  RADIUS_PACKET *__cil_tmp283 ;
  unsigned long __cil_tmp284 ;
  unsigned long __cil_tmp285 ;
  VALUE_PAIR **__cil_tmp286 ;
  unsigned long __cil_tmp287 ;
  unsigned long __cil_tmp288 ;
  int __cil_tmp289 ;
  unsigned long __cil_tmp290 ;
  unsigned long __cil_tmp291 ;
  RADIUS_PACKET *__cil_tmp292 ;
  unsigned long __cil_tmp293 ;
  unsigned long __cil_tmp294 ;
  VALUE_PAIR *__cil_tmp295 ;
  void *__cil_tmp296 ;
  unsigned long __cil_tmp297 ;
  unsigned long __cil_tmp298 ;
  unsigned long __cil_tmp299 ;
  unsigned long __cil_tmp300 ;
  RADIUS_PACKET *__cil_tmp301 ;
  unsigned long __cil_tmp302 ;
  unsigned long __cil_tmp303 ;
  VALUE_PAIR *__cil_tmp304 ;
  void *__cil_tmp305 ;
  unsigned long __cil_tmp306 ;
  unsigned long __cil_tmp307 ;
  unsigned long __cil_tmp308 ;
  unsigned long __cil_tmp309 ;
  uint32_t __cil_tmp310 ;
  unsigned long __cil_tmp311 ;
  unsigned long __cil_tmp312 ;
  RADIUS_PACKET *__cil_tmp313 ;
  unsigned long __cil_tmp314 ;
  unsigned long __cil_tmp315 ;
  VALUE_PAIR *__cil_tmp316 ;
  void *__cil_tmp317 ;
  unsigned long __cil_tmp318 ;
  unsigned long __cil_tmp319 ;
  unsigned long __cil_tmp320 ;
  unsigned long __cil_tmp321 ;
  unsigned long __cil_tmp322 ;
  unsigned long __cil_tmp323 ;
  uint32_t __cil_tmp324 ;
  unsigned long __cil_tmp325 ;
  unsigned long __cil_tmp326 ;
  uint32_t __cil_tmp327 ;
  uint32_t __cil_tmp328 ;
  unsigned long __cil_tmp329 ;
  unsigned long __cil_tmp330 ;
  unsigned long __cil_tmp331 ;
  unsigned long __cil_tmp332 ;
  unsigned long __cil_tmp333 ;
  unsigned long __cil_tmp334 ;
  uint32_t __cil_tmp335 ;
  unsigned long __cil_tmp336 ;
  unsigned long __cil_tmp337 ;
  uint32_t __cil_tmp338 ;
  uint32_t __cil_tmp339 ;
  unsigned long __cil_tmp340 ;
  unsigned long __cil_tmp341 ;
  unsigned long __cil_tmp342 ;
  unsigned long __cil_tmp343 ;
  RADIUS_PACKET *__cil_tmp344 ;
  unsigned long __cil_tmp345 ;
  unsigned long __cil_tmp346 ;
  VALUE_PAIR **__cil_tmp347 ;
  void *__cil_tmp348 ;
  unsigned long __cil_tmp349 ;
  unsigned long __cil_tmp350 ;
  RADIUS_PACKET *__cil_tmp351 ;
  unsigned long __cil_tmp352 ;
  unsigned long __cil_tmp353 ;
  VALUE_PAIR *__cil_tmp354 ;
  void *__cil_tmp355 ;
  unsigned long __cil_tmp356 ;
  unsigned long __cil_tmp357 ;
  unsigned long __cil_tmp358 ;
  unsigned long __cil_tmp359 ;
  unsigned long __cil_tmp360 ;
  unsigned long __cil_tmp361 ;
  uint8_t *__cil_tmp362 ;
  char *__cil_tmp363 ;
  char const   *__cil_tmp364 ;
  unsigned long __cil_tmp365 ;
  unsigned long __cil_tmp366 ;
  RADIUS_PACKET *__cil_tmp367 ;
  unsigned long __cil_tmp368 ;
  unsigned long __cil_tmp369 ;
  VALUE_PAIR **__cil_tmp370 ;
  unsigned long __cil_tmp371 ;
  unsigned long __cil_tmp372 ;
  RADIUS_PACKET *__cil_tmp373 ;
  unsigned long __cil_tmp374 ;
  unsigned long __cil_tmp375 ;
  VALUE_PAIR *__cil_tmp376 ;
  void *__cil_tmp377 ;
  unsigned long __cil_tmp378 ;
  unsigned long __cil_tmp379 ;
  unsigned long __cil_tmp380 ;
  unsigned long __cil_tmp381 ;
  unsigned long __cil_tmp382 ;
  unsigned long __cil_tmp383 ;
  uint8_t *__cil_tmp384 ;
  char *__cil_tmp385 ;
  char const   *__cil_tmp386 ;
  unsigned long __cil_tmp387 ;
  unsigned long __cil_tmp388 ;
  RADIUS_PACKET *__cil_tmp389 ;
  unsigned long __cil_tmp390 ;
  unsigned long __cil_tmp391 ;
  VALUE_PAIR **__cil_tmp392 ;
  unsigned long __cil_tmp393 ;
  unsigned long __cil_tmp394 ;
  RADIUS_PACKET *__cil_tmp395 ;
  unsigned long __cil_tmp396 ;
  unsigned long __cil_tmp397 ;
  VALUE_PAIR *__cil_tmp398 ;
  void *__cil_tmp399 ;
  unsigned long __cil_tmp400 ;
  unsigned long __cil_tmp401 ;
  unsigned long __cil_tmp402 ;
  unsigned long __cil_tmp403 ;
  char *__cil_tmp404 ;
  int __cil_tmp405 ;
  unsigned long __cil_tmp406 ;
  unsigned long __cil_tmp407 ;
  unsigned long __cil_tmp408 ;
  unsigned long __cil_tmp409 ;
  uint8_t *__cil_tmp410 ;
  char *__cil_tmp411 ;
  char const   *__cil_tmp412 ;
  void *__cil_tmp413 ;
  int (*__cil_tmp414)(char *out , int outlen , char const   *in ) ;
  unsigned long __cil_tmp415 ;
  unsigned long __cil_tmp416 ;
  unsigned long __cil_tmp417 ;
  unsigned long __cil_tmp418 ;
  uint8_t *__cil_tmp419 ;
  char *__cil_tmp420 ;
  unsigned long __cil_tmp421 ;
  unsigned long __cil_tmp422 ;
  char *__cil_tmp423 ;
  char const   *__cil_tmp424 ;
  int __cil_tmp425 ;
  unsigned long __cil_tmp426 ;
  unsigned long __cil_tmp427 ;
  unsigned long __cil_tmp428 ;
  unsigned long __cil_tmp429 ;
  uint8_t *__cil_tmp430 ;
  char *__cil_tmp431 ;
  char const   *__cil_tmp432 ;
  unsigned long __cil_tmp433 ;
  unsigned long __cil_tmp434 ;
  char const   *__cil_tmp435 ;
  void *__cil_tmp436 ;
  unsigned long __cil_tmp437 ;
  char const   **__cil_tmp438 ;
  char const   *__cil_tmp439 ;
  unsigned long __cil_tmp440 ;
  char const   **__cil_tmp441 ;
  unsigned long __cil_tmp442 ;
  unsigned long __cil_tmp443 ;
  RADIUS_PACKET *__cil_tmp444 ;
  unsigned long __cil_tmp445 ;
  unsigned long __cil_tmp446 ;
  unsigned long __cil_tmp447 ;
  unsigned long __cil_tmp448 ;
  RADIUS_PACKET *__cil_tmp449 ;
  unsigned long __cil_tmp450 ;
  unsigned long __cil_tmp451 ;
  VALUE_PAIR **__cil_tmp452 ;
  char const   **__cil_tmp453 ;
  char const   *__cil_tmp454 ;
  unsigned long __cil_tmp455 ;
  unsigned long __cil_tmp456 ;
  RADIUS_PACKET *__cil_tmp457 ;
  unsigned long __cil_tmp458 ;
  unsigned long __cil_tmp459 ;
  unsigned long __cil_tmp460 ;
  unsigned long __cil_tmp461 ;
  RADIUS_PACKET *__cil_tmp462 ;
  unsigned long __cil_tmp463 ;
  unsigned long __cil_tmp464 ;
  VALUE_PAIR **__cil_tmp465 ;
  unsigned long __cil_tmp466 ;
  unsigned long __cil_tmp467 ;
  RADIUS_PACKET *__cil_tmp468 ;
  unsigned long __cil_tmp469 ;
  unsigned long __cil_tmp470 ;
  VALUE_PAIR **__cil_tmp471 ;
  unsigned long __cil_tmp472 ;
  unsigned long __cil_tmp473 ;
  RADIUS_PACKET *__cil_tmp474 ;
  unsigned long __cil_tmp475 ;
  unsigned long __cil_tmp476 ;
  VALUE_PAIR **__cil_tmp477 ;
  unsigned long __cil_tmp478 ;
  unsigned long __cil_tmp479 ;
  RADIUS_PACKET *__cil_tmp480 ;
  unsigned long __cil_tmp481 ;
  unsigned long __cil_tmp482 ;
  VALUE_PAIR **__cil_tmp483 ;
  unsigned long __cil_tmp484 ;
  unsigned long __cil_tmp485 ;
  RADIUS_PACKET *__cil_tmp486 ;
  unsigned long __cil_tmp487 ;
  unsigned long __cil_tmp488 ;
  VALUE_PAIR **__cil_tmp489 ;
  unsigned long __cil_tmp490 ;
  unsigned long __cil_tmp491 ;
  RADIUS_PACKET *__cil_tmp492 ;
  unsigned long __cil_tmp493 ;
  unsigned long __cil_tmp494 ;
  VALUE_PAIR **__cil_tmp495 ;
  unsigned long __cil_tmp496 ;
  unsigned long __cil_tmp497 ;
  RADIUS_PACKET *__cil_tmp498 ;
  unsigned long __cil_tmp499 ;
  unsigned long __cil_tmp500 ;
  VALUE_PAIR **__cil_tmp501 ;
  unsigned long __cil_tmp502 ;
  unsigned long __cil_tmp503 ;
  RADIUS_PACKET *__cil_tmp504 ;
  unsigned long __cil_tmp505 ;
  unsigned long __cil_tmp506 ;
  VALUE_PAIR **__cil_tmp507 ;
  unsigned long __cil_tmp508 ;
  unsigned long __cil_tmp509 ;
  RADIUS_PACKET *__cil_tmp510 ;
  unsigned long __cil_tmp511 ;
  unsigned long __cil_tmp512 ;
  VALUE_PAIR **__cil_tmp513 ;
  void *__cil_tmp514 ;
  unsigned long __cil_tmp515 ;
  char const   **__cil_tmp516 ;
  char const   *__cil_tmp517 ;
  unsigned long __cil_tmp518 ;
  unsigned long __cil_tmp519 ;
  unsigned long __cil_tmp520 ;
  RADIUS_PACKET *__cil_tmp521 ;
  unsigned long __cil_tmp522 ;
  unsigned long __cil_tmp523 ;
  VALUE_PAIR *__cil_tmp524 ;
  unsigned long __cil_tmp525 ;
  unsigned long __cil_tmp526 ;
  char *__cil_tmp527 ;
  int __cil_tmp528 ;
  unsigned long __cil_tmp529 ;
  unsigned long __cil_tmp530 ;
  unsigned long __cil_tmp531 ;
  unsigned long __cil_tmp532 ;
  uint8_t *__cil_tmp533 ;
  char *__cil_tmp534 ;
  char const   *__cil_tmp535 ;
  void *__cil_tmp536 ;
  int (*__cil_tmp537)(char *out , int outlen , char const   *in ) ;
  unsigned long __cil_tmp538 ;
  unsigned long __cil_tmp539 ;
  unsigned long __cil_tmp540 ;
  unsigned long __cil_tmp541 ;
  uint8_t *__cil_tmp542 ;
  char *__cil_tmp543 ;
  unsigned long __cil_tmp544 ;
  unsigned long __cil_tmp545 ;
  char *__cil_tmp546 ;
  char const   *__cil_tmp547 ;
  int __cil_tmp548 ;
  unsigned long __cil_tmp549 ;
  unsigned long __cil_tmp550 ;
  unsigned long __cil_tmp551 ;
  unsigned long __cil_tmp552 ;
  uint8_t *__cil_tmp553 ;
  char *__cil_tmp554 ;
  char const   *__cil_tmp555 ;
  unsigned long __cil_tmp556 ;
  unsigned long __cil_tmp557 ;
  char const   **__cil_tmp558 ;
  void *__cil_tmp559 ;
  unsigned long __cil_tmp560 ;
  unsigned long __cil_tmp561 ;
  struct value_pair *__cil_tmp562 ;
  unsigned long __cil_tmp563 ;
  unsigned long __cil_tmp564 ;
  RADIUS_PACKET *__cil_tmp565 ;
  unsigned long __cil_tmp566 ;
  unsigned long __cil_tmp567 ;
  char const   *__cil_tmp568 ;
  void *__cil_tmp569 ;
  char const   **__cil_tmp570 ;
  void *__cil_tmp571 ;
  RADIUS_PACKET **mem_572 ;
  VALUE_PAIR **mem_573 ;
  RADIUS_PACKET **mem_574 ;
  RADIUS_PACKET **mem_575 ;
  int *mem_576 ;
  RADIUS_PACKET **mem_577 ;
  int *mem_578 ;
  uint32_t *mem_579 ;
  uint32_t *mem_580 ;
  RADIUS_PACKET **mem_581 ;
  VALUE_PAIR **mem_582 ;
  RADIUS_PACKET **mem_583 ;
  RADIUS_PACKET **mem_584 ;
  VALUE_PAIR **mem_585 ;
  VALUE_PAIR **mem_586 ;
  RADIUS_PACKET **mem_587 ;
  VALUE_PAIR **mem_588 ;
  RADIUS_PACKET **mem_589 ;
  int *mem_590 ;
  RADIUS_PACKET **mem_591 ;
  int *mem_592 ;
  VALUE_PAIR **mem_593 ;
  RADIUS_PACKET **mem_594 ;
  VALUE_PAIR **mem_595 ;
  VALUE_PAIR **mem_596 ;
  RADIUS_PACKET **mem_597 ;
  int *mem_598 ;
  RADIUS_PACKET **mem_599 ;
  VALUE_PAIR **mem_600 ;
  VALUE_PAIR **mem_601 ;
  RADIUS_PACKET **mem_602 ;
  int *mem_603 ;
  int *mem_604 ;
  VALUE_PAIR **mem_605 ;
  uint32_t *mem_606 ;
  uint32_t *mem_607 ;
  uint32_t *mem_608 ;
  RADIUS_PACKET **mem_609 ;
  int *mem_610 ;
  RADIUS_PACKET **mem_611 ;
  RADIUS_PACKET **mem_612 ;
  VALUE_PAIR **mem_613 ;
  uint32_t *mem_614 ;
  VALUE_PAIR **mem_615 ;
  time_t *mem_616 ;
  RADIUS_PACKET **mem_617 ;
  int *mem_618 ;
  RADIUS_PACKET **mem_619 ;
  RADIUS_PACKET **mem_620 ;
  VALUE_PAIR **mem_621 ;
  RADIUS_PACKET **mem_622 ;
  VALUE_PAIR **mem_623 ;
  uint32_t *mem_624 ;
  uint32_t *mem_625 ;
  uint32_t *mem_626 ;
  RADIUS_PACKET **mem_627 ;
  int *mem_628 ;
  RADIUS_PACKET **mem_629 ;
  VALUE_PAIR **mem_630 ;
  RADIUS_PACKET **mem_631 ;
  VALUE_PAIR **mem_632 ;
  uint32_t *mem_633 ;
  RADIUS_PACKET **mem_634 ;
  VALUE_PAIR **mem_635 ;
  int *mem_636 ;
  uint32_t *mem_637 ;
  uint32_t *mem_638 ;
  int *mem_639 ;
  uint32_t *mem_640 ;
  uint32_t *mem_641 ;
  uint32_t *mem_642 ;
  int *mem_643 ;
  RADIUS_PACKET **mem_644 ;
  RADIUS_PACKET **mem_645 ;
  VALUE_PAIR **mem_646 ;
  RADIUS_PACKET **mem_647 ;
  RADIUS_PACKET **mem_648 ;
  VALUE_PAIR **mem_649 ;
  RADIUS_PACKET **mem_650 ;
  RADIUS_PACKET **mem_651 ;
  VALUE_PAIR **mem_652 ;
  int *mem_653 ;
  RADIUS_PACKET **mem_654 ;
  int *mem_655 ;
  RADIUS_PACKET **mem_656 ;
  RADIUS_PACKET **mem_657 ;
  VALUE_PAIR **mem_658 ;
  RADIUS_PACKET **mem_659 ;
  RADIUS_PACKET **mem_660 ;
  RADIUS_PACKET **mem_661 ;
  RADIUS_PACKET **mem_662 ;
  RADIUS_PACKET **mem_663 ;
  RADIUS_PACKET **mem_664 ;
  RADIUS_PACKET **mem_665 ;
  RADIUS_PACKET **mem_666 ;
  RADIUS_PACKET **mem_667 ;
  RADIUS_PACKET **mem_668 ;
  VALUE_PAIR **mem_669 ;
  int *mem_670 ;
  struct value_pair **mem_671 ;
  RADIUS_PACKET **mem_672 ;
  int *mem_673 ;

  {
#line 376
  __cil_tmp28 = & user_msg;
#line 376
  __cil_tmp29 = (void *)0;
#line 376
  *__cil_tmp28 = (char const   *)__cil_tmp29;
#line 381
  nas_port = 0;
#line 384
  password = "";
  {
#line 391
  __cil_tmp30 = (unsigned long )request;
#line 391
  __cil_tmp31 = __cil_tmp30 + 32;
  {
#line 391
  mem_572 = (RADIUS_PACKET **)__cil_tmp31;
#line 391
  if (*mem_572) {
    {
#line 391
    __cil_tmp32 = (unsigned long )request;
#line 391
    __cil_tmp33 = __cil_tmp32 + 40;
    {
#line 391
    mem_573 = (VALUE_PAIR **)__cil_tmp33;
#line 391
    if (*mem_573) {
      {
#line 392
      __cil_tmp34 = (unsigned long )request;
#line 392
      __cil_tmp35 = __cil_tmp34 + 40;
#line 392
      __cil_tmp36 = (VALUE_PAIR **)__cil_tmp35;
#line 392
      pairfree(__cil_tmp36);
      }
    } else {

    }
    }
    }
  } else {

  }
  }
  }
  {
#line 402
  __cil_tmp37 = (unsigned long )request;
#line 402
  __cil_tmp38 = __cil_tmp37 + 32;
  {
#line 402
  mem_574 = (RADIUS_PACKET **)__cil_tmp38;
#line 402
  if (*mem_574) {
    {
#line 402
    __cil_tmp39 = (unsigned long )request;
#line 402
    __cil_tmp40 = __cil_tmp39 + 8;
#line 402
    mem_575 = (RADIUS_PACKET **)__cil_tmp40;
#line 402
    __cil_tmp41 = *mem_575;
#line 402
    __cil_tmp42 = (unsigned long )__cil_tmp41;
#line 402
    __cil_tmp43 = __cil_tmp42 + 20;
#line 402
    mem_576 = (int *)__cil_tmp43;
#line 402
    __cil_tmp44 = *mem_576;
#line 402
    if (__cil_tmp44 == 1) {
      {
#line 404
      tmp = paircreate(1000, 1);
      }
      {
#line 405
      __cil_tmp45 = (void *)0;
#line 405
      __cil_tmp46 = (unsigned long )__cil_tmp45;
#line 405
      __cil_tmp47 = (unsigned long )tmp;
#line 405
      if (__cil_tmp47 == __cil_tmp46) {
        {
#line 406
        radlog(132, "no memory");
#line 407
        exit(1);
        }
      } else {

      }
      }
      {
#line 414
      __cil_tmp48 = (unsigned long )request;
#line 414
      __cil_tmp49 = __cil_tmp48 + 32;
#line 414
      mem_577 = (RADIUS_PACKET **)__cil_tmp49;
#line 414
      __cil_tmp50 = *mem_577;
#line 414
      __cil_tmp51 = (unsigned long )__cil_tmp50;
#line 414
      __cil_tmp52 = __cil_tmp51 + 20;
#line 414
      mem_578 = (int *)__cil_tmp52;
#line 414
      __cil_tmp53 = *mem_578;
#line 414
      if (__cil_tmp53 == 2) {
#line 415
        __cil_tmp54 = (unsigned long )tmp;
#line 415
        __cil_tmp55 = __cil_tmp54 + 44;
#line 415
        mem_579 = (uint32_t *)__cil_tmp55;
#line 415
        *mem_579 = 254U;
      } else {
#line 417
        __cil_tmp56 = (unsigned long )tmp;
#line 417
        __cil_tmp57 = __cil_tmp56 + 44;
#line 417
        mem_580 = (uint32_t *)__cil_tmp57;
#line 417
        *mem_580 = 4U;
      }
      }
      {
#line 418
      __cil_tmp58 = (unsigned long )request;
#line 418
      __cil_tmp59 = __cil_tmp58 + 40;
#line 418
      __cil_tmp60 = (VALUE_PAIR **)__cil_tmp59;
#line 418
      pairadd(__cil_tmp60, tmp);
      }
      {
#line 424
      __cil_tmp61 = (unsigned long )request;
#line 424
      __cil_tmp62 = __cil_tmp61 + 32;
#line 424
      mem_581 = (RADIUS_PACKET **)__cil_tmp62;
#line 424
      __cil_tmp63 = *mem_581;
#line 424
      __cil_tmp64 = (unsigned long )__cil_tmp63;
#line 424
      __cil_tmp65 = __cil_tmp64 + 72;
      {
#line 424
      mem_582 = (VALUE_PAIR **)__cil_tmp65;
#line 424
      if (*mem_582) {
#line 425
        __cil_tmp66 = (unsigned long )request;
#line 425
        __cil_tmp67 = __cil_tmp66 + 24;
#line 425
        mem_583 = (RADIUS_PACKET **)__cil_tmp67;
#line 425
        __cil_tmp68 = *mem_583;
#line 425
        __cil_tmp69 = (unsigned long )__cil_tmp68;
#line 425
        __cil_tmp70 = __cil_tmp69 + 72;
#line 425
        __cil_tmp71 = (unsigned long )request;
#line 425
        __cil_tmp72 = __cil_tmp71 + 32;
#line 425
        mem_584 = (RADIUS_PACKET **)__cil_tmp72;
#line 425
        __cil_tmp73 = *mem_584;
#line 425
        __cil_tmp74 = (unsigned long )__cil_tmp73;
#line 425
        __cil_tmp75 = __cil_tmp74 + 72;
#line 425
        mem_585 = (VALUE_PAIR **)__cil_tmp70;
#line 425
        mem_586 = (VALUE_PAIR **)__cil_tmp75;
#line 425
        *mem_585 = *mem_586;
#line 426
        __cil_tmp76 = (unsigned long )request;
#line 426
        __cil_tmp77 = __cil_tmp76 + 32;
#line 426
        mem_587 = (RADIUS_PACKET **)__cil_tmp77;
#line 426
        __cil_tmp78 = *mem_587;
#line 426
        __cil_tmp79 = (unsigned long )__cil_tmp78;
#line 426
        __cil_tmp80 = __cil_tmp79 + 72;
#line 426
        __cil_tmp81 = (void *)0;
#line 426
        mem_588 = (VALUE_PAIR **)__cil_tmp80;
#line 426
        *mem_588 = (VALUE_PAIR *)__cil_tmp81;
      } else {

      }
      }
      }
      {
#line 435
      __cil_tmp82 = (unsigned long )request;
#line 435
      __cil_tmp83 = __cil_tmp82 + 32;
#line 435
      mem_589 = (RADIUS_PACKET **)__cil_tmp83;
#line 435
      __cil_tmp84 = *mem_589;
#line 435
      __cil_tmp85 = (unsigned long )__cil_tmp84;
#line 435
      __cil_tmp86 = __cil_tmp85 + 20;
#line 435
      mem_590 = (int *)__cil_tmp86;
#line 435
      __cil_tmp87 = *mem_590;
#line 435
      if (__cil_tmp87 != 2) {
#line 436
        __cil_tmp88 = (unsigned long )request;
#line 436
        __cil_tmp89 = __cil_tmp88 + 24;
#line 436
        mem_591 = (RADIUS_PACKET **)__cil_tmp89;
#line 436
        __cil_tmp90 = *mem_591;
#line 436
        __cil_tmp91 = (unsigned long )__cil_tmp90;
#line 436
        __cil_tmp92 = __cil_tmp91 + 20;
#line 436
        mem_592 = (int *)__cil_tmp92;
#line 436
        *mem_592 = 3;
#line 437
        return (0);
      } else {

      }
      }
    } else {

    }
    }
  } else {

  }
  }
  }
  {
#line 447
  __cil_tmp93 = (unsigned long )request;
#line 447
  __cil_tmp94 = __cil_tmp93 + 48;
#line 447
  mem_593 = (VALUE_PAIR **)__cil_tmp94;
#line 447
  namepair = *mem_593;
#line 452
  auth_item = rad_getpass(request);
  }
  {
#line 452
  __cil_tmp95 = (void *)0;
#line 452
  __cil_tmp96 = (unsigned long )__cil_tmp95;
#line 452
  __cil_tmp97 = (unsigned long )auth_item;
#line 452
  if (__cil_tmp97 != __cil_tmp96) {
#line 453
    __cil_tmp98 = 0 * 1UL;
#line 453
    __cil_tmp99 = 56 + __cil_tmp98;
#line 453
    __cil_tmp100 = (unsigned long )auth_item;
#line 453
    __cil_tmp101 = __cil_tmp100 + __cil_tmp99;
#line 453
    __cil_tmp102 = (uint8_t *)__cil_tmp101;
#line 453
    password = (char const   *)__cil_tmp102;
  } else {

  }
  }
  {
#line 459
  __cil_tmp103 = (void *)0;
#line 459
  __cil_tmp104 = (unsigned long )__cil_tmp103;
#line 459
  __cil_tmp105 = (unsigned long )auth_item;
#line 459
  if (__cil_tmp105 == __cil_tmp104) {
    {
#line 460
    __cil_tmp106 = (unsigned long )request;
#line 460
    __cil_tmp107 = __cil_tmp106 + 8;
#line 460
    mem_594 = (RADIUS_PACKET **)__cil_tmp107;
#line 460
    __cil_tmp108 = *mem_594;
#line 460
    __cil_tmp109 = (unsigned long )__cil_tmp108;
#line 460
    __cil_tmp110 = __cil_tmp109 + 72;
#line 460
    mem_595 = (VALUE_PAIR **)__cil_tmp110;
#line 460
    __cil_tmp111 = *mem_595;
#line 460
    auth_item = pairfind(__cil_tmp111, 3);
    }
    {
#line 460
    __cil_tmp112 = (void *)0;
#line 460
    __cil_tmp113 = (unsigned long )__cil_tmp112;
#line 460
    __cil_tmp114 = (unsigned long )auth_item;
#line 460
    if (__cil_tmp114 != __cil_tmp113) {
#line 462
      password = "<CHAP-PASSWORD>";
    } else {
#line 468
      password = "<NO-PASSWORD>";
    }
    }
  } else {

  }
  }
  {
#line 471
  __cil_tmp115 = (unsigned long )request;
#line 471
  __cil_tmp116 = __cil_tmp115 + 56;
#line 471
  mem_596 = (VALUE_PAIR **)__cil_tmp116;
#line 471
  *mem_596 = auth_item;
#line 476
  r = module_authorize(request);
  }
#line 477
  if (r != 6) {
#line 477
    if (r != 7) {
#line 477
      if (r != 2) {
#line 477
        if (r != 8) {
#line 481
          if (r != 1) {
#line 481
            if (r != 3) {
              {
#line 482
              rad_authlog("Invalid user", request, 0);
#line 483
              __cil_tmp117 = (unsigned long )request;
#line 483
              __cil_tmp118 = __cil_tmp117 + 24;
#line 483
              mem_597 = (RADIUS_PACKET **)__cil_tmp118;
#line 483
              __cil_tmp119 = *mem_597;
#line 483
              __cil_tmp120 = (unsigned long )__cil_tmp119;
#line 483
              __cil_tmp121 = __cil_tmp120 + 20;
#line 483
              mem_598 = (int *)__cil_tmp121;
#line 483
              *mem_598 = 3;
              }
            } else {

            }
          } else {

          }
#line 489
          return (r);
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
  {
#line 498
  __cil_tmp122 = (void *)0;
#line 498
  __cil_tmp123 = (unsigned long )__cil_tmp122;
#line 498
  __cil_tmp124 = (unsigned long )request;
#line 498
  __cil_tmp125 = __cil_tmp124 + 16;
#line 498
  mem_599 = (RADIUS_PACKET **)__cil_tmp125;
#line 498
  __cil_tmp126 = *mem_599;
#line 498
  __cil_tmp127 = (unsigned long )__cil_tmp126;
#line 498
  if (__cil_tmp127 == __cil_tmp123) {
    {
#line 498
    __cil_tmp128 = (unsigned long )request;
#line 498
    __cil_tmp129 = __cil_tmp128 + 40;
#line 498
    mem_600 = (VALUE_PAIR **)__cil_tmp129;
#line 498
    __cil_tmp130 = *mem_600;
#line 498
    tmp___0 = pairfind(__cil_tmp130, 1048);
    }
    {
#line 498
    __cil_tmp131 = (void *)0;
#line 498
    __cil_tmp132 = (unsigned long )__cil_tmp131;
#line 498
    __cil_tmp133 = (unsigned long )tmp___0;
#line 498
    if (__cil_tmp133 != __cil_tmp132) {
#line 500
      return (2);
    } else {

    }
    }
  } else {

  }
  }
#line 506
  __cil_tmp134 = (unsigned long )request;
#line 506
  __cil_tmp135 = __cil_tmp134 + 48;
#line 506
  mem_601 = (VALUE_PAIR **)__cil_tmp135;
#line 506
  namepair = *mem_601;
  {
#line 511
  while (1) {
    while_4_continue: /* CIL Label */ ;
    {
#line 512
    result = check_expiration(request);
    }
#line 512
    if (result < 0) {
      goto while_4_break;
    } else {

    }
    {
#line 514
    result = rad_check_password(request);
    }
#line 515
    if (result > 0) {
#line 517
      return (3);
    } else {

    }
    goto while_4_break;
  }
  while_4_break: /* CIL Label */ ;
  }
#line 528
  if (result < 0) {
#line 530
    if (debug_flag > 1) {
      {
#line 530
      log_debug("  auth: Failed to validate the user.");
      }
    } else {

    }
    {
#line 531
    __cil_tmp136 = (unsigned long )request;
#line 531
    __cil_tmp137 = __cil_tmp136 + 24;
#line 531
    mem_602 = (RADIUS_PACKET **)__cil_tmp137;
#line 531
    __cil_tmp138 = *mem_602;
#line 531
    __cil_tmp139 = (unsigned long )__cil_tmp138;
#line 531
    __cil_tmp140 = __cil_tmp139 + 20;
#line 531
    mem_603 = (int *)__cil_tmp140;
#line 531
    *mem_603 = 3;
#line 533
    rad_authlog("Login incorrect", request, 0);
    }
#line 536
    if (debug_flag > 1) {
      {
#line 536
      __cil_tmp141 = (unsigned long )auth_item;
#line 536
      __cil_tmp142 = __cil_tmp141 + 32;
#line 536
      mem_604 = (int *)__cil_tmp142;
#line 536
      __cil_tmp143 = *mem_604;
#line 536
      if (__cil_tmp143 == 2) {
#line 540
        __cil_tmp144 = 0 * 1UL;
#line 540
        __cil_tmp145 = 56 + __cil_tmp144;
#line 540
        __cil_tmp146 = (unsigned long )auth_item;
#line 540
        __cil_tmp147 = __cil_tmp146 + __cil_tmp145;
#line 540
        p = (uint8_t *)__cil_tmp147;
        {
#line 541
        while (1) {
          while_5_continue: /* CIL Label */ ;
          {
#line 541
          __cil_tmp148 = *p;
#line 541
          __cil_tmp149 = (int )__cil_tmp148;
#line 541
          if (__cil_tmp149 != 0) {

          } else {
            goto while_5_break;
          }
          }
          {
#line 542
          tmp___1 = __ctype_b_loc();
          }
          {
#line 542
          __cil_tmp150 = *p;
#line 542
          __cil_tmp151 = (int )__cil_tmp150;
#line 542
          __cil_tmp152 = *tmp___1;
#line 542
          __cil_tmp153 = __cil_tmp152 + __cil_tmp151;
#line 542
          __cil_tmp154 = *__cil_tmp153;
#line 542
          __cil_tmp155 = (int const   )__cil_tmp154;
#line 542
          if (__cil_tmp155 & 16384) {

          } else {
            {
#line 543
            log_debug("  WARNING: Unprintable characters in the password.\n\t  Double-check the shared secret on the server and the NAS!");
            }
            goto while_5_break;
          }
          }
#line 546
          p = p + 1;
        }
        while_5_break: /* CIL Label */ ;
        }
      } else {

      }
      }
    } else {

    }
  } else {

  }
#line 551
  if (result >= 0) {
    {
#line 551
    __cil_tmp156 = (unsigned long )request;
#line 551
    __cil_tmp157 = __cil_tmp156 + 40;
#line 551
    mem_605 = (VALUE_PAIR **)__cil_tmp157;
#line 551
    __cil_tmp158 = *mem_605;
#line 551
    check_item = pairfind(__cil_tmp158, 1034);
    }
    {
#line 551
    __cil_tmp159 = (void *)0;
#line 551
    __cil_tmp160 = (unsigned long )__cil_tmp159;
#line 551
    __cil_tmp161 = (unsigned long )check_item;
#line 551
    if (__cil_tmp161 != __cil_tmp160) {
#line 557
      if (namepair) {
        {
#line 557
        __cil_tmp162 = (unsigned long )check_item;
#line 557
        __cil_tmp163 = __cil_tmp162 + 44;
#line 557
        mem_606 = (uint32_t *)__cil_tmp163;
#line 557
        __cil_tmp164 = *mem_606;
#line 557
        __cil_tmp165 = (int )__cil_tmp164;
#line 557
        r = module_checksimul(request, __cil_tmp165);
        }
#line 557
        if (r != 0) {
          {
#line 560
          __cil_tmp166 = (unsigned long )check_item;
#line 560
          __cil_tmp167 = __cil_tmp166 + 44;
#line 560
          mem_607 = (uint32_t *)__cil_tmp167;
#line 560
          __cil_tmp168 = *mem_607;
#line 560
          if (__cil_tmp168 > 1U) {
            {
#line 561
            __cil_tmp169 = 0 * 1UL;
#line 561
            __cil_tmp170 = (unsigned long )(umsg) + __cil_tmp169;
#line 561
            __cil_tmp171 = (char *)__cil_tmp170;
#line 561
            __cil_tmp172 = (char * __restrict  )__cil_tmp171;
#line 561
            __cil_tmp173 = (char const   * __restrict  )"\r\nYou are already logged in %d times  - access denied\r\n\n";
#line 561
            __cil_tmp174 = (unsigned long )check_item;
#line 561
            __cil_tmp175 = __cil_tmp174 + 44;
#line 561
            mem_608 = (uint32_t *)__cil_tmp175;
#line 561
            __cil_tmp176 = *mem_608;
#line 561
            __cil_tmp177 = (int )__cil_tmp176;
#line 561
            snprintf(__cil_tmp172, 255UL, __cil_tmp173, __cil_tmp177);
#line 564
            __cil_tmp178 = & user_msg;
#line 564
            __cil_tmp179 = 0 * 1UL;
#line 564
            __cil_tmp180 = (unsigned long )(umsg) + __cil_tmp179;
#line 564
            __cil_tmp181 = (char *)__cil_tmp180;
#line 564
            *__cil_tmp178 = (char const   *)__cil_tmp181;
            }
          } else {
#line 566
            __cil_tmp182 = & user_msg;
#line 566
            *__cil_tmp182 = "\r\nYou are already logged in - access denied\r\n\n";
          }
          }
          {
#line 569
          __cil_tmp183 = (unsigned long )request;
#line 569
          __cil_tmp184 = __cil_tmp183 + 24;
#line 569
          mem_609 = (RADIUS_PACKET **)__cil_tmp184;
#line 569
          __cil_tmp185 = *mem_609;
#line 569
          __cil_tmp186 = (unsigned long )__cil_tmp185;
#line 569
          __cil_tmp187 = __cil_tmp186 + 20;
#line 569
          mem_610 = (int *)__cil_tmp187;
#line 569
          *mem_610 = 3;
#line 575
          __cil_tmp188 = (unsigned long )request;
#line 575
          __cil_tmp189 = __cil_tmp188 + 24;
#line 575
          mem_611 = (RADIUS_PACKET **)__cil_tmp189;
#line 575
          __cil_tmp190 = *mem_611;
#line 575
          __cil_tmp191 = (unsigned long )__cil_tmp190;
#line 575
          __cil_tmp192 = __cil_tmp191 + 72;
#line 575
          __cil_tmp193 = (VALUE_PAIR **)__cil_tmp192;
#line 575
          pairfree(__cil_tmp193);
#line 576
          __cil_tmp194 = & user_msg;
#line 576
          __cil_tmp195 = *__cil_tmp194;
#line 576
          tmp = pairmake("Reply-Message", __cil_tmp195, 10);
#line 577
          __cil_tmp196 = (unsigned long )request;
#line 577
          __cil_tmp197 = __cil_tmp196 + 24;
#line 577
          mem_612 = (RADIUS_PACKET **)__cil_tmp197;
#line 577
          __cil_tmp198 = *mem_612;
#line 577
          __cil_tmp199 = (unsigned long )__cil_tmp198;
#line 577
          __cil_tmp200 = __cil_tmp199 + 72;
#line 577
          mem_613 = (VALUE_PAIR **)__cil_tmp200;
#line 577
          *mem_613 = tmp;
          }
#line 579
          if (r == 2) {
#line 579
            tmp___2 = "[MPP attempt]";
          } else {
#line 579
            tmp___2 = "";
          }
          {
#line 579
          __cil_tmp201 = 0 * 1UL;
#line 579
          __cil_tmp202 = (unsigned long )(logstr) + __cil_tmp201;
#line 579
          __cil_tmp203 = (char *)__cil_tmp202;
#line 579
          __cil_tmp204 = (char * __restrict  )__cil_tmp203;
#line 579
          __cil_tmp205 = (char const   * __restrict  )"Multiple logins (max %d) %s";
#line 579
          __cil_tmp206 = (unsigned long )check_item;
#line 579
          __cil_tmp207 = __cil_tmp206 + 44;
#line 579
          mem_614 = (uint32_t *)__cil_tmp207;
#line 579
          __cil_tmp208 = *mem_614;
#line 579
          snprintf(__cil_tmp204, 1024UL, __cil_tmp205, __cil_tmp208, tmp___2);
#line 582
          __cil_tmp209 = 0 * 1UL;
#line 582
          __cil_tmp210 = (unsigned long )(logstr) + __cil_tmp209;
#line 582
          __cil_tmp211 = (char *)__cil_tmp210;
#line 582
          __cil_tmp212 = (char const   *)__cil_tmp211;
#line 582
          rad_authlog(__cil_tmp212, request, 1);
#line 584
          result = -1;
          }
        } else {

        }
      } else {

      }
    } else {

    }
    }
  } else {

  }
#line 588
  if (result >= 0) {
    {
#line 588
    __cil_tmp213 = (unsigned long )request;
#line 588
    __cil_tmp214 = __cil_tmp213 + 40;
#line 588
    mem_615 = (VALUE_PAIR **)__cil_tmp214;
#line 588
    __cil_tmp215 = *mem_615;
#line 588
    check_item = pairfind(__cil_tmp215, 1042);
    }
    {
#line 588
    __cil_tmp216 = (void *)0;
#line 588
    __cil_tmp217 = (unsigned long )__cil_tmp216;
#line 588
    __cil_tmp218 = (unsigned long )check_item;
#line 588
    if (__cil_tmp218 != __cil_tmp217) {
      {
#line 595
      __cil_tmp219 = 0 * 1UL;
#line 595
      __cil_tmp220 = 56 + __cil_tmp219;
#line 595
      __cil_tmp221 = (unsigned long )check_item;
#line 595
      __cil_tmp222 = __cil_tmp221 + __cil_tmp220;
#line 595
      __cil_tmp223 = (uint8_t *)__cil_tmp222;
#line 595
      __cil_tmp224 = (char *)__cil_tmp223;
#line 595
      __cil_tmp225 = (unsigned long )request;
#line 595
      __cil_tmp226 = __cil_tmp225 + 104;
#line 595
      mem_616 = (time_t *)__cil_tmp226;
#line 595
      __cil_tmp227 = *mem_616;
#line 595
      r = timestr_match(__cil_tmp224, __cil_tmp227);
      }
#line 602
      if (r < 60) {
        {
#line 606
        result = -1;
#line 607
        __cil_tmp228 = & user_msg;
#line 607
        *__cil_tmp228 = "You are calling outside your allowed timespan\r\n";
#line 609
        __cil_tmp229 = (unsigned long )request;
#line 609
        __cil_tmp230 = __cil_tmp229 + 24;
#line 609
        mem_617 = (RADIUS_PACKET **)__cil_tmp230;
#line 609
        __cil_tmp231 = *mem_617;
#line 609
        __cil_tmp232 = (unsigned long )__cil_tmp231;
#line 609
        __cil_tmp233 = __cil_tmp232 + 20;
#line 609
        mem_618 = (int *)__cil_tmp233;
#line 609
        *mem_618 = 3;
#line 610
        __cil_tmp234 = (unsigned long )request;
#line 610
        __cil_tmp235 = __cil_tmp234 + 24;
#line 610
        mem_619 = (RADIUS_PACKET **)__cil_tmp235;
#line 610
        __cil_tmp236 = *mem_619;
#line 610
        __cil_tmp237 = (unsigned long )__cil_tmp236;
#line 610
        __cil_tmp238 = __cil_tmp237 + 72;
#line 610
        __cil_tmp239 = (VALUE_PAIR **)__cil_tmp238;
#line 610
        pairfree(__cil_tmp239);
#line 612
        __cil_tmp240 = & user_msg;
#line 612
        __cil_tmp241 = *__cil_tmp240;
#line 612
        tmp = pairmake("Reply-Message", __cil_tmp241, 10);
#line 613
        __cil_tmp242 = (unsigned long )request;
#line 613
        __cil_tmp243 = __cil_tmp242 + 24;
#line 613
        mem_620 = (RADIUS_PACKET **)__cil_tmp243;
#line 613
        __cil_tmp244 = *mem_620;
#line 613
        __cil_tmp245 = (unsigned long )__cil_tmp244;
#line 613
        __cil_tmp246 = __cil_tmp245 + 72;
#line 613
        mem_621 = (VALUE_PAIR **)__cil_tmp246;
#line 613
        *mem_621 = tmp;
#line 615
        __cil_tmp247 = 0 * 1UL;
#line 615
        __cil_tmp248 = (unsigned long )(logstr) + __cil_tmp247;
#line 615
        __cil_tmp249 = (char *)__cil_tmp248;
#line 615
        __cil_tmp250 = (char * __restrict  )__cil_tmp249;
#line 615
        __cil_tmp251 = (char const   * __restrict  )"Outside allowed timespan (time allowed %s)";
#line 615
        __cil_tmp252 = 0 * 1UL;
#line 615
        __cil_tmp253 = 56 + __cil_tmp252;
#line 615
        __cil_tmp254 = (unsigned long )check_item;
#line 615
        __cil_tmp255 = __cil_tmp254 + __cil_tmp253;
#line 615
        __cil_tmp256 = (uint8_t *)__cil_tmp255;
#line 615
        snprintf(__cil_tmp250, 1024UL, __cil_tmp251, __cil_tmp256);
#line 617
        __cil_tmp257 = 0 * 1UL;
#line 617
        __cil_tmp258 = (unsigned long )(logstr) + __cil_tmp257;
#line 617
        __cil_tmp259 = (char *)__cil_tmp258;
#line 617
        __cil_tmp260 = (char const   *)__cil_tmp259;
#line 617
        rad_authlog(__cil_tmp260, request, 1);
        }
      } else {
#line 619
        if (r > 0) {
          {
#line 624
          __cil_tmp261 = (unsigned long )request;
#line 624
          __cil_tmp262 = __cil_tmp261 + 24;
#line 624
          mem_622 = (RADIUS_PACKET **)__cil_tmp262;
#line 624
          __cil_tmp263 = *mem_622;
#line 624
          __cil_tmp264 = (unsigned long )__cil_tmp263;
#line 624
          __cil_tmp265 = __cil_tmp264 + 72;
#line 624
          mem_623 = (VALUE_PAIR **)__cil_tmp265;
#line 624
          __cil_tmp266 = *mem_623;
#line 624
          reply_item = pairfind(__cil_tmp266, 27);
          }
          {
#line 624
          __cil_tmp267 = (void *)0;
#line 624
          __cil_tmp268 = (unsigned long )__cil_tmp267;
#line 624
          __cil_tmp269 = (unsigned long )reply_item;
#line 624
          if (__cil_tmp269 != __cil_tmp268) {
            {
#line 626
            __cil_tmp270 = (unsigned int )r;
#line 626
            __cil_tmp271 = (unsigned long )reply_item;
#line 626
            __cil_tmp272 = __cil_tmp271 + 44;
#line 626
            mem_624 = (uint32_t *)__cil_tmp272;
#line 626
            __cil_tmp273 = *mem_624;
#line 626
            if (__cil_tmp273 > __cil_tmp270) {
#line 627
              __cil_tmp274 = (unsigned long )reply_item;
#line 627
              __cil_tmp275 = __cil_tmp274 + 44;
#line 627
              mem_625 = (uint32_t *)__cil_tmp275;
#line 627
              *mem_625 = (unsigned int )r;
            } else {

            }
            }
          } else {
            {
#line 629
            reply_item = paircreate(27, 1);
            }
            {
#line 629
            __cil_tmp276 = (void *)0;
#line 629
            __cil_tmp277 = (unsigned long )__cil_tmp276;
#line 629
            __cil_tmp278 = (unsigned long )reply_item;
#line 629
            if (__cil_tmp278 == __cil_tmp277) {
              {
#line 632
              radlog(132, "no memory");
#line 633
              exit(1);
              }
            } else {

            }
            }
            {
#line 635
            __cil_tmp279 = (unsigned long )reply_item;
#line 635
            __cil_tmp280 = __cil_tmp279 + 44;
#line 635
            mem_626 = (uint32_t *)__cil_tmp280;
#line 635
            *mem_626 = (unsigned int )r;
#line 636
            __cil_tmp281 = (unsigned long )request;
#line 636
            __cil_tmp282 = __cil_tmp281 + 24;
#line 636
            mem_627 = (RADIUS_PACKET **)__cil_tmp282;
#line 636
            __cil_tmp283 = *mem_627;
#line 636
            __cil_tmp284 = (unsigned long )__cil_tmp283;
#line 636
            __cil_tmp285 = __cil_tmp284 + 72;
#line 636
            __cil_tmp286 = (VALUE_PAIR **)__cil_tmp285;
#line 636
            pairadd(__cil_tmp286, reply_item);
            }
          }
          }
        } else {

        }
      }
    } else {

    }
    }
  } else {

  }
#line 644
  if (result < 0) {
#line 645
    return (2);
  } else {

  }
  {
#line 653
  __cil_tmp287 = (unsigned long )auth_item;
#line 653
  __cil_tmp288 = __cil_tmp287 + 32;
#line 653
  mem_628 = (int *)__cil_tmp288;
#line 653
  __cil_tmp289 = *mem_628;
#line 653
  if (__cil_tmp289 == 3) {
#line 654
    password = "CHAP-Password";
  } else {

  }
  }
  {
#line 665
  __cil_tmp290 = (unsigned long )request;
#line 665
  __cil_tmp291 = __cil_tmp290 + 24;
#line 665
  mem_629 = (RADIUS_PACKET **)__cil_tmp291;
#line 665
  __cil_tmp292 = *mem_629;
#line 665
  __cil_tmp293 = (unsigned long )__cil_tmp292;
#line 665
  __cil_tmp294 = __cil_tmp293 + 72;
#line 665
  mem_630 = (VALUE_PAIR **)__cil_tmp294;
#line 665
  __cil_tmp295 = *mem_630;
#line 665
  tmp = pairfind(__cil_tmp295, 8);
  }
  {
#line 665
  __cil_tmp296 = (void *)0;
#line 665
  __cil_tmp297 = (unsigned long )__cil_tmp296;
#line 665
  __cil_tmp298 = (unsigned long )tmp;
#line 665
  if (__cil_tmp298 != __cil_tmp297) {
    {
#line 673
    __cil_tmp299 = (unsigned long )request;
#line 673
    __cil_tmp300 = __cil_tmp299 + 8;
#line 673
    mem_631 = (RADIUS_PACKET **)__cil_tmp300;
#line 673
    __cil_tmp301 = *mem_631;
#line 673
    __cil_tmp302 = (unsigned long )__cil_tmp301;
#line 673
    __cil_tmp303 = __cil_tmp302 + 72;
#line 673
    mem_632 = (VALUE_PAIR **)__cil_tmp303;
#line 673
    __cil_tmp304 = *mem_632;
#line 673
    vpPortId = pairfind(__cil_tmp304, 5);
    }
    {
#line 673
    __cil_tmp305 = (void *)0;
#line 673
    __cil_tmp306 = (unsigned long )__cil_tmp305;
#line 673
    __cil_tmp307 = (unsigned long )vpPortId;
#line 673
    if (__cil_tmp307 != __cil_tmp306) {
#line 675
      __cil_tmp308 = (unsigned long )vpPortId;
#line 675
      __cil_tmp309 = __cil_tmp308 + 44;
#line 675
      mem_633 = (uint32_t *)__cil_tmp309;
#line 675
      __cil_tmp310 = *mem_633;
#line 675
      nas_port = (int )__cil_tmp310;
    } else {

    }
    }
    {
#line 677
    __cil_tmp311 = (unsigned long )request;
#line 677
    __cil_tmp312 = __cil_tmp311 + 24;
#line 677
    mem_634 = (RADIUS_PACKET **)__cil_tmp312;
#line 677
    __cil_tmp313 = *mem_634;
#line 677
    __cil_tmp314 = (unsigned long )__cil_tmp313;
#line 677
    __cil_tmp315 = __cil_tmp314 + 72;
#line 677
    mem_635 = (VALUE_PAIR **)__cil_tmp315;
#line 677
    __cil_tmp316 = *mem_635;
#line 677
    vpAddPort = pairfind(__cil_tmp316, 501);
    }
    {
#line 677
    __cil_tmp317 = (void *)0;
#line 677
    __cil_tmp318 = (unsigned long )__cil_tmp317;
#line 677
    __cil_tmp319 = (unsigned long )vpAddPort;
#line 677
    if (__cil_tmp319 != __cil_tmp318) {
      {
#line 679
      __cil_tmp320 = (unsigned long )tmp;
#line 679
      __cil_tmp321 = __cil_tmp320 + 52;
      {
#line 679
      mem_636 = (int *)__cil_tmp321;
#line 679
      if (*mem_636) {
        {
#line 680
        __cil_tmp322 = (unsigned long )tmp;
#line 680
        __cil_tmp323 = __cil_tmp322 + 44;
#line 680
        mem_637 = (uint32_t *)__cil_tmp323;
#line 680
        __cil_tmp324 = *mem_637;
#line 680
        tmp___3 = ntohl(__cil_tmp324);
#line 680
        __cil_tmp325 = (unsigned long )tmp;
#line 680
        __cil_tmp326 = __cil_tmp325 + 44;
#line 680
        __cil_tmp327 = (uint32_t )nas_port;
#line 680
        __cil_tmp328 = tmp___3 + __cil_tmp327;
#line 680
        mem_638 = (uint32_t *)__cil_tmp326;
#line 680
        *mem_638 = htonl(__cil_tmp328);
#line 681
        __cil_tmp329 = (unsigned long )tmp;
#line 681
        __cil_tmp330 = __cil_tmp329 + 52;
#line 681
        mem_639 = (int *)__cil_tmp330;
#line 681
        *mem_639 = 0;
        }
      } else {
#line 679
        if (vpAddPort) {
          {
#line 679
          __cil_tmp331 = (unsigned long )vpAddPort;
#line 679
          __cil_tmp332 = __cil_tmp331 + 44;
          {
#line 679
          mem_640 = (uint32_t *)__cil_tmp332;
#line 679
          if (*mem_640) {
            {
#line 680
            __cil_tmp333 = (unsigned long )tmp;
#line 680
            __cil_tmp334 = __cil_tmp333 + 44;
#line 680
            mem_641 = (uint32_t *)__cil_tmp334;
#line 680
            __cil_tmp335 = *mem_641;
#line 680
            tmp___3 = ntohl(__cil_tmp335);
#line 680
            __cil_tmp336 = (unsigned long )tmp;
#line 680
            __cil_tmp337 = __cil_tmp336 + 44;
#line 680
            __cil_tmp338 = (uint32_t )nas_port;
#line 680
            __cil_tmp339 = tmp___3 + __cil_tmp338;
#line 680
            mem_642 = (uint32_t *)__cil_tmp337;
#line 680
            *mem_642 = htonl(__cil_tmp339);
#line 681
            __cil_tmp340 = (unsigned long )tmp;
#line 681
            __cil_tmp341 = __cil_tmp340 + 52;
#line 681
            mem_643 = (int *)__cil_tmp341;
#line 681
            *mem_643 = 0;
            }
          } else {

          }
          }
          }
        } else {

        }
      }
      }
      }
      {
#line 683
      __cil_tmp342 = (unsigned long )request;
#line 683
      __cil_tmp343 = __cil_tmp342 + 24;
#line 683
      mem_644 = (RADIUS_PACKET **)__cil_tmp343;
#line 683
      __cil_tmp344 = *mem_644;
#line 683
      __cil_tmp345 = (unsigned long )__cil_tmp344;
#line 683
      __cil_tmp346 = __cil_tmp345 + 72;
#line 683
      __cil_tmp347 = (VALUE_PAIR **)__cil_tmp346;
#line 683
      pairdelete(__cil_tmp347, 501);
      }
    } else {

    }
    }
  } else {

  }
  }
  {
#line 694
  __cil_tmp348 = (void *)0;
#line 694
  exec_program = (char *)__cil_tmp348;
#line 695
  exec_wait = 0;
#line 696
  __cil_tmp349 = (unsigned long )request;
#line 696
  __cil_tmp350 = __cil_tmp349 + 24;
#line 696
  mem_645 = (RADIUS_PACKET **)__cil_tmp350;
#line 696
  __cil_tmp351 = *mem_645;
#line 696
  __cil_tmp352 = (unsigned long )__cil_tmp351;
#line 696
  __cil_tmp353 = __cil_tmp352 + 72;
#line 696
  mem_646 = (VALUE_PAIR **)__cil_tmp353;
#line 696
  __cil_tmp354 = *mem_646;
#line 696
  auth_item = pairfind(__cil_tmp354, 502);
  }
  {
#line 696
  __cil_tmp355 = (void *)0;
#line 696
  __cil_tmp356 = (unsigned long )__cil_tmp355;
#line 696
  __cil_tmp357 = (unsigned long )auth_item;
#line 696
  if (__cil_tmp357 != __cil_tmp356) {
    {
#line 697
    exec_wait = 0;
#line 698
    __cil_tmp358 = 0 * 1UL;
#line 698
    __cil_tmp359 = 56 + __cil_tmp358;
#line 698
    __cil_tmp360 = (unsigned long )auth_item;
#line 698
    __cil_tmp361 = __cil_tmp360 + __cil_tmp359;
#line 698
    __cil_tmp362 = (uint8_t *)__cil_tmp361;
#line 698
    __cil_tmp363 = (char *)__cil_tmp362;
#line 698
    __cil_tmp364 = (char const   *)__cil_tmp363;
#line 698
    exec_program = strdup(__cil_tmp364);
#line 699
    __cil_tmp365 = (unsigned long )request;
#line 699
    __cil_tmp366 = __cil_tmp365 + 24;
#line 699
    mem_647 = (RADIUS_PACKET **)__cil_tmp366;
#line 699
    __cil_tmp367 = *mem_647;
#line 699
    __cil_tmp368 = (unsigned long )__cil_tmp367;
#line 699
    __cil_tmp369 = __cil_tmp368 + 72;
#line 699
    __cil_tmp370 = (VALUE_PAIR **)__cil_tmp369;
#line 699
    pairdelete(__cil_tmp370, 502);
    }
  } else {

  }
  }
  {
#line 701
  __cil_tmp371 = (unsigned long )request;
#line 701
  __cil_tmp372 = __cil_tmp371 + 24;
#line 701
  mem_648 = (RADIUS_PACKET **)__cil_tmp372;
#line 701
  __cil_tmp373 = *mem_648;
#line 701
  __cil_tmp374 = (unsigned long )__cil_tmp373;
#line 701
  __cil_tmp375 = __cil_tmp374 + 72;
#line 701
  mem_649 = (VALUE_PAIR **)__cil_tmp375;
#line 701
  __cil_tmp376 = *mem_649;
#line 701
  auth_item = pairfind(__cil_tmp376, 503);
  }
  {
#line 701
  __cil_tmp377 = (void *)0;
#line 701
  __cil_tmp378 = (unsigned long )__cil_tmp377;
#line 701
  __cil_tmp379 = (unsigned long )auth_item;
#line 701
  if (__cil_tmp379 != __cil_tmp378) {
    {
#line 702
    exec_wait = 1;
#line 703
    __cil_tmp380 = 0 * 1UL;
#line 703
    __cil_tmp381 = 56 + __cil_tmp380;
#line 703
    __cil_tmp382 = (unsigned long )auth_item;
#line 703
    __cil_tmp383 = __cil_tmp382 + __cil_tmp381;
#line 703
    __cil_tmp384 = (uint8_t *)__cil_tmp383;
#line 703
    __cil_tmp385 = (char *)__cil_tmp384;
#line 703
    __cil_tmp386 = (char const   *)__cil_tmp385;
#line 703
    exec_program = strdup(__cil_tmp386);
#line 704
    __cil_tmp387 = (unsigned long )request;
#line 704
    __cil_tmp388 = __cil_tmp387 + 24;
#line 704
    mem_650 = (RADIUS_PACKET **)__cil_tmp388;
#line 704
    __cil_tmp389 = *mem_650;
#line 704
    __cil_tmp390 = (unsigned long )__cil_tmp389;
#line 704
    __cil_tmp391 = __cil_tmp390 + 72;
#line 704
    __cil_tmp392 = (VALUE_PAIR **)__cil_tmp391;
#line 704
    pairdelete(__cil_tmp392, 503);
    }
  } else {

  }
  }
  {
#line 711
  seen_callback_id = 0;
#line 712
  __cil_tmp393 = (unsigned long )request;
#line 712
  __cil_tmp394 = __cil_tmp393 + 24;
#line 712
  mem_651 = (RADIUS_PACKET **)__cil_tmp394;
#line 712
  __cil_tmp395 = *mem_651;
#line 712
  __cil_tmp396 = (unsigned long )__cil_tmp395;
#line 712
  __cil_tmp397 = __cil_tmp396 + 72;
#line 712
  mem_652 = (VALUE_PAIR **)__cil_tmp397;
#line 712
  __cil_tmp398 = *mem_652;
#line 712
  auth_item = pairfind(__cil_tmp398, 20);
  }
  {
#line 712
  __cil_tmp399 = (void *)0;
#line 712
  __cil_tmp400 = (unsigned long )__cil_tmp399;
#line 712
  __cil_tmp401 = (unsigned long )auth_item;
#line 712
  if (__cil_tmp401 != __cil_tmp400) {
    {
#line 713
    seen_callback_id = 1;
#line 714
    __cil_tmp402 = 0 * 1UL;
#line 714
    __cil_tmp403 = (unsigned long )(buf) + __cil_tmp402;
#line 714
    __cil_tmp404 = (char *)__cil_tmp403;
#line 714
    __cil_tmp405 = (int )254UL;
#line 714
    __cil_tmp406 = 0 * 1UL;
#line 714
    __cil_tmp407 = 56 + __cil_tmp406;
#line 714
    __cil_tmp408 = (unsigned long )auth_item;
#line 714
    __cil_tmp409 = __cil_tmp408 + __cil_tmp407;
#line 714
    __cil_tmp410 = (uint8_t *)__cil_tmp409;
#line 714
    __cil_tmp411 = (char *)__cil_tmp410;
#line 714
    __cil_tmp412 = (char const   *)__cil_tmp411;
#line 714
    __cil_tmp413 = (void *)0;
#line 714
    __cil_tmp414 = (int (*)(char *out , int outlen , char const   *in ))__cil_tmp413;
#line 714
    radius_xlat(__cil_tmp404, __cil_tmp405, __cil_tmp412, request, __cil_tmp414);
#line 716
    __cil_tmp415 = 0 * 1UL;
#line 716
    __cil_tmp416 = 56 + __cil_tmp415;
#line 716
    __cil_tmp417 = (unsigned long )auth_item;
#line 716
    __cil_tmp418 = __cil_tmp417 + __cil_tmp416;
#line 716
    __cil_tmp419 = (uint8_t *)__cil_tmp418;
#line 716
    __cil_tmp420 = (char *)__cil_tmp419;
#line 716
    __cil_tmp421 = 0 * 1UL;
#line 716
    __cil_tmp422 = (unsigned long )(buf) + __cil_tmp421;
#line 716
    __cil_tmp423 = (char *)__cil_tmp422;
#line 716
    __cil_tmp424 = (char const   *)__cil_tmp423;
#line 716
    __cil_tmp425 = (int )254UL;
#line 716
    strNcpy(__cil_tmp420, __cil_tmp424, __cil_tmp425);
#line 718
    __cil_tmp426 = 0 * 1UL;
#line 718
    __cil_tmp427 = 56 + __cil_tmp426;
#line 718
    __cil_tmp428 = (unsigned long )auth_item;
#line 718
    __cil_tmp429 = __cil_tmp428 + __cil_tmp427;
#line 718
    __cil_tmp430 = (uint8_t *)__cil_tmp429;
#line 718
    __cil_tmp431 = (char *)__cil_tmp430;
#line 718
    __cil_tmp432 = (char const   *)__cil_tmp431;
#line 718
    tmp___4 = strlen(__cil_tmp432);
#line 718
    __cil_tmp433 = (unsigned long )auth_item;
#line 718
    __cil_tmp434 = __cil_tmp433 + 40;
#line 718
    mem_653 = (int *)__cil_tmp434;
#line 718
    *mem_653 = (int )tmp___4;
    }
  } else {

  }
  }
#line 726
  if (exec_program) {
#line 726
    if (exec_wait) {
      {
#line 727
      __cil_tmp435 = (char const   *)exec_program;
#line 727
      tmp___5 = radius_exec_program(__cil_tmp435, request, exec_wait, & user_msg);
      }
#line 727
      if (tmp___5 != 0) {
        {
#line 734
        __cil_tmp436 = (void *)0;
#line 734
        __cil_tmp437 = (unsigned long )__cil_tmp436;
#line 734
        __cil_tmp438 = & user_msg;
#line 734
        __cil_tmp439 = *__cil_tmp438;
#line 734
        __cil_tmp440 = (unsigned long )__cil_tmp439;
#line 734
        if (__cil_tmp440 == __cil_tmp437) {
#line 735
          __cil_tmp441 = & user_msg;
#line 735
          *__cil_tmp441 = "\r\nAccess denied (external check failed).";
        } else {

        }
        }
        {
#line 737
        __cil_tmp442 = (unsigned long )request;
#line 737
        __cil_tmp443 = __cil_tmp442 + 24;
#line 737
        mem_654 = (RADIUS_PACKET **)__cil_tmp443;
#line 737
        __cil_tmp444 = *mem_654;
#line 737
        __cil_tmp445 = (unsigned long )__cil_tmp444;
#line 737
        __cil_tmp446 = __cil_tmp445 + 20;
#line 737
        mem_655 = (int *)__cil_tmp446;
#line 737
        *mem_655 = 3;
#line 738
        __cil_tmp447 = (unsigned long )request;
#line 738
        __cil_tmp448 = __cil_tmp447 + 24;
#line 738
        mem_656 = (RADIUS_PACKET **)__cil_tmp448;
#line 738
        __cil_tmp449 = *mem_656;
#line 738
        __cil_tmp450 = (unsigned long )__cil_tmp449;
#line 738
        __cil_tmp451 = __cil_tmp450 + 72;
#line 738
        __cil_tmp452 = (VALUE_PAIR **)__cil_tmp451;
#line 738
        pairfree(__cil_tmp452);
#line 739
        __cil_tmp453 = & user_msg;
#line 739
        __cil_tmp454 = *__cil_tmp453;
#line 739
        tmp = pairmake("Reply-Message", __cil_tmp454, 10);
#line 740
        __cil_tmp455 = (unsigned long )request;
#line 740
        __cil_tmp456 = __cil_tmp455 + 24;
#line 740
        mem_657 = (RADIUS_PACKET **)__cil_tmp456;
#line 740
        __cil_tmp457 = *mem_657;
#line 740
        __cil_tmp458 = (unsigned long )__cil_tmp457;
#line 740
        __cil_tmp459 = __cil_tmp458 + 72;
#line 740
        mem_658 = (VALUE_PAIR **)__cil_tmp459;
#line 740
        *mem_658 = tmp;
#line 742
        rad_authlog("Login incorrect (external check failed)", request, 0);
        }
#line 745
        return (2);
      } else {

      }
    } else {

    }
  } else {

  }
#line 759
  if (seen_callback_id) {
    {
#line 760
    __cil_tmp460 = (unsigned long )request;
#line 760
    __cil_tmp461 = __cil_tmp460 + 24;
#line 760
    mem_659 = (RADIUS_PACKET **)__cil_tmp461;
#line 760
    __cil_tmp462 = *mem_659;
#line 760
    __cil_tmp463 = (unsigned long )__cil_tmp462;
#line 760
    __cil_tmp464 = __cil_tmp463 + 72;
#line 760
    __cil_tmp465 = (VALUE_PAIR **)__cil_tmp464;
#line 760
    pairdelete(__cil_tmp465, 7);
#line 761
    __cil_tmp466 = (unsigned long )request;
#line 761
    __cil_tmp467 = __cil_tmp466 + 24;
#line 761
    mem_660 = (RADIUS_PACKET **)__cil_tmp467;
#line 761
    __cil_tmp468 = *mem_660;
#line 761
    __cil_tmp469 = (unsigned long )__cil_tmp468;
#line 761
    __cil_tmp470 = __cil_tmp469 + 72;
#line 761
    __cil_tmp471 = (VALUE_PAIR **)__cil_tmp470;
#line 761
    pairdelete(__cil_tmp471, 8);
#line 762
    __cil_tmp472 = (unsigned long )request;
#line 762
    __cil_tmp473 = __cil_tmp472 + 24;
#line 762
    mem_661 = (RADIUS_PACKET **)__cil_tmp473;
#line 762
    __cil_tmp474 = *mem_661;
#line 762
    __cil_tmp475 = (unsigned long )__cil_tmp474;
#line 762
    __cil_tmp476 = __cil_tmp475 + 72;
#line 762
    __cil_tmp477 = (VALUE_PAIR **)__cil_tmp476;
#line 762
    pairdelete(__cil_tmp477, 9);
#line 763
    __cil_tmp478 = (unsigned long )request;
#line 763
    __cil_tmp479 = __cil_tmp478 + 24;
#line 763
    mem_662 = (RADIUS_PACKET **)__cil_tmp479;
#line 763
    __cil_tmp480 = *mem_662;
#line 763
    __cil_tmp481 = (unsigned long )__cil_tmp480;
#line 763
    __cil_tmp482 = __cil_tmp481 + 72;
#line 763
    __cil_tmp483 = (VALUE_PAIR **)__cil_tmp482;
#line 763
    pairdelete(__cil_tmp483, 22);
#line 764
    __cil_tmp484 = (unsigned long )request;
#line 764
    __cil_tmp485 = __cil_tmp484 + 24;
#line 764
    mem_663 = (RADIUS_PACKET **)__cil_tmp485;
#line 764
    __cil_tmp486 = *mem_663;
#line 764
    __cil_tmp487 = (unsigned long )__cil_tmp486;
#line 764
    __cil_tmp488 = __cil_tmp487 + 72;
#line 764
    __cil_tmp489 = (VALUE_PAIR **)__cil_tmp488;
#line 764
    pairdelete(__cil_tmp489, 12);
#line 765
    __cil_tmp490 = (unsigned long )request;
#line 765
    __cil_tmp491 = __cil_tmp490 + 24;
#line 765
    mem_664 = (RADIUS_PACKET **)__cil_tmp491;
#line 765
    __cil_tmp492 = *mem_664;
#line 765
    __cil_tmp493 = (unsigned long )__cil_tmp492;
#line 765
    __cil_tmp494 = __cil_tmp493 + 72;
#line 765
    __cil_tmp495 = (VALUE_PAIR **)__cil_tmp494;
#line 765
    pairdelete(__cil_tmp495, 13);
#line 766
    __cil_tmp496 = (unsigned long )request;
#line 766
    __cil_tmp497 = __cil_tmp496 + 24;
#line 766
    mem_665 = (RADIUS_PACKET **)__cil_tmp497;
#line 766
    __cil_tmp498 = *mem_665;
#line 766
    __cil_tmp499 = (unsigned long )__cil_tmp498;
#line 766
    __cil_tmp500 = __cil_tmp499 + 72;
#line 766
    __cil_tmp501 = (VALUE_PAIR **)__cil_tmp500;
#line 766
    pairdelete(__cil_tmp501, 11);
#line 767
    __cil_tmp502 = (unsigned long )request;
#line 767
    __cil_tmp503 = __cil_tmp502 + 24;
#line 767
    mem_666 = (RADIUS_PACKET **)__cil_tmp503;
#line 767
    __cil_tmp504 = *mem_666;
#line 767
    __cil_tmp505 = (unsigned long )__cil_tmp504;
#line 767
    __cil_tmp506 = __cil_tmp505 + 72;
#line 767
    __cil_tmp507 = (VALUE_PAIR **)__cil_tmp506;
#line 767
    pairdelete(__cil_tmp507, 62);
#line 768
    __cil_tmp508 = (unsigned long )request;
#line 768
    __cil_tmp509 = __cil_tmp508 + 24;
#line 768
    mem_667 = (RADIUS_PACKET **)__cil_tmp509;
#line 768
    __cil_tmp510 = *mem_667;
#line 768
    __cil_tmp511 = (unsigned long )__cil_tmp510;
#line 768
    __cil_tmp512 = __cil_tmp511 + 72;
#line 768
    __cil_tmp513 = (VALUE_PAIR **)__cil_tmp512;
#line 768
    pairdelete(__cil_tmp513, 19);
    }
  } else {

  }
  {
#line 775
  __cil_tmp514 = (void *)0;
#line 775
  __cil_tmp515 = (unsigned long )__cil_tmp514;
#line 775
  __cil_tmp516 = & user_msg;
#line 775
  __cil_tmp517 = *__cil_tmp516;
#line 775
  __cil_tmp518 = (unsigned long )__cil_tmp517;
#line 775
  if (__cil_tmp518 == __cil_tmp515) {
    {
#line 776
    __cil_tmp519 = (unsigned long )request;
#line 776
    __cil_tmp520 = __cil_tmp519 + 24;
#line 776
    mem_668 = (RADIUS_PACKET **)__cil_tmp520;
#line 776
    __cil_tmp521 = *mem_668;
#line 776
    __cil_tmp522 = (unsigned long )__cil_tmp521;
#line 776
    __cil_tmp523 = __cil_tmp522 + 72;
#line 776
    mem_669 = (VALUE_PAIR **)__cil_tmp523;
#line 776
    __cil_tmp524 = *mem_669;
#line 776
    reply_item = pairfind(__cil_tmp524, 18);
    }
    {
#line 777
    while (1) {
      while_6_continue: /* CIL Label */ ;
#line 777
      if (reply_item) {

      } else {
        goto while_6_break;
      }
      {
#line 778
      __cil_tmp525 = 0 * 1UL;
#line 778
      __cil_tmp526 = (unsigned long )(buf) + __cil_tmp525;
#line 778
      __cil_tmp527 = (char *)__cil_tmp526;
#line 778
      __cil_tmp528 = (int )254UL;
#line 778
      __cil_tmp529 = 0 * 1UL;
#line 778
      __cil_tmp530 = 56 + __cil_tmp529;
#line 778
      __cil_tmp531 = (unsigned long )reply_item;
#line 778
      __cil_tmp532 = __cil_tmp531 + __cil_tmp530;
#line 778
      __cil_tmp533 = (uint8_t *)__cil_tmp532;
#line 778
      __cil_tmp534 = (char *)__cil_tmp533;
#line 778
      __cil_tmp535 = (char const   *)__cil_tmp534;
#line 778
      __cil_tmp536 = (void *)0;
#line 778
      __cil_tmp537 = (int (*)(char *out , int outlen , char const   *in ))__cil_tmp536;
#line 778
      radius_xlat(__cil_tmp527, __cil_tmp528, __cil_tmp535, request, __cil_tmp537);
#line 780
      __cil_tmp538 = 0 * 1UL;
#line 780
      __cil_tmp539 = 56 + __cil_tmp538;
#line 780
      __cil_tmp540 = (unsigned long )reply_item;
#line 780
      __cil_tmp541 = __cil_tmp540 + __cil_tmp539;
#line 780
      __cil_tmp542 = (uint8_t *)__cil_tmp541;
#line 780
      __cil_tmp543 = (char *)__cil_tmp542;
#line 780
      __cil_tmp544 = 0 * 1UL;
#line 780
      __cil_tmp545 = (unsigned long )(buf) + __cil_tmp544;
#line 780
      __cil_tmp546 = (char *)__cil_tmp545;
#line 780
      __cil_tmp547 = (char const   *)__cil_tmp546;
#line 780
      __cil_tmp548 = (int )254UL;
#line 780
      strNcpy(__cil_tmp543, __cil_tmp547, __cil_tmp548);
#line 782
      __cil_tmp549 = 0 * 1UL;
#line 782
      __cil_tmp550 = 56 + __cil_tmp549;
#line 782
      __cil_tmp551 = (unsigned long )reply_item;
#line 782
      __cil_tmp552 = __cil_tmp551 + __cil_tmp550;
#line 782
      __cil_tmp553 = (uint8_t *)__cil_tmp552;
#line 782
      __cil_tmp554 = (char *)__cil_tmp553;
#line 782
      __cil_tmp555 = (char const   *)__cil_tmp554;
#line 782
      tmp___6 = strlen(__cil_tmp555);
#line 782
      __cil_tmp556 = (unsigned long )reply_item;
#line 782
      __cil_tmp557 = __cil_tmp556 + 40;
#line 782
      mem_670 = (int *)__cil_tmp557;
#line 782
      *mem_670 = (int )tmp___6;
#line 783
      __cil_tmp558 = & user_msg;
#line 783
      __cil_tmp559 = (void *)0;
#line 783
      *__cil_tmp558 = (char const   *)__cil_tmp559;
#line 784
      __cil_tmp560 = (unsigned long )reply_item;
#line 784
      __cil_tmp561 = __cil_tmp560 + 312;
#line 784
      mem_671 = (struct value_pair **)__cil_tmp561;
#line 784
      __cil_tmp562 = *mem_671;
#line 784
      reply_item = pairfind(__cil_tmp562, 18);
      }
    }
    while_6_break: /* CIL Label */ ;
    }
  } else {

  }
  }
  {
#line 788
  __cil_tmp563 = (unsigned long )request;
#line 788
  __cil_tmp564 = __cil_tmp563 + 24;
#line 788
  mem_672 = (RADIUS_PACKET **)__cil_tmp564;
#line 788
  __cil_tmp565 = *mem_672;
#line 788
  __cil_tmp566 = (unsigned long )__cil_tmp565;
#line 788
  __cil_tmp567 = __cil_tmp566 + 20;
#line 788
  mem_673 = (int *)__cil_tmp567;
#line 788
  *mem_673 = 2;
#line 790
  rad_authlog("Login OK", request, 1);
  }
#line 791
  if (exec_program) {
#line 791
    if (! exec_wait) {
      {
#line 795
      __cil_tmp568 = (char const   *)exec_program;
#line 795
      __cil_tmp569 = (void *)0;
#line 795
      __cil_tmp570 = (char const   **)__cil_tmp569;
#line 795
      radius_exec_program(__cil_tmp568, request, exec_wait, __cil_tmp570);
      }
    } else {

    }
  } else {

  }
#line 798
  if (exec_program) {
    {
#line 799
    __cil_tmp571 = (void *)exec_program;
#line 799
    free(__cil_tmp571);
    }
  } else {

  }
#line 800
  return (2);
}
}
#line 815 "auth.c"
VALUE_PAIR *rad_getpass(REQUEST *request ) 
{ VALUE_PAIR *auth_item ;
  size_t tmp ;
  unsigned long __cil_tmp4 ;
  unsigned long __cil_tmp5 ;
  unsigned long __cil_tmp6 ;
  unsigned long __cil_tmp7 ;
  int __cil_tmp8 ;
  void *__cil_tmp9 ;
  unsigned long __cil_tmp10 ;
  unsigned long __cil_tmp11 ;
  RADIUS_PACKET *__cil_tmp12 ;
  unsigned long __cil_tmp13 ;
  unsigned long __cil_tmp14 ;
  VALUE_PAIR *__cil_tmp15 ;
  void *__cil_tmp16 ;
  unsigned long __cil_tmp17 ;
  unsigned long __cil_tmp18 ;
  void *__cil_tmp19 ;
  unsigned long __cil_tmp20 ;
  unsigned long __cil_tmp21 ;
  unsigned long __cil_tmp22 ;
  RADIUS_PACKET *__cil_tmp23 ;
  unsigned long __cil_tmp24 ;
  unsigned long __cil_tmp25 ;
  unsigned long __cil_tmp26 ;
  uint32_t __cil_tmp27 ;
  unsigned long __cil_tmp28 ;
  unsigned long __cil_tmp29 ;
  unsigned long __cil_tmp30 ;
  unsigned long __cil_tmp31 ;
  uint8_t *__cil_tmp32 ;
  char *__cil_tmp33 ;
  unsigned long __cil_tmp34 ;
  unsigned long __cil_tmp35 ;
  int __cil_tmp36 ;
  unsigned long __cil_tmp37 ;
  unsigned long __cil_tmp38 ;
  unsigned long __cil_tmp39 ;
  unsigned long __cil_tmp40 ;
  char *__cil_tmp41 ;
  char const   *__cil_tmp42 ;
  unsigned long __cil_tmp43 ;
  unsigned long __cil_tmp44 ;
  unsigned long __cil_tmp45 ;
  unsigned long __cil_tmp46 ;
  RADIUS_PACKET *__cil_tmp47 ;
  unsigned long __cil_tmp48 ;
  unsigned long __cil_tmp49 ;
  uint8_t *__cil_tmp50 ;
  char *__cil_tmp51 ;
  char const   *__cil_tmp52 ;
  unsigned long __cil_tmp53 ;
  unsigned long __cil_tmp54 ;
  unsigned long __cil_tmp55 ;
  unsigned long __cil_tmp56 ;
  unsigned long __cil_tmp57 ;
  unsigned long __cil_tmp58 ;
  uint8_t *__cil_tmp59 ;
  char *__cil_tmp60 ;
  char const   *__cil_tmp61 ;
  unsigned long __cil_tmp62 ;
  unsigned long __cil_tmp63 ;
  VALUE_PAIR **mem_64 ;
  int *mem_65 ;
  RADIUS_PACKET **mem_66 ;
  VALUE_PAIR **mem_67 ;
  VALUE_PAIR **mem_68 ;
  RADIUS_PACKET **mem_69 ;
  uint32_t *mem_70 ;
  int *mem_71 ;
  RADIUS_PACKET **mem_72 ;
  uint32_t *mem_73 ;
  int *mem_74 ;

  {
#line 821
  __cil_tmp4 = (unsigned long )request;
#line 821
  __cil_tmp5 = __cil_tmp4 + 56;
#line 821
  mem_64 = (VALUE_PAIR **)__cil_tmp5;
#line 821
  auth_item = *mem_64;
#line 822
  if (auth_item) {
    {
#line 827
    __cil_tmp6 = (unsigned long )auth_item;
#line 827
    __cil_tmp7 = __cil_tmp6 + 32;
#line 827
    mem_65 = (int *)__cil_tmp7;
#line 827
    __cil_tmp8 = *mem_65;
#line 827
    if (__cil_tmp8 != 2) {
      {
#line 828
      __cil_tmp9 = (void *)0;
#line 828
      return ((VALUE_PAIR *)__cil_tmp9);
      }
    } else {

    }
    }
  } else {
    {
#line 834
    __cil_tmp10 = (unsigned long )request;
#line 834
    __cil_tmp11 = __cil_tmp10 + 8;
#line 834
    mem_66 = (RADIUS_PACKET **)__cil_tmp11;
#line 834
    __cil_tmp12 = *mem_66;
#line 834
    __cil_tmp13 = (unsigned long )__cil_tmp12;
#line 834
    __cil_tmp14 = __cil_tmp13 + 72;
#line 834
    mem_67 = (VALUE_PAIR **)__cil_tmp14;
#line 834
    __cil_tmp15 = *mem_67;
#line 834
    auth_item = pairfind(__cil_tmp15, 2);
    }
#line 835
    if (! auth_item) {
      {
#line 836
      __cil_tmp16 = (void *)0;
#line 836
      return ((VALUE_PAIR *)__cil_tmp16);
      }
    } else {

    }
#line 842
    __cil_tmp17 = (unsigned long )request;
#line 842
    __cil_tmp18 = __cil_tmp17 + 56;
#line 842
    mem_68 = (VALUE_PAIR **)__cil_tmp18;
#line 842
    *mem_68 = auth_item;
  }
  {
#line 850
  __cil_tmp19 = (void *)0;
#line 850
  __cil_tmp20 = (unsigned long )__cil_tmp19;
#line 850
  __cil_tmp21 = (unsigned long )request;
#line 850
  __cil_tmp22 = __cil_tmp21 + 16;
#line 850
  mem_69 = (RADIUS_PACKET **)__cil_tmp22;
#line 850
  __cil_tmp23 = *mem_69;
#line 850
  __cil_tmp24 = (unsigned long )__cil_tmp23;
#line 850
  if (__cil_tmp24 != __cil_tmp20) {
#line 852
    return (auth_item);
  } else {
    {
#line 850
    __cil_tmp25 = (unsigned long )auth_item;
#line 850
    __cil_tmp26 = __cil_tmp25 + 44;
#line 850
    mem_70 = (uint32_t *)__cil_tmp26;
#line 850
    __cil_tmp27 = *mem_70;
#line 850
    if (__cil_tmp27 == 1U) {
#line 852
      return (auth_item);
    } else {

    }
    }
  }
  }
  {
#line 858
  __cil_tmp28 = 0 * 1UL;
#line 858
  __cil_tmp29 = 56 + __cil_tmp28;
#line 858
  __cil_tmp30 = (unsigned long )auth_item;
#line 858
  __cil_tmp31 = __cil_tmp30 + __cil_tmp29;
#line 858
  __cil_tmp32 = (uint8_t *)__cil_tmp31;
#line 858
  __cil_tmp33 = (char *)__cil_tmp32;
#line 858
  __cil_tmp34 = (unsigned long )auth_item;
#line 858
  __cil_tmp35 = __cil_tmp34 + 40;
#line 858
  mem_71 = (int *)__cil_tmp35;
#line 858
  __cil_tmp36 = *mem_71;
#line 858
  __cil_tmp37 = 0 * 1UL;
#line 858
  __cil_tmp38 = 64 + __cil_tmp37;
#line 858
  __cil_tmp39 = (unsigned long )request;
#line 858
  __cil_tmp40 = __cil_tmp39 + __cil_tmp38;
#line 858
  __cil_tmp41 = (char *)__cil_tmp40;
#line 858
  __cil_tmp42 = (char const   *)__cil_tmp41;
#line 858
  __cil_tmp43 = 0 * 1UL;
#line 858
  __cil_tmp44 = 24 + __cil_tmp43;
#line 858
  __cil_tmp45 = (unsigned long )request;
#line 858
  __cil_tmp46 = __cil_tmp45 + 8;
#line 858
  mem_72 = (RADIUS_PACKET **)__cil_tmp46;
#line 858
  __cil_tmp47 = *mem_72;
#line 858
  __cil_tmp48 = (unsigned long )__cil_tmp47;
#line 858
  __cil_tmp49 = __cil_tmp48 + __cil_tmp44;
#line 858
  __cil_tmp50 = (uint8_t *)__cil_tmp49;
#line 858
  __cil_tmp51 = (char *)__cil_tmp50;
#line 858
  __cil_tmp52 = (char const   *)__cil_tmp51;
#line 858
  rad_pwdecode(__cil_tmp33, __cil_tmp36, __cil_tmp42, __cil_tmp52);
#line 866
  __cil_tmp53 = (unsigned long )auth_item;
#line 866
  __cil_tmp54 = __cil_tmp53 + 44;
#line 866
  mem_73 = (uint32_t *)__cil_tmp54;
#line 866
  *mem_73 = 1U;
#line 869
  __cil_tmp55 = 0 * 1UL;
#line 869
  __cil_tmp56 = 56 + __cil_tmp55;
#line 869
  __cil_tmp57 = (unsigned long )auth_item;
#line 869
  __cil_tmp58 = __cil_tmp57 + __cil_tmp56;
#line 869
  __cil_tmp59 = (uint8_t *)__cil_tmp58;
#line 869
  __cil_tmp60 = (char *)__cil_tmp59;
#line 869
  __cil_tmp61 = (char const   *)__cil_tmp60;
#line 869
  tmp = strlen(__cil_tmp61);
#line 869
  __cil_tmp62 = (unsigned long )auth_item;
#line 869
  __cil_tmp63 = __cil_tmp62 + 40;
#line 869
  mem_74 = (int *)__cil_tmp63;
#line 869
  *mem_74 = (int )tmp;
  }
#line 871
  return (auth_item);
}
}
