// SPDX-FileCopyrightText: 2000 Jeff Carneal <jeff@apex.net>
// SPDX-FileCopyrightText: 2000 Miquel van Smoorenburg <miquels@cistron.nl>
// SPDX-FileCopyrightText: 2000 The FreeRADIUS server project
//
// SPDX-License-Identifier: GPL-2.0-or-later

/* Generated by CIL v. 1.3.7 */
/* print_CIL_Input is true */

#line 31 "/usr/include/bits/types.h"
typedef unsigned char __u_char;
#line 32 "/usr/include/bits/types.h"
typedef unsigned short __u_short;
#line 149 "/usr/include/bits/types.h"
typedef long __time_t;
#line 35 "/usr/include/sys/types.h"
typedef __u_char u_char;
#line 36 "/usr/include/sys/types.h"
typedef __u_short u_short;
#line 76 "/usr/include/time.h"
typedef __time_t time_t;
#line 211 "/usr/lib/gcc/x86_64-linux-gnu/4.4.1/include/stddef.h"
typedef unsigned long size_t;
#line 50 "/usr/include/bits/pthreadtypes.h"
typedef unsigned long pthread_t;
#line 49 "/usr/include/stdint.h"
typedef unsigned char uint8_t;
#line 52 "/usr/include/stdint.h"
typedef unsigned int uint32_t;
#line 84 "../include/libradius.h"
struct dict_value {
   char name[32] ;
   char attrname[32] ;
   int attr ;
   int value ;
   struct dict_value *next ;
};
#line 84 "../include/libradius.h"
typedef struct dict_value DICT_VALUE;
#line 99 "../include/libradius.h"
struct value_pair {
   char name[32] ;
   int attribute ;
   int type ;
   int length ;
   uint32_t lvalue ;
   int operator ;
   int addport ;
   uint8_t strvalue[254] ;
   struct value_pair *next ;
};
#line 99 "../include/libradius.h"
typedef struct value_pair VALUE_PAIR;
#line 120 "../include/libradius.h"
struct radius_packet {
   int sockfd ;
   uint32_t src_ipaddr ;
   uint32_t dst_ipaddr ;
   u_short src_port ;
   u_short dst_port ;
   int id ;
   int code ;
   uint8_t vector[16] ;
   time_t timestamp ;
   int verified ;
   uint8_t *data ;
   int data_len ;
   VALUE_PAIR *vps ;
};
#line 120 "../include/libradius.h"
typedef struct radius_packet RADIUS_PACKET;
#line 21 "../include/radiusd.h"
typedef pthread_t child_pid_t;
#line 34 "../include/radiusd.h"
struct auth_req {
   uint32_t magic ;
   RADIUS_PACKET *packet ;
   RADIUS_PACKET *proxy ;
   RADIUS_PACKET *reply ;
   RADIUS_PACKET *proxy_reply ;
   VALUE_PAIR *config_items ;
   VALUE_PAIR *username ;
   VALUE_PAIR *password ;
   char secret[32] ;
   child_pid_t child_pid ;
   time_t timestamp ;
   int number ;
   char proxysecret[32] ;
   int proxy_is_replicate ;
   int proxy_try_count ;
   time_t proxy_next_try ;
   int simul_max ;
   int simul_count ;
   int simul_mpp ;
   int finished ;
   void **container ;
};
#line 34 "../include/radiusd.h"
typedef struct auth_req REQUEST;
#line 363 "/usr/include/stdio.h"
extern  __attribute__((__nothrow__)) int ( /* format attribute */  snprintf)(char * __restrict  __s ,
                                                                             size_t __maxlen ,
                                                                             char const   * __restrict  __format 
                                                                             , ...) ;
#line 155 "../include/libradius.h"
extern DICT_VALUE *dict_valbyattr(int attr , int val ) ;
#line 179
extern int rad_pwdecode(char *encpw , int len , char const   *secret , char const   *vector ) ;
#line 180
extern int rad_chap_encode(RADIUS_PACKET *packet , char *output , int id , VALUE_PAIR *password ) ;
#line 187
extern VALUE_PAIR *pairfind(VALUE_PAIR * , int  ) ;
#line 488 "/usr/include/stdlib.h"
extern  __attribute__((__nothrow__)) void free(void *__ptr ) ;
#line 67 "/usr/include/string.h"
extern  __attribute__((__nothrow__)) int memcmp(void const   *__s1 , void const   *__s2 ,
                                                size_t __n )  __attribute__((__pure__,
__nonnull__(1,2))) ;
#line 142
extern  __attribute__((__nothrow__)) int strcmp(char const   *__s1 , char const   *__s2 )  __attribute__((__pure__,
__nonnull__(1,2))) ;
#line 397
extern  __attribute__((__nothrow__)) size_t strlen(char const   *__s )  __attribute__((__pure__,
__nonnull__(1))) ;
#line 33 "/usr/include/crypt.h"
extern  __attribute__((__nothrow__)) char *crypt(char const   *__key , char const   *__salt )  __attribute__((__nonnull__(1,2))) ;
#line 158 "../include/radiusd.h"
extern int debug_flag ;
#line 229
extern char const   *nas_name2(RADIUS_PACKET *r ) ;
#line 237
extern int ( /* format attribute */  radlog)(int  , char const   *  , ...) ;
#line 242
extern int ( /* format attribute */  log_debug)(char const   *  , ...) ;
#line 253
char *auth_name(char *buf , size_t buflen , REQUEST *request , int do_cli ) ;
#line 254
int rad_authenticate(REQUEST *request ) ;
#line 255
VALUE_PAIR *rad_getpass(REQUEST *request ) ;
#line 256
int rad_check_password(REQUEST *request ) ;
#line 51 "../include/modules.h"
extern int module_authenticate(int type , REQUEST *request ) ;
#line 30 "auth.c"
char *auth_name(char *buf , size_t buflen , REQUEST *request , int do_cli ) 
{ VALUE_PAIR *cli ;
  VALUE_PAIR *pair ;
  int port ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  unsigned long __cil_tmp11 ;
  unsigned long __cil_tmp12 ;
  RADIUS_PACKET *__cil_tmp13 ;
  unsigned long __cil_tmp14 ;
  unsigned long __cil_tmp15 ;
  VALUE_PAIR *__cil_tmp16 ;
  void *__cil_tmp17 ;
  unsigned long __cil_tmp18 ;
  unsigned long __cil_tmp19 ;
  unsigned long __cil_tmp20 ;
  unsigned long __cil_tmp21 ;
  RADIUS_PACKET *__cil_tmp22 ;
  unsigned long __cil_tmp23 ;
  unsigned long __cil_tmp24 ;
  VALUE_PAIR *__cil_tmp25 ;
  void *__cil_tmp26 ;
  unsigned long __cil_tmp27 ;
  unsigned long __cil_tmp28 ;
  unsigned long __cil_tmp29 ;
  unsigned long __cil_tmp30 ;
  uint32_t __cil_tmp31 ;
  unsigned long __cil_tmp32 ;
  unsigned long __cil_tmp33 ;
  unsigned long __cil_tmp34 ;
  unsigned long __cil_tmp35 ;
  uint8_t *__cil_tmp36 ;
  char *__cil_tmp37 ;
  unsigned long __cil_tmp38 ;
  unsigned long __cil_tmp39 ;
  RADIUS_PACKET *__cil_tmp40 ;
  char * __restrict  __cil_tmp41 ;
  char const   * __restrict  __cil_tmp42 ;
  RADIUS_PACKET **mem_43 ;
  VALUE_PAIR **mem_44 ;
  RADIUS_PACKET **mem_45 ;
  VALUE_PAIR **mem_46 ;
  uint32_t *mem_47 ;
  RADIUS_PACKET **mem_48 ;

  {
  {
#line 33
  port = 0;
#line 35
  __cil_tmp11 = (unsigned long )request;
#line 35
  __cil_tmp12 = __cil_tmp11 + 8;
#line 35
  mem_43 = (RADIUS_PACKET **)__cil_tmp12;
#line 35
  __cil_tmp13 = *mem_43;
#line 35
  __cil_tmp14 = (unsigned long )__cil_tmp13;
#line 35
  __cil_tmp15 = __cil_tmp14 + 72;
#line 35
  mem_44 = (VALUE_PAIR **)__cil_tmp15;
#line 35
  __cil_tmp16 = *mem_44;
#line 35
  cli = pairfind(__cil_tmp16, 31);
  }
  {
#line 35
  __cil_tmp17 = (void *)0;
#line 35
  __cil_tmp18 = (unsigned long )__cil_tmp17;
#line 35
  __cil_tmp19 = (unsigned long )cli;
#line 35
  if (__cil_tmp19 == __cil_tmp18) {
#line 36
    do_cli = 0;
  } else {

  }
  }
  {
#line 37
  __cil_tmp20 = (unsigned long )request;
#line 37
  __cil_tmp21 = __cil_tmp20 + 8;
#line 37
  mem_45 = (RADIUS_PACKET **)__cil_tmp21;
#line 37
  __cil_tmp22 = *mem_45;
#line 37
  __cil_tmp23 = (unsigned long )__cil_tmp22;
#line 37
  __cil_tmp24 = __cil_tmp23 + 72;
#line 37
  mem_46 = (VALUE_PAIR **)__cil_tmp24;
#line 37
  __cil_tmp25 = *mem_46;
#line 37
  pair = pairfind(__cil_tmp25, 5);
  }
  {
#line 37
  __cil_tmp26 = (void *)0;
#line 37
  __cil_tmp27 = (unsigned long )__cil_tmp26;
#line 37
  __cil_tmp28 = (unsigned long )pair;
#line 37
  if (__cil_tmp28 != __cil_tmp27) {
#line 38
    __cil_tmp29 = (unsigned long )pair;
#line 38
    __cil_tmp30 = __cil_tmp29 + 44;
#line 38
    mem_47 = (uint32_t *)__cil_tmp30;
#line 38
    __cil_tmp31 = *mem_47;
#line 38
    port = (int )__cil_tmp31;
  } else {

  }
  }
#line 40
  if (do_cli) {
#line 40
    __cil_tmp32 = 0 * 1UL;
#line 40
    __cil_tmp33 = 56 + __cil_tmp32;
#line 40
    __cil_tmp34 = (unsigned long )cli;
#line 40
    __cil_tmp35 = __cil_tmp34 + __cil_tmp33;
#line 40
    __cil_tmp36 = (uint8_t *)__cil_tmp35;
#line 40
    __cil_tmp37 = (char *)__cil_tmp36;
#line 40
    tmp = (char const   *)__cil_tmp37;
  } else {
#line 40
    tmp = "";
  }
#line 40
  if (do_cli) {
#line 40
    tmp___0 = " cli ";
  } else {
#line 40
    tmp___0 = "";
  }
  {
#line 40
  __cil_tmp38 = (unsigned long )request;
#line 40
  __cil_tmp39 = __cil_tmp38 + 8;
#line 40
  mem_48 = (RADIUS_PACKET **)__cil_tmp39;
#line 40
  __cil_tmp40 = *mem_48;
#line 40
  tmp___1 = nas_name2(__cil_tmp40);
#line 40
  __cil_tmp41 = (char * __restrict  )buf;
#line 40
  __cil_tmp42 = (char const   * __restrict  )"from nas %.128s port %d%s%.128s";
#line 40
  snprintf(__cil_tmp41, buflen, __cil_tmp42, tmp___1, port, tmp___0, tmp);
  }
#line 44
  return (buf);
}
}
#line 168 "auth.c"
int rad_check_password(REQUEST *request ) 
{ VALUE_PAIR *auth_type_pair ;
  VALUE_PAIR *cur_config_item ;
  VALUE_PAIR *password_pair ;
  VALUE_PAIR *auth_item ;
  char string[254] ;
  int auth_type ;
  int result ;
  int auth_type_count ;
  int tmp ;
  int tmp___0 ;
  char *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  DICT_VALUE *tmp___5 ;
  unsigned long __cil_tmp17 ;
  unsigned long __cil_tmp18 ;
  void *__cil_tmp19 ;
  unsigned long __cil_tmp20 ;
  unsigned long __cil_tmp21 ;
  unsigned long __cil_tmp22 ;
  unsigned long __cil_tmp23 ;
  uint32_t __cil_tmp24 ;
  unsigned long __cil_tmp25 ;
  unsigned long __cil_tmp26 ;
  unsigned long __cil_tmp27 ;
  unsigned long __cil_tmp28 ;
  uint8_t *__cil_tmp29 ;
  unsigned long __cil_tmp30 ;
  unsigned long __cil_tmp31 ;
  unsigned long __cil_tmp32 ;
  unsigned long __cil_tmp33 ;
  unsigned long __cil_tmp34 ;
  unsigned long __cil_tmp35 ;
  VALUE_PAIR *__cil_tmp36 ;
  unsigned long __cil_tmp37 ;
  unsigned long __cil_tmp38 ;
  uint8_t *__cil_tmp39 ;
  unsigned long __cil_tmp40 ;
  unsigned long __cil_tmp41 ;
  unsigned long __cil_tmp42 ;
  unsigned long __cil_tmp43 ;
  void *__cil_tmp44 ;
  unsigned long __cil_tmp45 ;
  unsigned long __cil_tmp46 ;
  unsigned long __cil_tmp47 ;
  unsigned long __cil_tmp48 ;
  VALUE_PAIR *__cil_tmp49 ;
  void *__cil_tmp50 ;
  unsigned long __cil_tmp51 ;
  unsigned long __cil_tmp52 ;
  unsigned long __cil_tmp53 ;
  unsigned long __cil_tmp54 ;
  VALUE_PAIR *__cil_tmp55 ;
  unsigned long __cil_tmp56 ;
  unsigned long __cil_tmp57 ;
  unsigned long __cil_tmp58 ;
  unsigned long __cil_tmp59 ;
  uint8_t *__cil_tmp60 ;
  char *__cil_tmp61 ;
  char const   *__cil_tmp62 ;
  unsigned long __cil_tmp63 ;
  unsigned long __cil_tmp64 ;
  unsigned long __cil_tmp65 ;
  unsigned long __cil_tmp66 ;
  uint8_t *__cil_tmp67 ;
  char *__cil_tmp68 ;
  char const   *__cil_tmp69 ;
  void *__cil_tmp70 ;
  unsigned long __cil_tmp71 ;
  unsigned long __cil_tmp72 ;
  unsigned long __cil_tmp73 ;
  unsigned long __cil_tmp74 ;
  unsigned long __cil_tmp75 ;
  unsigned long __cil_tmp76 ;
  unsigned long __cil_tmp77 ;
  unsigned long __cil_tmp78 ;
  unsigned long __cil_tmp79 ;
  unsigned long __cil_tmp80 ;
  uint8_t *__cil_tmp81 ;
  char *__cil_tmp82 ;
  char const   *__cil_tmp83 ;
  unsigned long __cil_tmp84 ;
  unsigned long __cil_tmp85 ;
  unsigned long __cil_tmp86 ;
  unsigned long __cil_tmp87 ;
  uint8_t *__cil_tmp88 ;
  char *__cil_tmp89 ;
  char const   *__cil_tmp90 ;
  unsigned long __cil_tmp91 ;
  unsigned long __cil_tmp92 ;
  unsigned long __cil_tmp93 ;
  unsigned long __cil_tmp94 ;
  uint8_t *__cil_tmp95 ;
  char *__cil_tmp96 ;
  char const   *__cil_tmp97 ;
  char const   *__cil_tmp98 ;
  unsigned long __cil_tmp99 ;
  unsigned long __cil_tmp100 ;
  int __cil_tmp101 ;
  void *__cil_tmp102 ;
  unsigned long __cil_tmp103 ;
  unsigned long __cil_tmp104 ;
  unsigned long __cil_tmp105 ;
  unsigned long __cil_tmp106 ;
  unsigned long __cil_tmp107 ;
  unsigned long __cil_tmp108 ;
  uint8_t *__cil_tmp109 ;
  char *__cil_tmp110 ;
  char const   *__cil_tmp111 ;
  unsigned long __cil_tmp112 ;
  unsigned long __cil_tmp113 ;
  unsigned long __cil_tmp114 ;
  unsigned long __cil_tmp115 ;
  uint8_t *__cil_tmp116 ;
  char *__cil_tmp117 ;
  char const   *__cil_tmp118 ;
  void *__cil_tmp119 ;
  unsigned long __cil_tmp120 ;
  unsigned long __cil_tmp121 ;
  unsigned long __cil_tmp122 ;
  unsigned long __cil_tmp123 ;
  RADIUS_PACKET *__cil_tmp124 ;
  unsigned long __cil_tmp125 ;
  unsigned long __cil_tmp126 ;
  char *__cil_tmp127 ;
  unsigned long __cil_tmp128 ;
  unsigned long __cil_tmp129 ;
  unsigned long __cil_tmp130 ;
  unsigned long __cil_tmp131 ;
  uint8_t __cil_tmp132 ;
  int __cil_tmp133 ;
  unsigned long __cil_tmp134 ;
  unsigned long __cil_tmp135 ;
  char *__cil_tmp136 ;
  char *__cil_tmp137 ;
  void const   *__cil_tmp138 ;
  unsigned long __cil_tmp139 ;
  unsigned long __cil_tmp140 ;
  unsigned long __cil_tmp141 ;
  unsigned long __cil_tmp142 ;
  uint8_t *__cil_tmp143 ;
  uint8_t *__cil_tmp144 ;
  void const   *__cil_tmp145 ;
  unsigned long __cil_tmp146 ;
  unsigned long __cil_tmp147 ;
  unsigned long __cil_tmp148 ;
  unsigned long __cil_tmp149 ;
  char *__cil_tmp150 ;
  VALUE_PAIR **mem_151 ;
  uint32_t *mem_152 ;
  struct value_pair **mem_153 ;
  VALUE_PAIR **mem_154 ;
  RADIUS_PACKET **mem_155 ;
  VALUE_PAIR **mem_156 ;
  VALUE_PAIR **mem_157 ;
  VALUE_PAIR **mem_158 ;
  int *mem_159 ;
  RADIUS_PACKET **mem_160 ;
  uint8_t *mem_161 ;

  {
#line 175
  auth_type = -1;
#line 177
  auth_type_count = 0;
#line 178
  result = 0;
#line 185
  __cil_tmp17 = (unsigned long )request;
#line 185
  __cil_tmp18 = __cil_tmp17 + 40;
#line 185
  mem_151 = (VALUE_PAIR **)__cil_tmp18;
#line 185
  cur_config_item = *mem_151;
  {
#line 186
  while (1) {
    while_0_continue: /* CIL Label */ ;
    {
#line 186
    auth_type_pair = pairfind(cur_config_item, 1000);
    }
    {
#line 186
    __cil_tmp19 = (void *)0;
#line 186
    __cil_tmp20 = (unsigned long )__cil_tmp19;
#line 186
    __cil_tmp21 = (unsigned long )auth_type_pair;
#line 186
    if (__cil_tmp21 != __cil_tmp20) {

    } else {
      goto while_0_break;
    }
    }
#line 187
    __cil_tmp22 = (unsigned long )auth_type_pair;
#line 187
    __cil_tmp23 = __cil_tmp22 + 44;
#line 187
    mem_152 = (uint32_t *)__cil_tmp23;
#line 187
    __cil_tmp24 = *mem_152;
#line 187
    auth_type = (int )__cil_tmp24;
#line 188
    auth_type_count = auth_type_count + 1;
#line 190
    if (debug_flag > 1) {
      {
#line 190
      __cil_tmp25 = 0 * 1UL;
#line 190
      __cil_tmp26 = 56 + __cil_tmp25;
#line 190
      __cil_tmp27 = (unsigned long )auth_type_pair;
#line 190
      __cil_tmp28 = __cil_tmp27 + __cil_tmp26;
#line 190
      __cil_tmp29 = (uint8_t *)__cil_tmp28;
#line 190
      log_debug("  rad_check_password:  Found auth-type %s", __cil_tmp29);
      }
    } else {

    }
#line 192
    __cil_tmp30 = (unsigned long )auth_type_pair;
#line 192
    __cil_tmp31 = __cil_tmp30 + 312;
#line 192
    mem_153 = (struct value_pair **)__cil_tmp31;
#line 192
    cur_config_item = *mem_153;
#line 194
    if (auth_type == 4) {
#line 195
      if (debug_flag > 1) {
        {
#line 195
        log_debug("  rad_check_password: Auth-Type = Reject, rejecting user");
        }
      } else {

      }
#line 196
      return (-2);
    } else {

    }
  }
  while_0_break: /* CIL Label */ ;
  }
#line 200
  if (auth_type_count > 1) {
#line 200
    if (debug_flag) {
      {
#line 201
      __cil_tmp32 = 0 * 1UL;
#line 201
      __cil_tmp33 = 56 + __cil_tmp32;
#line 201
      __cil_tmp34 = (unsigned long )request;
#line 201
      __cil_tmp35 = __cil_tmp34 + 48;
#line 201
      mem_154 = (VALUE_PAIR **)__cil_tmp35;
#line 201
      __cil_tmp36 = *mem_154;
#line 201
      __cil_tmp37 = (unsigned long )__cil_tmp36;
#line 201
      __cil_tmp38 = __cil_tmp37 + __cil_tmp33;
#line 201
      __cil_tmp39 = (uint8_t *)__cil_tmp38;
#line 201
      radlog(4, "Warning:  Found %d auth-types on request for user \'%s\'", auth_type_count,
             __cil_tmp39);
      }
    } else {

    }
  } else {

  }
#line 211
  if (auth_type == 254) {
    goto _L;
  } else {
    {
#line 211
    __cil_tmp40 = (unsigned long )request;
#line 211
    __cil_tmp41 = __cil_tmp40 + 16;
    {
#line 211
    mem_155 = (RADIUS_PACKET **)__cil_tmp41;
#line 211
    if (*mem_155) {
      _L: /* CIL Label */ 
#line 212
      if (debug_flag > 1) {
        {
#line 212
        log_debug("  rad_check_password: Auth-Type = Accept, accepting the user");
        }
      } else {

      }
#line 213
      return (0);
    } else {

    }
    }
    }
  }
#line 220
  __cil_tmp42 = (unsigned long )request;
#line 220
  __cil_tmp43 = __cil_tmp42 + 56;
#line 220
  mem_156 = (VALUE_PAIR **)__cil_tmp43;
#line 220
  auth_item = *mem_156;
  {
#line 221
  __cil_tmp44 = (void *)0;
#line 221
  __cil_tmp45 = (unsigned long )__cil_tmp44;
#line 221
  __cil_tmp46 = (unsigned long )auth_item;
#line 221
  if (__cil_tmp46 == __cil_tmp45) {
#line 222
    if (debug_flag > 1) {
      {
#line 222
      log_debug("  auth: No password in the request");
      }
    } else {

    }
#line 223
    return (-1);
  } else {

  }
  }
  {
#line 229
  __cil_tmp47 = (unsigned long )request;
#line 229
  __cil_tmp48 = __cil_tmp47 + 40;
#line 229
  mem_157 = (VALUE_PAIR **)__cil_tmp48;
#line 229
  __cil_tmp49 = *mem_157;
#line 229
  password_pair = pairfind(__cil_tmp49, 1006);
  }
  {
#line 229
  __cil_tmp50 = (void *)0;
#line 229
  __cil_tmp51 = (unsigned long )__cil_tmp50;
#line 229
  __cil_tmp52 = (unsigned long )password_pair;
#line 229
  if (__cil_tmp52 != __cil_tmp51) {
#line 230
    auth_type = 3;
  } else {
    {
#line 232
    __cil_tmp53 = (unsigned long )request;
#line 232
    __cil_tmp54 = __cil_tmp53 + 40;
#line 232
    mem_158 = (VALUE_PAIR **)__cil_tmp54;
#line 232
    __cil_tmp55 = *mem_158;
#line 232
    password_pair = pairfind(__cil_tmp55, 2);
    }
  }
  }
#line 239
  if (auth_type < 0) {
#line 240
    if (password_pair) {
      {
#line 240
      __cil_tmp56 = 0 * 1UL;
#line 240
      __cil_tmp57 = 56 + __cil_tmp56;
#line 240
      __cil_tmp58 = (unsigned long )password_pair;
#line 240
      __cil_tmp59 = __cil_tmp58 + __cil_tmp57;
#line 240
      __cil_tmp60 = (uint8_t *)__cil_tmp59;
#line 240
      __cil_tmp61 = (char *)__cil_tmp60;
#line 240
      __cil_tmp62 = (char const   *)__cil_tmp61;
#line 240
      tmp___0 = strcmp(__cil_tmp62, "UNIX");
      }
#line 240
      if (tmp___0) {
        goto _L___0;
      } else {
#line 242
        auth_type = 1;
      }
    } else {
      _L___0: /* CIL Label */ 
#line 243
      if (password_pair) {
        {
#line 243
        __cil_tmp63 = 0 * 1UL;
#line 243
        __cil_tmp64 = 56 + __cil_tmp63;
#line 243
        __cil_tmp65 = (unsigned long )password_pair;
#line 243
        __cil_tmp66 = __cil_tmp65 + __cil_tmp64;
#line 243
        __cil_tmp67 = (uint8_t *)__cil_tmp66;
#line 243
        __cil_tmp68 = (char *)__cil_tmp67;
#line 243
        __cil_tmp69 = (char const   *)__cil_tmp68;
#line 243
        tmp = strcmp(__cil_tmp69, "PAM");
        }
#line 243
        if (tmp) {
#line 247
          auth_type = 0;
        } else {
#line 245
          auth_type = 253;
        }
      } else {
#line 247
        auth_type = 0;
      }
    }
  } else {

  }
#line 251
  if (auth_type == 3) {
    goto switch_1_3;
  } else {
#line 262
    if (auth_type == 0) {
      goto switch_1_0;
    } else {
      {
      goto switch_1_default;
#line 250
      if (0) {
        switch_1_3: /* CIL Label */ 
#line 252
        if (debug_flag > 1) {
          {
#line 252
          log_debug("  auth: Crypt");
          }
        } else {

        }
        {
#line 253
        __cil_tmp70 = (void *)0;
#line 253
        __cil_tmp71 = (unsigned long )__cil_tmp70;
#line 253
        __cil_tmp72 = (unsigned long )password_pair;
#line 253
        if (__cil_tmp72 == __cil_tmp71) {
          {
#line 254
          __cil_tmp73 = 0 * 1UL;
#line 254
          __cil_tmp74 = 56 + __cil_tmp73;
#line 254
          __cil_tmp75 = (unsigned long )auth_item;
#line 254
          __cil_tmp76 = __cil_tmp75 + __cil_tmp74;
#line 254
          if ((uint8_t *)__cil_tmp76) {
#line 254
            result = -1;
          } else {
#line 254
            result = 0;
          }
          }
          goto switch_1_break;
        } else {

        }
        }
        {
#line 257
        __cil_tmp77 = 0 * 1UL;
#line 257
        __cil_tmp78 = 56 + __cil_tmp77;
#line 257
        __cil_tmp79 = (unsigned long )auth_item;
#line 257
        __cil_tmp80 = __cil_tmp79 + __cil_tmp78;
#line 257
        __cil_tmp81 = (uint8_t *)__cil_tmp80;
#line 257
        __cil_tmp82 = (char *)__cil_tmp81;
#line 257
        __cil_tmp83 = (char const   *)__cil_tmp82;
#line 257
        __cil_tmp84 = 0 * 1UL;
#line 257
        __cil_tmp85 = 56 + __cil_tmp84;
#line 257
        __cil_tmp86 = (unsigned long )password_pair;
#line 257
        __cil_tmp87 = __cil_tmp86 + __cil_tmp85;
#line 257
        __cil_tmp88 = (uint8_t *)__cil_tmp87;
#line 257
        __cil_tmp89 = (char *)__cil_tmp88;
#line 257
        __cil_tmp90 = (char const   *)__cil_tmp89;
#line 257
        tmp___1 = crypt(__cil_tmp83, __cil_tmp90);
#line 257
        __cil_tmp91 = 0 * 1UL;
#line 257
        __cil_tmp92 = 56 + __cil_tmp91;
#line 257
        __cil_tmp93 = (unsigned long )password_pair;
#line 257
        __cil_tmp94 = __cil_tmp93 + __cil_tmp92;
#line 257
        __cil_tmp95 = (uint8_t *)__cil_tmp94;
#line 257
        __cil_tmp96 = (char *)__cil_tmp95;
#line 257
        __cil_tmp97 = (char const   *)__cil_tmp96;
#line 257
        __cil_tmp98 = (char const   *)tmp___1;
#line 257
        tmp___2 = strcmp(__cil_tmp97, __cil_tmp98);
        }
#line 257
        if (tmp___2 != 0) {
#line 260
          result = -1;
        } else {

        }
        goto switch_1_break;
        switch_1_0: /* CIL Label */ 
#line 263
        if (debug_flag > 1) {
          {
#line 263
          log_debug("  auth: Local");
          }
        } else {

        }
        {
#line 267
        __cil_tmp99 = (unsigned long )auth_item;
#line 267
        __cil_tmp100 = __cil_tmp99 + 32;
#line 267
        mem_159 = (int *)__cil_tmp100;
#line 267
        __cil_tmp101 = *mem_159;
#line 267
        if (__cil_tmp101 != 3) {
          {
#line 272
          __cil_tmp102 = (void *)0;
#line 272
          __cil_tmp103 = (unsigned long )__cil_tmp102;
#line 272
          __cil_tmp104 = (unsigned long )password_pair;
#line 272
          if (__cil_tmp104 == __cil_tmp103) {
#line 275
            result = -1;
          } else {
            {
#line 272
            __cil_tmp105 = 0 * 1UL;
#line 272
            __cil_tmp106 = 56 + __cil_tmp105;
#line 272
            __cil_tmp107 = (unsigned long )password_pair;
#line 272
            __cil_tmp108 = __cil_tmp107 + __cil_tmp106;
#line 272
            __cil_tmp109 = (uint8_t *)__cil_tmp108;
#line 272
            __cil_tmp110 = (char *)__cil_tmp109;
#line 272
            __cil_tmp111 = (char const   *)__cil_tmp110;
#line 272
            __cil_tmp112 = 0 * 1UL;
#line 272
            __cil_tmp113 = 56 + __cil_tmp112;
#line 272
            __cil_tmp114 = (unsigned long )auth_item;
#line 272
            __cil_tmp115 = __cil_tmp114 + __cil_tmp113;
#line 272
            __cil_tmp116 = (uint8_t *)__cil_tmp115;
#line 272
            __cil_tmp117 = (char *)__cil_tmp116;
#line 272
            __cil_tmp118 = (char const   *)__cil_tmp117;
#line 272
            tmp___3 = strcmp(__cil_tmp111, __cil_tmp118);
            }
#line 272
            if (tmp___3 != 0) {
#line 275
              result = -1;
            } else {

            }
          }
          }
          goto switch_1_break;
        } else {

        }
        }
        {
#line 284
        __cil_tmp119 = (void *)0;
#line 284
        __cil_tmp120 = (unsigned long )__cil_tmp119;
#line 284
        __cil_tmp121 = (unsigned long )password_pair;
#line 284
        if (__cil_tmp121 == __cil_tmp120) {
#line 285
          result = -1;
          goto switch_1_break;
        } else {

        }
        }
        {
#line 288
        __cil_tmp122 = (unsigned long )request;
#line 288
        __cil_tmp123 = __cil_tmp122 + 8;
#line 288
        mem_160 = (RADIUS_PACKET **)__cil_tmp123;
#line 288
        __cil_tmp124 = *mem_160;
#line 288
        __cil_tmp125 = 0 * 1UL;
#line 288
        __cil_tmp126 = (unsigned long )(string) + __cil_tmp125;
#line 288
        __cil_tmp127 = (char *)__cil_tmp126;
#line 288
        __cil_tmp128 = 0 * 1UL;
#line 288
        __cil_tmp129 = 56 + __cil_tmp128;
#line 288
        __cil_tmp130 = (unsigned long )auth_item;
#line 288
        __cil_tmp131 = __cil_tmp130 + __cil_tmp129;
#line 288
        mem_161 = (uint8_t *)__cil_tmp131;
#line 288
        __cil_tmp132 = *mem_161;
#line 288
        __cil_tmp133 = (int )__cil_tmp132;
#line 288
        rad_chap_encode(__cil_tmp124, __cil_tmp127, __cil_tmp133, password_pair);
#line 294
        __cil_tmp134 = 0 * 1UL;
#line 294
        __cil_tmp135 = (unsigned long )(string) + __cil_tmp134;
#line 294
        __cil_tmp136 = (char *)__cil_tmp135;
#line 294
        __cil_tmp137 = __cil_tmp136 + 1;
#line 294
        __cil_tmp138 = (void const   *)__cil_tmp137;
#line 294
        __cil_tmp139 = 0 * 1UL;
#line 294
        __cil_tmp140 = 56 + __cil_tmp139;
#line 294
        __cil_tmp141 = (unsigned long )auth_item;
#line 294
        __cil_tmp142 = __cil_tmp141 + __cil_tmp140;
#line 294
        __cil_tmp143 = (uint8_t *)__cil_tmp142;
#line 294
        __cil_tmp144 = __cil_tmp143 + 1;
#line 294
        __cil_tmp145 = (void const   *)__cil_tmp144;
#line 294
        tmp___4 = memcmp(__cil_tmp138, __cil_tmp145, 16UL);
        }
#line 294
        if (tmp___4 != 0) {
#line 296
          result = -1;
        } else {

        }
        goto switch_1_break;
        switch_1_default: /* CIL Label */ ;
#line 299
        if (debug_flag > 1) {
          {
#line 299
          tmp___5 = dict_valbyattr(1000, auth_type);
#line 299
          __cil_tmp146 = 0 * 1UL;
#line 299
          __cil_tmp147 = 0 + __cil_tmp146;
#line 299
          __cil_tmp148 = (unsigned long )tmp___5;
#line 299
          __cil_tmp149 = __cil_tmp148 + __cil_tmp147;
#line 299
          __cil_tmp150 = (char *)__cil_tmp149;
#line 299
          log_debug("  auth: %s", __cil_tmp150);
          }
        } else {

        }
        {
#line 307
        result = module_authenticate(auth_type, request);
        }
#line 315
        if (result == 1) {
          goto switch_2_1;
        } else {
#line 316
          if (result == 0) {
            goto switch_2_1;
          } else {
#line 317
            if (result == 5) {
              goto switch_2_1;
            } else {
#line 318
              if (result == 4) {
                goto switch_2_1;
              } else {
#line 319
                if (result == 6) {
                  goto switch_2_1;
                } else {
#line 320
                  if (result == 7) {
                    goto switch_2_1;
                  } else {
#line 321
                    if (result == 8) {
                      goto switch_2_1;
                    } else {
#line 324
                      if (result == 2) {
                        goto switch_2_2;
                      } else {
#line 327
                        if (result == 3) {
                          goto switch_2_3;
                        } else {
#line 308
                          if (0) {
                            switch_2_1: /* CIL Label */ 
                            switch_2_0: /* CIL Label */ 
                            switch_2_5: /* CIL Label */ 
                            switch_2_4: /* CIL Label */ 
                            switch_2_6: /* CIL Label */ 
                            switch_2_7: /* CIL Label */ 
                            switch_2_8: /* CIL Label */ 
#line 322
                            result = -1;
                            goto switch_2_break;
                            switch_2_2: /* CIL Label */ 
#line 325
                            result = 0;
                            goto switch_2_break;
                            switch_2_3: /* CIL Label */ 
#line 328
                            result = 1;
                            goto switch_2_break;
                          } else {
                            switch_2_break: /* CIL Label */ ;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        goto switch_1_break;
      } else {
        switch_1_break: /* CIL Label */ ;
      }
      }
    }
  }
#line 334
  return (result);
}
}
#line 343 "auth.c"
int rad_authenticate(REQUEST *request ) 
{ VALUE_PAIR *namepair ;
  VALUE_PAIR *auth_item ;
  char const   *user_msg ;
  char const   *password ;
  char *exec_program ;
  int nas_port ;
  u_char *p ;
  void *__cil_tmp19 ;
  unsigned long __cil_tmp20 ;
  unsigned long __cil_tmp21 ;
  void *__cil_tmp22 ;
  unsigned long __cil_tmp23 ;
  unsigned long __cil_tmp24 ;
  unsigned long __cil_tmp25 ;
  unsigned long __cil_tmp26 ;
  unsigned long __cil_tmp27 ;
  unsigned long __cil_tmp28 ;
  uint8_t *__cil_tmp29 ;
  void *__cil_tmp30 ;
  unsigned long __cil_tmp31 ;
  unsigned long __cil_tmp32 ;
  unsigned long __cil_tmp33 ;
  unsigned long __cil_tmp34 ;
  RADIUS_PACKET *__cil_tmp35 ;
  unsigned long __cil_tmp36 ;
  unsigned long __cil_tmp37 ;
  VALUE_PAIR *__cil_tmp38 ;
  void *__cil_tmp39 ;
  unsigned long __cil_tmp40 ;
  unsigned long __cil_tmp41 ;
  unsigned long __cil_tmp42 ;
  unsigned long __cil_tmp43 ;
  unsigned long __cil_tmp44 ;
  unsigned long __cil_tmp45 ;
  unsigned long __cil_tmp46 ;
  unsigned long __cil_tmp47 ;
  int __cil_tmp48 ;
  unsigned long __cil_tmp49 ;
  unsigned long __cil_tmp50 ;
  unsigned long __cil_tmp51 ;
  unsigned long __cil_tmp52 ;
  unsigned long __cil_tmp53 ;
  unsigned long __cil_tmp54 ;
  int __cil_tmp55 ;
  void *__cil_tmp56 ;
  VALUE_PAIR **mem_57 ;
  RADIUS_PACKET **mem_58 ;
  VALUE_PAIR **mem_59 ;
  VALUE_PAIR **mem_60 ;
  VALUE_PAIR **mem_61 ;
  int *mem_62 ;
  int *mem_63 ;

  {
  {
#line 352
  __cil_tmp19 = (void *)0;
#line 352
  user_msg = (char const   *)__cil_tmp19;
#line 357
  nas_port = 0;
#line 361
  __cil_tmp20 = (unsigned long )request;
#line 361
  __cil_tmp21 = __cil_tmp20 + 48;
#line 361
  mem_57 = (VALUE_PAIR **)__cil_tmp21;
#line 361
  namepair = *mem_57;
#line 363
  auth_item = rad_getpass(request);
  }
  {
#line 363
  __cil_tmp22 = (void *)0;
#line 363
  __cil_tmp23 = (unsigned long )__cil_tmp22;
#line 363
  __cil_tmp24 = (unsigned long )auth_item;
#line 363
  if (__cil_tmp24 != __cil_tmp23) {
#line 364
    __cil_tmp25 = 0 * 1UL;
#line 364
    __cil_tmp26 = 56 + __cil_tmp25;
#line 364
    __cil_tmp27 = (unsigned long )auth_item;
#line 364
    __cil_tmp28 = __cil_tmp27 + __cil_tmp26;
#line 364
    __cil_tmp29 = (uint8_t *)__cil_tmp28;
#line 364
    password = (char const   *)__cil_tmp29;
  } else {

  }
  }
  {
#line 367
  __cil_tmp30 = (void *)0;
#line 367
  __cil_tmp31 = (unsigned long )__cil_tmp30;
#line 367
  __cil_tmp32 = (unsigned long )auth_item;
#line 367
  if (__cil_tmp32 == __cil_tmp31) {
    {
#line 368
    __cil_tmp33 = (unsigned long )request;
#line 368
    __cil_tmp34 = __cil_tmp33 + 8;
#line 368
    mem_58 = (RADIUS_PACKET **)__cil_tmp34;
#line 368
    __cil_tmp35 = *mem_58;
#line 368
    __cil_tmp36 = (unsigned long )__cil_tmp35;
#line 368
    __cil_tmp37 = __cil_tmp36 + 72;
#line 368
    mem_59 = (VALUE_PAIR **)__cil_tmp37;
#line 368
    __cil_tmp38 = *mem_59;
#line 368
    auth_item = pairfind(__cil_tmp38, 3);
    }
    {
#line 368
    __cil_tmp39 = (void *)0;
#line 368
    __cil_tmp40 = (unsigned long )__cil_tmp39;
#line 368
    __cil_tmp41 = (unsigned long )auth_item;
#line 368
    if (__cil_tmp41 != __cil_tmp40) {
#line 370
      password = "<CHAP-PASSWORD>";
    } else {
#line 376
      password = "<NO-PASSWORD>";
    }
    }
  } else {

  }
  }
#line 379
  __cil_tmp42 = (unsigned long )request;
#line 379
  __cil_tmp43 = __cil_tmp42 + 56;
#line 379
  mem_60 = (VALUE_PAIR **)__cil_tmp43;
#line 379
  *mem_60 = auth_item;
#line 381
  __cil_tmp44 = (unsigned long )request;
#line 381
  __cil_tmp45 = __cil_tmp44 + 48;
#line 381
  mem_61 = (VALUE_PAIR **)__cil_tmp45;
#line 381
  namepair = *mem_61;
#line 390
  if (debug_flag > 1) {
    {
#line 390
    __cil_tmp46 = (unsigned long )auth_item;
#line 390
    __cil_tmp47 = __cil_tmp46 + 32;
#line 390
    mem_62 = (int *)__cil_tmp47;
#line 390
    __cil_tmp48 = *mem_62;
#line 390
    if (__cil_tmp48 == 2) {
#line 394
      __cil_tmp49 = 0 * 1UL;
#line 394
      __cil_tmp50 = 56 + __cil_tmp49;
#line 394
      __cil_tmp51 = (unsigned long )auth_item;
#line 394
      __cil_tmp52 = __cil_tmp51 + __cil_tmp50;
#line 394
      p = (uint8_t *)__cil_tmp52;
    } else {

    }
    }
  } else {

  }
  {
#line 402
  __cil_tmp53 = (unsigned long )auth_item;
#line 402
  __cil_tmp54 = __cil_tmp53 + 32;
#line 402
  mem_63 = (int *)__cil_tmp54;
#line 402
  __cil_tmp55 = *mem_63;
#line 402
  if (__cil_tmp55 == 3) {
#line 403
    password = "CHAP-Password";
  } else {

  }
  }
#line 411
  if (exec_program) {
    {
#line 412
    __cil_tmp56 = (void *)exec_program;
#line 412
    }
  } else {

  }
#line 413
  return (2);
}
}
#line 428 "auth.c"
VALUE_PAIR *rad_getpass(REQUEST *request ) 
{ VALUE_PAIR *auth_item ;
  size_t tmp ;
  unsigned long __cil_tmp4 ;
  unsigned long __cil_tmp5 ;
  unsigned long __cil_tmp6 ;
  unsigned long __cil_tmp7 ;
  int __cil_tmp8 ;
  void *__cil_tmp9 ;
  unsigned long __cil_tmp10 ;
  unsigned long __cil_tmp11 ;
  RADIUS_PACKET *__cil_tmp12 ;
  unsigned long __cil_tmp13 ;
  unsigned long __cil_tmp14 ;
  VALUE_PAIR *__cil_tmp15 ;
  void *__cil_tmp16 ;
  unsigned long __cil_tmp17 ;
  unsigned long __cil_tmp18 ;
  void *__cil_tmp19 ;
  unsigned long __cil_tmp20 ;
  unsigned long __cil_tmp21 ;
  unsigned long __cil_tmp22 ;
  RADIUS_PACKET *__cil_tmp23 ;
  unsigned long __cil_tmp24 ;
  unsigned long __cil_tmp25 ;
  unsigned long __cil_tmp26 ;
  uint32_t __cil_tmp27 ;
  unsigned long __cil_tmp28 ;
  unsigned long __cil_tmp29 ;
  unsigned long __cil_tmp30 ;
  unsigned long __cil_tmp31 ;
  uint8_t *__cil_tmp32 ;
  char *__cil_tmp33 ;
  unsigned long __cil_tmp34 ;
  unsigned long __cil_tmp35 ;
  int __cil_tmp36 ;
  unsigned long __cil_tmp37 ;
  unsigned long __cil_tmp38 ;
  unsigned long __cil_tmp39 ;
  unsigned long __cil_tmp40 ;
  char *__cil_tmp41 ;
  char const   *__cil_tmp42 ;
  unsigned long __cil_tmp43 ;
  unsigned long __cil_tmp44 ;
  unsigned long __cil_tmp45 ;
  unsigned long __cil_tmp46 ;
  RADIUS_PACKET *__cil_tmp47 ;
  unsigned long __cil_tmp48 ;
  unsigned long __cil_tmp49 ;
  uint8_t *__cil_tmp50 ;
  char *__cil_tmp51 ;
  char const   *__cil_tmp52 ;
  unsigned long __cil_tmp53 ;
  unsigned long __cil_tmp54 ;
  unsigned long __cil_tmp55 ;
  unsigned long __cil_tmp56 ;
  unsigned long __cil_tmp57 ;
  unsigned long __cil_tmp58 ;
  uint8_t *__cil_tmp59 ;
  char *__cil_tmp60 ;
  char const   *__cil_tmp61 ;
  unsigned long __cil_tmp62 ;
  unsigned long __cil_tmp63 ;
  VALUE_PAIR **mem_64 ;
  int *mem_65 ;
  RADIUS_PACKET **mem_66 ;
  VALUE_PAIR **mem_67 ;
  VALUE_PAIR **mem_68 ;
  RADIUS_PACKET **mem_69 ;
  uint32_t *mem_70 ;
  int *mem_71 ;
  RADIUS_PACKET **mem_72 ;
  uint32_t *mem_73 ;
  int *mem_74 ;

  {
#line 434
  __cil_tmp4 = (unsigned long )request;
#line 434
  __cil_tmp5 = __cil_tmp4 + 56;
#line 434
  mem_64 = (VALUE_PAIR **)__cil_tmp5;
#line 434
  auth_item = *mem_64;
#line 435
  if (auth_item) {
    {
#line 440
    __cil_tmp6 = (unsigned long )auth_item;
#line 440
    __cil_tmp7 = __cil_tmp6 + 32;
#line 440
    mem_65 = (int *)__cil_tmp7;
#line 440
    __cil_tmp8 = *mem_65;
#line 440
    if (__cil_tmp8 != 2) {
      {
#line 441
      __cil_tmp9 = (void *)0;
#line 441
      return ((VALUE_PAIR *)__cil_tmp9);
      }
    } else {

    }
    }
  } else {
    {
#line 447
    __cil_tmp10 = (unsigned long )request;
#line 447
    __cil_tmp11 = __cil_tmp10 + 8;
#line 447
    mem_66 = (RADIUS_PACKET **)__cil_tmp11;
#line 447
    __cil_tmp12 = *mem_66;
#line 447
    __cil_tmp13 = (unsigned long )__cil_tmp12;
#line 447
    __cil_tmp14 = __cil_tmp13 + 72;
#line 447
    mem_67 = (VALUE_PAIR **)__cil_tmp14;
#line 447
    __cil_tmp15 = *mem_67;
#line 447
    auth_item = pairfind(__cil_tmp15, 2);
    }
#line 448
    if (! auth_item) {
      {
#line 449
      __cil_tmp16 = (void *)0;
#line 449
      return ((VALUE_PAIR *)__cil_tmp16);
      }
    } else {

    }
#line 455
    __cil_tmp17 = (unsigned long )request;
#line 455
    __cil_tmp18 = __cil_tmp17 + 56;
#line 455
    mem_68 = (VALUE_PAIR **)__cil_tmp18;
#line 455
    *mem_68 = auth_item;
  }
  {
#line 463
  __cil_tmp19 = (void *)0;
#line 463
  __cil_tmp20 = (unsigned long )__cil_tmp19;
#line 463
  __cil_tmp21 = (unsigned long )request;
#line 463
  __cil_tmp22 = __cil_tmp21 + 16;
#line 463
  mem_69 = (RADIUS_PACKET **)__cil_tmp22;
#line 463
  __cil_tmp23 = *mem_69;
#line 463
  __cil_tmp24 = (unsigned long )__cil_tmp23;
#line 463
  if (__cil_tmp24 != __cil_tmp20) {
#line 465
    return (auth_item);
  } else {
    {
#line 463
    __cil_tmp25 = (unsigned long )auth_item;
#line 463
    __cil_tmp26 = __cil_tmp25 + 44;
#line 463
    mem_70 = (uint32_t *)__cil_tmp26;
#line 463
    __cil_tmp27 = *mem_70;
#line 463
    if (__cil_tmp27 == 1U) {
#line 465
      return (auth_item);
    } else {

    }
    }
  }
  }
  {
#line 471
  __cil_tmp28 = 0 * 1UL;
#line 471
  __cil_tmp29 = 56 + __cil_tmp28;
#line 471
  __cil_tmp30 = (unsigned long )auth_item;
#line 471
  __cil_tmp31 = __cil_tmp30 + __cil_tmp29;
#line 471
  __cil_tmp32 = (uint8_t *)__cil_tmp31;
#line 471
  __cil_tmp33 = (char *)__cil_tmp32;
#line 471
  __cil_tmp34 = (unsigned long )auth_item;
#line 471
  __cil_tmp35 = __cil_tmp34 + 40;
#line 471
  mem_71 = (int *)__cil_tmp35;
#line 471
  __cil_tmp36 = *mem_71;
#line 471
  __cil_tmp37 = 0 * 1UL;
#line 471
  __cil_tmp38 = 64 + __cil_tmp37;
#line 471
  __cil_tmp39 = (unsigned long )request;
#line 471
  __cil_tmp40 = __cil_tmp39 + __cil_tmp38;
#line 471
  __cil_tmp41 = (char *)__cil_tmp40;
#line 471
  __cil_tmp42 = (char const   *)__cil_tmp41;
#line 471
  __cil_tmp43 = 0 * 1UL;
#line 471
  __cil_tmp44 = 24 + __cil_tmp43;
#line 471
  __cil_tmp45 = (unsigned long )request;
#line 471
  __cil_tmp46 = __cil_tmp45 + 8;
#line 471
  mem_72 = (RADIUS_PACKET **)__cil_tmp46;
#line 471
  __cil_tmp47 = *mem_72;
#line 471
  __cil_tmp48 = (unsigned long )__cil_tmp47;
#line 471
  __cil_tmp49 = __cil_tmp48 + __cil_tmp44;
#line 471
  __cil_tmp50 = (uint8_t *)__cil_tmp49;
#line 471
  __cil_tmp51 = (char *)__cil_tmp50;
#line 471
  __cil_tmp52 = (char const   *)__cil_tmp51;
#line 471
  rad_pwdecode(__cil_tmp33, __cil_tmp36, __cil_tmp42, __cil_tmp52);
#line 479
  __cil_tmp53 = (unsigned long )auth_item;
#line 479
  __cil_tmp54 = __cil_tmp53 + 44;
#line 479
  mem_73 = (uint32_t *)__cil_tmp54;
#line 479
  *mem_73 = 1U;
#line 482
  __cil_tmp55 = 0 * 1UL;
#line 482
  __cil_tmp56 = 56 + __cil_tmp55;
#line 482
  __cil_tmp57 = (unsigned long )auth_item;
#line 482
  __cil_tmp58 = __cil_tmp57 + __cil_tmp56;
#line 482
  __cil_tmp59 = (uint8_t *)__cil_tmp58;
#line 482
  __cil_tmp60 = (char *)__cil_tmp59;
#line 482
  __cil_tmp61 = (char const   *)__cil_tmp60;
#line 482
  tmp = strlen(__cil_tmp61);
#line 482
  __cil_tmp62 = (unsigned long )auth_item;
#line 482
  __cil_tmp63 = __cil_tmp62 + 40;
#line 482
  mem_74 = (int *)__cil_tmp63;
#line 482
  *mem_74 = (int )tmp;
  }
#line 484
  return (auth_item);
}
}
