<?xml version="1.0"?>

<!--
This file is part of CPAchecker,
a tool for configurable software verification:
https://cpachecker.sosy-lab.org

SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
SPDX-FileCopyrightText: 2014-2017 UniversitÃ© Grenoble Alpes

SPDX-License-Identifier: Apache-2.0
-->

<!DOCTYPE benchmark PUBLIC "+//IDN sosy-lab.org//DTD BenchExec benchmark 1.0//EN" "http://www.sosy-lab.org/benchexec/benchmark-1.0.dtd">
<benchmark tool="cpachecker" timelimit="60 s" hardtimelimit="90 s" memlimit="2 GB" cpuCores="1">

  <option name="-noout"/>
  <option name="-heap">1500M</option>

  <rundefinition>
  </rundefinition>

  <tasks>
    <option name="-policy"/>
    <option name="-setprop">cpa.reportFalseAsUnknown=false</option>
    <propertyfile>../config/properties/unreach-label.prp</propertyfile>
    <include>../programs/policyiteration/array.yml</include>
    <include>../programs/policyiteration/classcast_fail.yml</include>
    <include>../programs/policyiteration/fixpoint.yml</include>
    <include>../programs/policyiteration/inequality.yml</include>
    <include>../programs/policyiteration/initial.yml</include>
    <include>../programs/policyiteration/loop_bounds.yml</include>
    <include>../programs/policyiteration/loop_nested-2.yml</include>
    <include>../programs/policyiteration/loop.yml</include>
    <include>../programs/policyiteration/loop2.yml</include>
    <include>../programs/policyiteration/simplest-1.yml</include>
    <include>../programs/policyiteration/stateful.yml</include>
    <include>../programs/policyiteration/template_generation.yml</include>
    <include>../programs/policyiteration/tests.yml</include>
    <include>../programs/policyiteration/timeout.yml</include>
    <include>../programs/policyiteration/pointers/double_pointer.yml</include>
    <include>../programs/policyiteration/pointers/pointer_read-1.yml</include>
    <include>../programs/policyiteration/pointers/pointer_read-2.yml</include>
    <include>../programs/policyiteration/pointers/pointer_write.yml</include>
    <include>../programs/policyiteration/pointers/pointer2.yml</include>
    <include>../programs/policyiteration/pointers/pointers_change_aliasing.yml</include>
  </tasks>

  <tasks>
    <option name="-policy"/>
    <option name="-setprop">cpa.reportFalseAsUnknown=false</option>
    <option name="-setprop">cpa.lpi.maxExpressionSize=2</option>
    <propertyfile>../config/properties/unreach-label.prp</propertyfile>
    <include>../programs/policyiteration/octagons/octagons_loop-1.yml</include>
    <include>../programs/policyiteration/octagons/octagons_loop-2.yml</include>
  </tasks>

  <tasks>
    <option name="-policy"/>
    <option name="-setprop">cpa.reportFalseAsUnknown=false</option>
    <option name="-setprop">cpa.lpi.maxExpressionSize=2</option>
    <!-- Use explicit value analysis to track boolean variables. -->
    <option name="-setprop">CompositeCPA.cpas=cpa.location.LocationCPA,cpa.callstack.CallstackCPA,cpa.functionpointer.FunctionPointerCPA,cpa.loopbound.LoopBoundCPA,cpa.value.ValueAnalysisCPA,cpa.policyiteration.PolicyCPA</option>
    <option name="-setprop">cpa.loopbound.trackStack=true</option>
    <option name="-setprop">precision.trackIntAddVariables=false</option>
    <option name="-setprop">precision.trackVariablesBesidesEqAddBool=false</option>
    <propertyfile>../config/properties/unreach-label.prp</propertyfile>
    <include>../programs/policyiteration/boolean.yml</include>
  </tasks>

  <tasks>
    <option name="-policy"/>
    <option name="-setprop">cpa.reportFalseAsUnknown=false</option>
    <option name="-setprop">cpa.lpi.allowedCoefficients=1</option>
    <option name="-setprop">cpa.lpi.abstractionLocations=all</option>
    <propertyfile>../config/properties/unreach-label.prp</propertyfile>
    <include>../programs/policyiteration/formula_fail.yml</include>
  </tasks>

  <tasks>
    <option name="-policy"/>
    <option name="-setprop">cpa.reportFalseAsUnknown=false</option>
    <option name="-setprop">cpa.loopbound.loopIterationsBeforeAbstraction=2</option>
    <propertyfile>../config/properties/unreach-label.prp</propertyfile>
    <include>../programs/policyiteration/unrolling.yml</include>
  </tasks>

  <tasks>
    <option name="-policy"/>
    <option name="-setprop">cpa.reportFalseAsUnknown=false</option>
    <option name="-setprop">cpa.lpi.maxExpressionSize=2</option>
    <!-- Enabling two options below make non-prefixing variation of val.det. work. -->
    <option name="-setprop">cpa.lpi.shortCircuitSyntactic=false</option>
    <option name="-setprop">cpa.lpi.checkPolicyInitialCondition=false</option>
    <propertyfile>../config/properties/unreach-label.prp</propertyfile>
    <include>../programs/policyiteration/valdet_prefixing.yml</include>
  </tasks>

  <tasks>
    <option name="-policy"/>
    <option name="-setprop">cpa.reportFalseAsUnknown=false</option>
    <!-- with FormulaSlicingCPA -->
    <option name="-setprop">CompositeCPA.cpas=cpa.location.LocationCPA,cpa.callstack.CallstackCPA,cpa.functionpointer.FunctionPointerCPA,cpa.loopbound.LoopBoundCPA,cpa.formulaslicing.FormulaSlicingCPA,cpa.policyiteration.PolicyCPA,cpa.targetreachability.TargetReachabilityCPA,cpa.assumptions.storage.AssumptionStorageCPA</option>
    <propertyfile>../config/properties/unreach-label.prp</propertyfile>
    <include>../programs/policyiteration/pointers/pointer_past_abstraction-1.yml</include>
  </tasks>

  <tasks>
    <option name="-policy"/>
    <option name="-setprop">cpa.reportFalseAsUnknown=false</option>
    <option name="-setprop">cpa.lpi.maxExpressionSize=2</option>
    <!-- with FormulaSlicingCPA -->
    <option name="-setprop">CompositeCPA.cpas=cpa.location.LocationCPA,cpa.callstack.CallstackCPA,cpa.functionpointer.FunctionPointerCPA,cpa.loopbound.LoopBoundCPA,cpa.formulaslicing.FormulaSlicingCPA,cpa.policyiteration.PolicyCPA,cpa.targetreachability.TargetReachabilityCPA,cpa.assumptions.storage.AssumptionStorageCPA</option>
    <propertyfile>../config/properties/unreach-label.prp</propertyfile>
    <include>../programs/policyiteration/pointers/pointer_past_abstraction-2.yml</include>
  </tasks>

  <tasks>
    <option name="-policy"/>
    <option name="-setprop">cpa.reportFalseAsUnknown=false</option>
    <option name="-setprop">cpa.lpi.maxExpressionSize=2</option>
    <option name="-setprop">cpa.lpi.linearizePolicy=false</option>
    <!-- with FormulaSlicingCPA -->
    <option name="-setprop">CompositeCPA.cpas=cpa.location.LocationCPA,cpa.callstack.CallstackCPA,cpa.functionpointer.FunctionPointerCPA,cpa.loopbound.LoopBoundCPA,cpa.formulaslicing.FormulaSlicingCPA,cpa.policyiteration.PolicyCPA,cpa.targetreachability.TargetReachabilityCPA,cpa.assumptions.storage.AssumptionStorageCPA</option>
    <propertyfile>../config/properties/unreach-label.prp</propertyfile>
    <include>../programs/policyiteration/pointers/pointers_loop-2.yml</include>
  </tasks>

  <tasks>
    <option name="-policy-bam"/>
    <option name="-setprop">cpa.reportFalseAsUnknown=false</option>
    <propertyfile>../config/properties/unreach-label.prp</propertyfile>
    <include>../programs/policyiteration/bam/*.yml</include>
  </tasks>

  <tasks>
    <option name="-policy-overflow"/>
    <option name="-setprop">cpa.reportFalseAsUnknown=false</option>
    <option name="-setprop">overflow.useLiveness=false</option>
    <propertyfile>../config/properties/no-overflow.prp</propertyfile>
    <include>../programs/policyiteration/overflow/*.yml</include>
  </tasks>

  <tasks>
    <option name="-policy-refinement"/>
    <includesfile>../programs/benchmarks/ReachSafety-Loops.set</includesfile>
    <propertyfile>../programs/benchmarks/properties/unreach-call.prp</propertyfile>
    <!-- SV-Comp files assume that malloc always succeeds -->
    <option name="-setprop">cpa.predicate.memoryAllocationsAlwaysSucceed=true</option>
    <exclude>../programs/benchmarks/loop-invgen/SpamAssassin-loop.yml</exclude> <!-- flapping timeout -->
    <exclude>../programs/benchmarks/loops/invert_string-1.yml</exclude> <!-- flapping timeout -->
    <exclude>../programs/benchmarks/loops/sum01-1.yml</exclude> <!-- flapping timeout -->
    <exclude>../programs/benchmarks/loops-crafted-1/vnew2.yml</exclude> <!-- flapping timeout -->
  </tasks>
</benchmark>
