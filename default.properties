# where to save the log file
log.path = /media/sda7/cpa/CPALog.txt

# set the log level, only on, off supported currently to switch on or off
log.level = on

# do we want to save statistics about runtime analysis
analysis.saveStatistics = true

# do we want to print cfa as .dot, true or false
dot.export = true

# where to save the dot file
dot.path = /home/erkan/cpa/

# do we want to simplify cfa?
cfa.simplify = true

# do we want to combine multiple assignments and 
# if cpa.simplify is set to true and cfa.combineBlockStatements is set
# to false only blank edges will be removed while simplfying

cfa.combineBlockStatements = false

# do we want to throw declarations away? 

cfa.removeDeclarations = false

# set to true if you want to run an interprocedural analysis
analysis.interprocedural = true

# where are predicates
predicates.path = /home/erkan/cpa/

# entry function
analysis.entryFunction = main
    
# which strategy to adopt for visiting states? DFS or BFS? BFS, unless
# bfs is false
analysis.bfs = false

# where to keep the programs to run, this is the workspacedata if
# you use eclipse to run CPAChecker. if it changes, you should change this
# parameter.
analysis.programs = /home/erkan/cpa/runtime-config/

# which CPAs do we want to use? where is the CPA class that represents the corresponding analysis?
analysis.cpas = cpaplugin.cpa.cpas.location.LocationCPA, cpaplugin.cpa.cpas.octagon.OctagonCPA
#predicateabstraction.PredicateAbstractionCPA
#defuse.DefUseCPA
#octagon.OctagonCPA

# what merge operator do we want to use for each cpa? give the merge types in respective order with analysis.cpas property
# use sep for MergeSep and join for MergeJoin
analysis.mergeOperators = sep, sep

# what stop operator do we want to use for each cpa? give the merge types in respective order with analysis.cpas property
# use sep for StopSep and join for StopJoin
analysis.stopOperators = sep, sep

# use sumary locations for symbolic execution
analysis.useSummaryLocations = false
