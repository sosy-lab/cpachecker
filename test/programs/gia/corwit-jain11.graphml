<!--
This file is part of CPAchecker,
a tool for configurable software verification:
https://cpachecker.sosy-lab.org

SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>

SPDX-License-Identifier: Apache-2.0
-->
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <key attr.name="invariant" attr.type="string" for="node" id="invariant"/>
    <key attr.name="invariant.scope" attr.type="string" for="node" id="invariant.scope"/>
    <key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
        <default>false</default>
    </key>
    <key attr.name="enterLoopHead" attr.type="boolean" for="edge" id="enterLoopHead">
        <default>false</default>
    </key>
    <key attr.name="sourcecodeLanguage" attr.type="string" for="graph" id="sourcecodelang"/>
    <key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
    <key attr.name="programHash" attr.type="string" for="graph" id="programhash"/>
    <key attr.name="specification" attr.type="string" for="graph" id="specification"/>
    <key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
    <key attr.name="producer" attr.type="string" for="graph" id="producer"/>
    <key attr.name="creationTime" attr.type="string" for="graph" id="creationtime"/>
    <key attr.name="startline" attr.type="int" for="edge" id="startline"/>
    <key attr.name="endline" attr.type="int" for="edge" id="endline"/>
    <key attr.name="startoffset" attr.type="int" for="edge" id="startoffset"/>
    <key attr.name="endoffset" attr.type="int" for="edge" id="endoffset"/>
    <key attr.name="originFileName" attr.type="string" for="edge" id="originfile">
        <default>../../../../../../jain_1-1.c</default>
    </key>
    <key attr.name="control" attr.type="string" for="edge" id="control"/>
    <key attr.name="enterFunction" attr.type="string" for="edge" id="enterFunction"/>
    <key attr.name="returnFromFunction" attr.type="string" for="edge" id="returnFrom"/>
    <key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
    <key attr.name="inputWitnessHash" attr.type="string" for="graph" id="inputwitnesshash"/>
    <graph edgedefault="directed">
        <data key="witness-type">correctness_witness</data>
        <data key="sourcecodelang">C</data>
        <data key="producer">CPAchecker 2.1.1 / craigInterpolation-violationWitness</data>
        <data key="specification">CHECK( init(main()), LTL(G ! call(reach_error())) )</data>
        <data key="inputwitnesshash">855acb787f906dceae3f0d3454bc88a95fc7c74b370daa5ef1edb0cc29648c05</data>
        <data key="programfile">../../../../../../jain_1-1.c</data>
        <data key="programhash">c32f942c6eb2912830a40efe9162c395bf3634ab4557e4b71a48bed97282f20f</data>
        <data key="architecture">32bit</data>
        <data key="creationtime">2022-02-18T17:43:39+08:00</data>
        <node id="N14">
            <data key="entry">true</data>
        </node>
        <node id="N15"/>
        <edge source="N14" target="N15">
            <data key="startline">20</data>
            <data key="endline">20</data>
            <data key="startoffset">715</data>
            <data key="endoffset">725</data>
            <data key="enterFunction">main</data>
        </edge>
        <node id="N24">
            <data key="invariant">( ( y % 2 ) == 1 ) || ( ( y == 1 ) &amp;&amp; ( ( y % 2 ) == 1 ) )</data>
            <data key="invariant.scope">main</data>
        </node>
        <edge source="N15" target="N24">
            <data key="enterLoopHead">true</data>
            <data key="startline">24</data>
            <data key="endline">24</data>
            <data key="startoffset">749</data>
            <data key="endoffset">754</data>
        </edge>
        <node id="N5"/>
        <edge source="N24" target="N5">
            <data key="startline">31</data>
            <data key="endline">31</data>
            <data key="startoffset">825</data>
            <data key="endoffset">848</data>
            <data key="enterFunction">__VERIFIER_assert</data>
        </edge>
        <node id="N8"/>
        <edge source="N5" target="N8">
            <data key="startline">15</data>
            <data key="endline">15</data>
            <data key="startoffset">654</data>
            <data key="endoffset">657</data>
            <data key="control">condition-true</data>
        </edge>
        <node id="N10"/>
        <edge source="N5" target="N10">
            <data key="startline">15</data>
            <data key="endline">15</data>
            <data key="startoffset">654</data>
            <data key="endoffset">657</data>
            <data key="control">condition-false</data>
        </edge>
        <node id="N4"/>
        <edge source="N10" target="N4">
            <data key="startline">18</data>
            <data key="endline">18</data>
            <data key="startoffset">705</data>
            <data key="endoffset">711</data>
            <data key="returnFrom">__VERIFIER_assert</data>
        </edge>
        <edge source="N4" target="N24">
            <data key="enterLoopHead">true</data>
            <data key="startline">31</data>
            <data key="endline">31</data>
            <data key="startoffset">825</data>
            <data key="endoffset">850</data>
        </edge>
        <node id="N1"/>
        <edge source="N8" target="N1">
            <data key="startline">16</data>
            <data key="endline">16</data>
            <data key="startoffset">675</data>
            <data key="endoffset">687</data>
            <data key="enterFunction">reach_error</data>
        </edge>
        <edge source="N1" target="N10">
            <data key="startline">16</data>
            <data key="endline">16</data>
            <data key="startoffset">675</data>
            <data key="endoffset">688</data>
            <data key="returnFrom">reach_error</data>
        </edge>
    </graph>
</graphml>
