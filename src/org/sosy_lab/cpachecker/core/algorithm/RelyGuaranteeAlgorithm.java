/*
 *  CPAchecker is a tool for configurable software verification.
 *  This file is part of CPAchecker.
 *
 *  Copyright (C) 2007-2011  Dirk Beyer
 *  All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *
 *  CPAchecker web page:
 *    http://cpachecker.sosy-lab.org
 */
package org.sosy_lab.cpachecker.core.algorithm;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Collection;
import java.util.Set;
import java.util.Vector;
import java.util.Map.Entry;

import org.sosy_lab.common.LogManager;
import org.sosy_lab.common.configuration.Configuration;
import org.sosy_lab.common.configuration.InvalidConfigurationException;
import org.sosy_lab.cpachecker.cfa.CFA;
import org.sosy_lab.cpachecker.cfa.DOTBuilder;
import org.sosy_lab.cpachecker.cfa.objectmodel.CFAEdge;
import org.sosy_lab.cpachecker.cfa.objectmodel.CFAFunctionDefinitionNode;
import org.sosy_lab.cpachecker.cfa.objectmodel.CFANode;
import org.sosy_lab.cpachecker.core.CPAcheckerResult.Result;
import org.sosy_lab.cpachecker.core.interfaces.AbstractElement;
import org.sosy_lab.cpachecker.core.interfaces.ConfigurableProgramAnalysis;
import org.sosy_lab.cpachecker.core.interfaces.Statistics;
import org.sosy_lab.cpachecker.core.interfaces.StatisticsProvider;
import org.sosy_lab.cpachecker.core.reachedset.ReachedSet;
import org.sosy_lab.cpachecker.cpa.relyguarantee.RelyGuaranteeCFAEdge;
import org.sosy_lab.cpachecker.cpa.relyguarantee.RelyGuaranteeEnvironmentalTransition;
import org.sosy_lab.cpachecker.exceptions.CPAException;
import org.sosy_lab.cpachecker.util.AbstractElements;
import org.sosy_lab.cpachecker.util.predicates.CachingPathFormulaManager;
import org.sosy_lab.cpachecker.util.predicates.PathFormula;
import org.sosy_lab.cpachecker.util.predicates.PathFormulaManagerImpl;
import org.sosy_lab.cpachecker.util.predicates.bdd.BDDRegionManager;
import org.sosy_lab.cpachecker.util.predicates.interfaces.Formula;
import org.sosy_lab.cpachecker.util.predicates.interfaces.FormulaManager;
import org.sosy_lab.cpachecker.util.predicates.interfaces.PathFormulaManager;
import org.sosy_lab.cpachecker.util.predicates.interfaces.RegionManager;
import org.sosy_lab.cpachecker.util.predicates.mathsat.MathsatFormulaManager;

import com.google.common.collect.Iterables;

public class RelyGuaranteeAlgorithm implements ConcurrentAlgorithm, StatisticsProvider{


  private int threadNo;
  private CFA[] cfas;
  private CFAFunctionDefinitionNode[] mainFunctions;
  private ConfigurableProgramAnalysis[] cpas;
  private LogManager logger;

  // placeholder for environmental transition generated by a given thread
  private Vector<RelyGuaranteeEnvironmentalTransition> newEnvTransitions;
  private Vector<RelyGuaranteeCFAEdge>[] envTransitionsForThread;
  private Vector<RelyGuaranteeCFAEdge>[] envTransitionsCreatedBy;
  // CPA for each thread
  private RelyGuaranteeThreadCPAAlgorithm[] threadCPA;
  //
  public Set<String> globalVariables;
  private PathFormulaManager pfManager;
  private FormulaManager     fManager;
  private RegionManager rManager = BDDRegionManager.getInstance();



  public RelyGuaranteeAlgorithm(CFA[] pCfas, CFAFunctionDefinitionNode[] pMainFunctions, ConfigurableProgramAnalysis[] pCpas, Configuration config, LogManager logger) {
    this.threadNo = pCfas.length;
    this.cfas = pCfas;
    this.mainFunctions = pMainFunctions;
    this.cpas = pCpas;
    this.logger = logger;

    // TODO add option for caching
    MathsatFormulaManager msatFormulaManager;
    try {
      msatFormulaManager = MathsatFormulaManager .getInstance(config, logger);
      this.fManager = msatFormulaManager;
      PathFormulaManager pfMgr  = PathFormulaManagerImpl.getInstance(msatFormulaManager, config, logger);
      pfMgr = CachingPathFormulaManager.getInstance(pfMgr);
      this.pfManager = pfMgr;
    } catch (InvalidConfigurationException e) {
      e.printStackTrace();
    }

    threadCPA = new RelyGuaranteeThreadCPAAlgorithm[this.threadNo];
    envTransitionsForThread = new Vector[this.threadNo];
    envTransitionsCreatedBy = new Vector[this.threadNo];
    newEnvTransitions = new Vector<RelyGuaranteeEnvironmentalTransition>();


    // create RelyGuaranteeThreadCPAAlgorithms for each thread
    // initialize envTransitionsForThread
    for (int i=0; i< this.threadNo; i++){
      threadCPA[i] = new RelyGuaranteeThreadCPAAlgorithm(cpas[i],newEnvTransitions,logger, i);
      envTransitionsForThread[i] = new Vector<RelyGuaranteeCFAEdge>();
      envTransitionsCreatedBy[i] = new Vector<RelyGuaranteeCFAEdge>();
    }
    // create DOT file for the original CFA
    for (int i=0; i< this.threadNo; i++){
      this.dumpDot(i, "test/output/oldCFA"+i+".dot");
    }
  }


  @Override
  public void collectStatistics(Collection<Statistics> pStatsCollection) {
    // TODO Auto-generated method stub

  }

  public Result run(ReachedSet[] reached, boolean stopAfterError) {
    boolean error = false;
    int i = 0;
    int error_i = -1;
    try{
      // fixed point computation

      do {
        setWaitlist(reached[i]);
        addEnvTransitionsToCFA(i);
        error = runThread(i, reached[i], stopAfterError);
        printEnvTransitions();
        processEnvTransitions();
        //filterEnvTransitions(i);
        //printEnvTransitions();
        //distributeEnvTransitions(i);
        i = pickThread();
      } //while(i != -1 && !error);
      while(false);
    } catch(Exception e){
      e.printStackTrace();
    }

    // result analysis
    i=0;
    do {
      if (Iterables.any(reached[i], AbstractElements.IS_TARGET_ELEMENT)) {
        return Result.UNSAFE;
      }
      /*
      if (reached[i].hasWaitingElement()) {
        logger.log(Level.WARNING, "Analysis not completed: there are still elements to be processed.");
        return Result.UNKNOWN;
      }
      if (!sound) {
      logger.log(Level.WARNING, "Analysis incomplete: no errors found, but not everything could be checked.");
      return Result.UNKNOWN;*/

      i++;
    } while (i<this.threadNo );
    return Result.SAFE;
  }


  // put relevant states in the waitlist
  private void setWaitlist(ReachedSet reachedSet) {
    // if waitlist not empty, then this is the first run of for this thread
    if (reachedSet.getWaitlistSize()>0){
      return;
    }
    for(AbstractElement element : reachedSet.getReached()){
      reachedSet.reAddToWaitlist(element);
    }
  }

  private void processEnvTransitions() {
    // generate CFA edges from env tranitions
    Vector<RelyGuaranteeCFAEdge> rgEdges = new Vector<RelyGuaranteeCFAEdge>();
    for (RelyGuaranteeEnvironmentalTransition  et: newEnvTransitions){
      Formula f = et.getFormula();
      PathFormula pf = et.getPathFormula();
      CFAEdge localEdge = et.getEdge();
      int sourceThread = et.getSourceThread();
      PathFormula mergedPF = pfManager.makeAnd(pf, f);
      RelyGuaranteeCFAEdge rgEdge = new RelyGuaranteeCFAEdge(localEdge, mergedPF, sourceThread);
      rgEdges.add(rgEdge);
    }

    //



  }


  // runs a thread
  private boolean runThread(int i, ReachedSet reached, boolean stopAfterError) throws CPAException, InterruptedException {
    boolean sound = true;
    do {
      sound &=  threadCPA[i].run(reached);
    } while (!stopAfterError && reached.hasWaitingElement());

    if (reached.hasWaitingElement()) {
      return true;
    }
    return false;
  }

/*
  // remove redundant env transitions
  private void filterEnvTransitions(int i) {
    // removed env. edges with abstraction equal to "false"
    Vector<RelyGuaranteeEnvEdge> toDelete = new Vector<RelyGuaranteeEnvEdge>();
    for (RelyGuaranteeEnvEdge env : this.newEnvTransitions){
      Formula af = env.getAbstractionFormula().asFormula();
      if (af.isFalse()){
        toDelete.add(env);
      }
    }
    this.newEnvTransitions.removeAll(toDelete);
    toDelete = new Vector<RelyGuaranteeEnvEdge>();

    for (RelyGuaranteeEnvEdge newEnv : this.newEnvTransitions) {
      for (RelyGuaranteeEnvEdge oldEnv : this.envTransitionsCreatedBy[i]) {
          if (isCovered(newEnv, oldEnv)){
            toDelete.add(newEnv);
        }
      }
    }
    this.newEnvTransitions.removeAll(toDelete);
    this.envTransitionsCreatedBy[i].addAll(this.newEnvTransitions);
  }


  // returns true if env1 <= env2
  private boolean isCovered(RelyGuaranteeEnvEdge env1, RelyGuaranteeEnvEdge env2) {
    // compare local edges
    if (env1.getLocalEdge() != env2.getLocalEdge()){
      return false;
    }
    // compare abstractions

    if (!env1.getAbstractionFormula().equals(env2.getAbstractionFormula())){
      return false;
    }

    //TODO implement a real check
    if (!env1.getPathFormula().equals(env2.getPathFormula())){
      return false;
    }
    return true;
  }





  // filters abd distributes env transitions created by one thread to the others threads
  private void distributeEnvTransitions(int i) {
    // remove all edges for thread i
    this.envTransitionsForThread[i].removeAllElements();
    // distribute env. edges
    RelyGuaranteeEnvEdge edge;
    while (!newEnvTransitions.isEmpty()){
      edge = newEnvTransitions.remove(0);
      for (int j=0; j<this.threadNo; j++){
        // don't add to the same thread
        if (j!=i){
          this.envTransitionsForThread[j].add(new RelyGuaranteeEnvEdge(edge));
        }
      }
    }
  }
*/

  // chose the next thread for reachability computation
  // return -1 if there are no new env transitions for any any thread
  private int pickThread() {
    int i=0;
    while(i<this.threadNo && this.envTransitionsForThread[i].isEmpty()){
      i++;
    }
    if (i==this.threadNo){
      return -1;
    }
    else {
      return i;
    }
  }


  private void dumpDot(int pI, String file) {
    FileWriter fstream;
    try {
      fstream = new FileWriter(file);
      BufferedWriter out = new BufferedWriter(fstream);;
      String s = DOTBuilder.generateDOT(this.cfas[pI].getFunctions().values(), this.mainFunctions[pI]);
      out.write(s);
      out.close();
    } catch (IOException e) {
      e.printStackTrace();
    }
  }


  // add env transitions from other threads to CFA no. i
  private void addEnvTransitionsToCFA(int i) {
    // loop over env transitions from threads other than pI
    for (RelyGuaranteeCFAEdge envTransition : this.envTransitionsForThread[i]){
      // get nodes for the CFA
      CFA cfa = this.cfas[i];
      for(Entry<String, CFANode> entry :   cfa.getCFANodes().entries()){
        CFANode node = entry.getValue();
        addEnvTransitionToNode(node, new  RelyGuaranteeCFAEdge(envTransition));
      }
    }

  }

  // add the env transition to the CFA node
  private void addEnvTransitionToNode(CFANode pNode, RelyGuaranteeCFAEdge pEnvTransition) {
    pEnvTransition.setPredecessor(pNode);
    pEnvTransition.setSuccessor(pNode);
    pNode.addLeavingEdge(pEnvTransition);
    pNode.addEnteringEdge(pEnvTransition);
  }


  private void printEnvTransitions() {
    System.out.println();
    System.out.println("## Env transitions created ##");
    for (RelyGuaranteeEnvironmentalTransition edge : this.newEnvTransitions){
      System.out.println(edge);
    }
    // TODO Auto-generated method stub

  }






  @Override
  public ConfigurableProgramAnalysis[] getCPAs() {
    // TODO Auto-generated method stub
    return this.cpas;
  }


  @Override
  public Result getResult() {
    // TODO Auto-generated method stub
    return null;
  }

}

/*
// placeholder for environmental transitions
class EnvTransitions{
  Vector<RelyGuaranteeEnvEdge> envTrans;

  public EnvTransitions(Vector<RelyGuaranteeEnvEdge> pEnvTrans) {
    this.envTrans = pEnvTrans;
  }

  Vector<RelyGuaranteeEnvEdge> getEnvTransitions() {
     return envTrans;
   }

  addEnvTransition(RelyGuaranteeEnvEdge edge){
    envTrans.add(edge);
  }

}*/
