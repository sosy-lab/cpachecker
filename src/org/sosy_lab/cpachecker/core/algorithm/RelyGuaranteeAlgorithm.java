/*
 *  CPAchecker is a tool for configurable software verification.
 *  This file is part of CPAchecker.
 *
 *  Copyright (C) 2007-2011  Dirk Beyer
 *  All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *
 *  CPAchecker web page:
 *    http://cpachecker.sosy-lab.org
 */
package org.sosy_lab.cpachecker.core.algorithm;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import java.util.Vector;
import java.util.Map.Entry;

import org.sosy_lab.common.LogManager;
import org.sosy_lab.cpachecker.cfa.CFA;
import org.sosy_lab.cpachecker.cfa.DOTBuilder;
import org.sosy_lab.cpachecker.cfa.objectmodel.CFAFunctionDefinitionNode;
import org.sosy_lab.cpachecker.cfa.objectmodel.CFANode;
import org.sosy_lab.cpachecker.core.CPAcheckerResult.Result;
import org.sosy_lab.cpachecker.core.interfaces.ConfigurableProgramAnalysis;
import org.sosy_lab.cpachecker.core.interfaces.Statistics;
import org.sosy_lab.cpachecker.core.interfaces.StatisticsProvider;
import org.sosy_lab.cpachecker.core.reachedset.ReachedSet;
import org.sosy_lab.cpachecker.cpa.relyguarantee.RelyGuaranteeEnvEdge;

public class RelyGuaranteeAlgorithm implements ConcurrentAlgorithm, StatisticsProvider{


  private int threadNo;
  private CFA[] cfas;
  private CFAFunctionDefinitionNode[] mainFunctions;
  private ConfigurableProgramAnalysis[] cpas;
  private LogManager logger;

  // placeholder for environmental transition generated by a given thread
  private Vector<RelyGuaranteeEnvEdge>[] envTransitionsFromThread;
  // CPA for each thread
  private RelyGuaranteeThreadCPAAlgorithm[] threadCPA;
  //
  public Set<String> globalVariables;



  public RelyGuaranteeAlgorithm(CFA[] pCfas, CFAFunctionDefinitionNode[] pMainFunctions, ConfigurableProgramAnalysis[] pCpas, LogManager logger) {
    this.threadNo = pCfas.length;
    this.cfas = pCfas;
    this.mainFunctions = pMainFunctions;
    this.cpas = pCpas;
    this.logger = logger;
    globalVariables = new HashSet<String>();
    globalVariables.add("g");

    envTransitionsFromThread = new Vector[this.threadNo];
    threadCPA = new RelyGuaranteeThreadCPAAlgorithm[this.threadNo];

    for (int i=0; i< this.threadNo; i++){
      envTransitionsFromThread[i] = new Vector<RelyGuaranteeEnvEdge>();
    }
    // create RelyGuaranteeThreadCPAAlgorithms for each thread
    for (int i=0; i< this.threadNo; i++){
      threadCPA[i] = new RelyGuaranteeThreadCPAAlgorithm(cpas[i],envTransitionsFromThread[i],logger, globalVariables, i);
    }
    // create DOT file for the original CFA
    for (int i=0; i< this.threadNo; i++){
      this.dumpDot(i, "test/output/oldCFA"+i+".dot");
    }
  }


  @Override
  public void collectStatistics(Collection<Statistics> pStatsCollection) {
    // TODO Auto-generated method stub

  }

  public boolean run(ReachedSet[] pReached) {
    boolean finish = true;
    try{
      do {
        threadCPA[0].run(pReached[0]);
        printEnvTransitions(0);
        addEnvTransitionsToCFA(1);
        this.dumpDot(1, "test/output/newCFA"+1+".dot");
        threadCPA[1].run(pReached[1]);

      }
      while (!finish);
    } catch(Exception e){
      e.printStackTrace();
    }

    return true;
  }

  private void dumpDot(int pI, String file) {
    FileWriter fstream;
    try {
      fstream = new FileWriter(file);
      BufferedWriter out = new BufferedWriter(fstream);;
      String s = DOTBuilder.generateDOT(this.cfas[pI].getFunctions().values(), this.mainFunctions[pI]);
      out.write(s);
      out.close();
    } catch (IOException e) {
      e.printStackTrace();
    }
  }


  // add env transitions from other threads to CFA no. pI
  private void addEnvTransitionsToCFA(int pI) {
    // loop over env transitions from threads other than pI
    for(int i=0; i<this.threadNo; i++){
      for (RelyGuaranteeEnvEdge envTransition : this.envTransitionsFromThread[i]){
        // get nodes for the CFA
        CFA cfa = this.cfas[pI];
        for(Entry<String, CFANode> entry :   cfa.getCFANodes().entries()){
          CFANode node = entry.getValue();
          addEnvTransitionToNode(node, new  RelyGuaranteeEnvEdge(envTransition));
        }
      }
    }
  }

  // add the env transition to the CFA node
  private void addEnvTransitionToNode(CFANode pNode, RelyGuaranteeEnvEdge pEnvTransition) {
    pEnvTransition.setPredecessor(pNode);
    pEnvTransition.setSuccessor(pNode);
    pNode.addLeavingEdge(pEnvTransition);
    pNode.addEnteringEdge(pEnvTransition);
    //System.out.println("# Added node "+pEnvTransition+"\n to the node \n"+pNode);
  }


  private void printEnvTransitions(int pI) {
    System.out.println("# Env transitions created by thread "+pI+" #");
    for (RelyGuaranteeEnvEdge edge : this.envTransitionsFromThread[pI]){
      System.out.println(edge);
    }
    // TODO Auto-generated method stub

  }


  public Result getResult() {
    // TODO Auto-generated method stub
    return Result.SAFE;
  }



  @Override
  public ConfigurableProgramAnalysis[] getCPAs() {
    // TODO Auto-generated method stub
    return this.cpas;
  }

}

/*
// placeholder for environmental transitions
class EnvTransitions{
  Vector<RelyGuaranteeEnvEdge> envTrans;

  public EnvTransitions(Vector<RelyGuaranteeEnvEdge> pEnvTrans) {
    this.envTrans = pEnvTrans;
  }

  Vector<RelyGuaranteeEnvEdge> getEnvTransitions() {
     return envTrans;
   }

  addEnvTransition(RelyGuaranteeEnvEdge edge){
    envTrans.add(edge);
  }

}*/
