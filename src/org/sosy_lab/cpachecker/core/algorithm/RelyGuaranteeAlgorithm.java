/*
 *  CPAchecker is a tool for configurable software verification.
 *  This file is part of CPAchecker.
 *
 *  Copyright (C) 2007-2011  Dirk Beyer
 *  All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *
 *  CPAchecker web page:
 *    http://cpachecker.sosy-lab.org
 */
package org.sosy_lab.cpachecker.core.algorithm;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import java.util.Vector;
import java.util.Map.Entry;

import org.sosy_lab.common.LogManager;
import org.sosy_lab.common.configuration.Configuration;
import org.sosy_lab.common.configuration.InvalidConfigurationException;
import org.sosy_lab.common.configuration.Option;
import org.sosy_lab.common.configuration.Options;
import org.sosy_lab.cpachecker.cfa.CFA;
import org.sosy_lab.cpachecker.cfa.DOTBuilder;
import org.sosy_lab.cpachecker.cfa.RelyGuaranteeCFA;
import org.sosy_lab.cpachecker.cfa.ast.IASTExpressionAssignmentStatement;
import org.sosy_lab.cpachecker.cfa.ast.IASTIdExpression;
import org.sosy_lab.cpachecker.cfa.ast.IASTNode;
import org.sosy_lab.cpachecker.cfa.objectmodel.BlankEdge;
import org.sosy_lab.cpachecker.cfa.objectmodel.CFAEdge;
import org.sosy_lab.cpachecker.cfa.objectmodel.CFAEdgeType;
import org.sosy_lab.cpachecker.cfa.objectmodel.CFAFunctionDefinitionNode;
import org.sosy_lab.cpachecker.cfa.objectmodel.CFANode;
import org.sosy_lab.cpachecker.core.CPAcheckerResult.Result;
import org.sosy_lab.cpachecker.core.interfaces.AbstractElement;
import org.sosy_lab.cpachecker.core.interfaces.ConfigurableProgramAnalysis;
import org.sosy_lab.cpachecker.core.interfaces.Statistics;
import org.sosy_lab.cpachecker.core.interfaces.StatisticsProvider;
import org.sosy_lab.cpachecker.core.reachedset.ReachedSet;
import org.sosy_lab.cpachecker.cpa.relyguarantee.RelyGuaranteeCFAEdge;
import org.sosy_lab.cpachecker.cpa.relyguarantee.RelyGuaranteeEnvironmentalTransition;
import org.sosy_lab.cpachecker.exceptions.CPAException;
import org.sosy_lab.cpachecker.exceptions.UnrecognizedCFAEdgeException;
import org.sosy_lab.cpachecker.util.AbstractElements;
import org.sosy_lab.cpachecker.util.predicates.CachingPathFormulaManager;
import org.sosy_lab.cpachecker.util.predicates.PathFormula;
import org.sosy_lab.cpachecker.util.predicates.PathFormulaManagerImpl;
import org.sosy_lab.cpachecker.util.predicates.SSAMap;
import org.sosy_lab.cpachecker.util.predicates.SSAMap.SSAMapBuilder;
import org.sosy_lab.cpachecker.util.predicates.bdd.BDDRegionManager;
import org.sosy_lab.cpachecker.util.predicates.interfaces.Formula;
import org.sosy_lab.cpachecker.util.predicates.interfaces.FormulaManager;
import org.sosy_lab.cpachecker.util.predicates.interfaces.PathFormulaManager;
import org.sosy_lab.cpachecker.util.predicates.interfaces.RegionManager;
import org.sosy_lab.cpachecker.util.predicates.interfaces.TheoremProver;
import org.sosy_lab.cpachecker.util.predicates.mathsat.MathsatFormulaManager;
import org.sosy_lab.cpachecker.util.predicates.mathsat.MathsatTheoremProver;

import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

@Options(prefix="cpa.relyguarantee")
public class RelyGuaranteeAlgorithm implements ConcurrentAlgorithm, StatisticsProvider{

  @Option(name="symbolcCoverageCheck",description="Use a theorem prover to remove covered environemtal transitions" +
                      " if false perform only a syntatic check for equivalence")
  private boolean checkEnvTransitionCoverage = true;

  @Option(description="List of variables global to multiple threads")
  protected String[] globalVariables = {};

  // TODO option for CFA export

  private int threadNo;
  private RelyGuaranteeCFA[] cfas;
  private CFAFunctionDefinitionNode[] mainFunctions;
  private ConfigurableProgramAnalysis[] cpas;
  private LogManager logger;

  // unprocessed env transitions
  private Vector<RelyGuaranteeEnvironmentalTransition> newEnvTransitions;
  // all rely guarantee edges  generated by thread i that have been processed before
  private Vector<RelyGuaranteeEnvironmentalTransition>[] envTransitionsCreatedBy;
  // rely env edges valid for thread i, that have been applied on the CFA
  private Vector<RelyGuaranteeCFAEdge>[] envEdgesForThread;
  // rely guarantee edges valid for thread i, that haven't been applied yet on the CFA
  private Vector<RelyGuaranteeCFAEdge>[] newEnvEgesForThread;

  // CPAAlgorithm for each thread
  private RelyGuaranteeThreadCPAAlgorithm[] threadCPA;
  // data structure for deciding whether a variable is global
  private Set<String> globalVarsSet;

  // managers
  private PathFormulaManager pfManager;
  private FormulaManager     fManager;
  private TheoremProver      tProver;
  private RegionManager rManager = BDDRegionManager.getInstance();



  public RelyGuaranteeAlgorithm(CFA[] pCfas, CFAFunctionDefinitionNode[] pMainFunctions, ConfigurableProgramAnalysis[] pCpas, Configuration config, LogManager logger) {
    this.threadNo = pCfas.length;
    this.mainFunctions = pMainFunctions;
    this.cpas = pCpas;
    this.logger = logger;

    // remember the original CFAs
    cfas = new RelyGuaranteeCFA[threadNo];
    try {
      for (int i=0; i<threadNo; i++) {
        cfas[i] = new RelyGuaranteeCFA(pCfas[i]);
      }
    } catch (UnrecognizedCFAEdgeException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }

    // TODO add option for caching
    MathsatFormulaManager msatFormulaManager;
    try {
      config.inject(this, RelyGuaranteeAlgorithm.class);
      // set up managers
      msatFormulaManager = MathsatFormulaManager .getInstance(config, logger);
      this.fManager = msatFormulaManager;
      tProver = MathsatTheoremProver.getInstance(msatFormulaManager);
      PathFormulaManager pfMgr  = PathFormulaManagerImpl.getInstance(msatFormulaManager, config, logger);
      pfMgr = CachingPathFormulaManager.getInstance(pfMgr);
      this.pfManager = pfMgr;
    } catch (InvalidConfigurationException e) {
      e.printStackTrace();
    }

    // create a set of global variables
    globalVarsSet = new HashSet<String>();
    for (String var : globalVariables) {
      globalVarsSet.add(var);
    }

    threadCPA = new RelyGuaranteeThreadCPAAlgorithm[this.threadNo];
    newEnvTransitions = new Vector<RelyGuaranteeEnvironmentalTransition>();
    envTransitionsCreatedBy = new Vector[this.threadNo];
    envEdgesForThread = new Vector[this.threadNo];
    newEnvEgesForThread = new Vector[this.threadNo];

    for (int i=0; i< this.threadNo; i++){
      threadCPA[i] = new RelyGuaranteeThreadCPAAlgorithm(cpas[i],newEnvTransitions,config, logger, i);
      envTransitionsCreatedBy[i] = new Vector<RelyGuaranteeEnvironmentalTransition>();
      envEdgesForThread[i] = new Vector<RelyGuaranteeCFAEdge>();
      newEnvEgesForThread[i] = new Vector<RelyGuaranteeCFAEdge>();
    }
    // create DOT file for the original CFA
    for (int i=0; i< this.threadNo; i++){
      this.dumpDot(i, "test/output/oldCFA"+i+".dot");
    }
  }


  @Override
  public void collectStatistics(Collection<Statistics> pStatsCollection) {
    // TODO Auto-generated method stub

  }


  public Result run(ReachedSet[] reached, boolean stopAfterError) {
    boolean error = false;
    try{
      // run every thread at least once
      for (int i=0; i<reached.length; i++){
        addEnvTransitionsToCFA(i);
        error = runThread(i, reached[i], stopAfterError);
        if (error) {
          break;
        }
        newEnvEgesForThread[i].removeAllElements();
      //  cfas[i].resetNodes();

        printEnvTransitions();
        processEnvTransitions(i);
      }
      // run until no new env can be applied to any thread
      int i = pickThread();
      while(i != -1 && !error) {
        setWaitlist(reached[i]);
        addEnvTransitionsToCFA(i);
        error = runThread(i, reached[i], stopAfterError);
        newEnvEgesForThread[i].removeAllElements();
        // cfas[i].resetNodes();
        printEnvTransitions();
        processEnvTransitions(i);
        i = pickThread();
      }

    } catch(Exception e){
      e.printStackTrace();
    }

    // result analysis
    int i=0;
    do {
      if (Iterables.any(reached[i], AbstractElements.IS_TARGET_ELEMENT)) {
        return Result.UNSAFE;
      }
      /*
      if (reached[i].hasWaitingElement()) {
        logger.log(Level.WARNING, "Analysis not completed: there are still elements to be processed.");
        return Result.UNKNOWN;
      }
      if (!sound) {
      logger.log(Level.WARNING, "Analysis incomplete: no errors found, but not everything could be checked.");
      return Result.UNKNOWN;*/

      i++;
    } while (i<this.threadNo );
    return Result.SAFE;
  }




  // put relevant states in the waitlist
  private void setWaitlist(ReachedSet reachedSet) {
    // if waitlist not empty, then this is the first run of for this thread
    if (reachedSet.getWaitlistSize()>0){
      return;
    }
    for(AbstractElement element : reachedSet.getReached()){
      reachedSet.reAddToWaitlist(element);
    }
  }

  // convert env transitions into relevant CFA edges
  private void processEnvTransitions(int i) {
    syntacticCoverageCheck(i);
    // generate CFA edges from env transitions
    Vector<RelyGuaranteeCFAEdge> rgEdges = new Vector<RelyGuaranteeCFAEdge>();
    for (RelyGuaranteeEnvironmentalTransition  et: newEnvTransitions){
      Formula f = et.getFormula();
      PathFormula pf = et.getPathFormula();
      CFAEdge localEdge = et.getEdge();
      PathFormula newPF = pfManager.makeAnd(pf, f);
      newPF = pfManager.normalize(newPF);
      RelyGuaranteeCFAEdge rgEdge = new RelyGuaranteeCFAEdge(localEdge, newPF, et.getSourceThread());
      rgEdges.add(rgEdge);
    }
    newEnvTransitions.removeAllElements();

    if (checkEnvTransitionCoverage) {
      semanticCoverageCheck(rgEdges, i);
    }

    // distribute the env edge to other threads
    System.out.println("## Env after filtering ##");
    RelyGuaranteeCFAEdge edge;
    while (!rgEdges.isEmpty()){
      edge = rgEdges.remove(0);
      System.out.println(edge);
      for (int j=0; j<this.threadNo; j++){
        if (j!=i) {
          this.newEnvEgesForThread[j].add(new RelyGuaranteeCFAEdge(edge));
        }
      }
    }
  }



  // remove env transitions that have been produced before by thread i  or are obviously unnecessary
  private void syntacticCoverageCheck(int i) {
    Vector<RelyGuaranteeEnvironmentalTransition> toDelete = new Vector<RelyGuaranteeEnvironmentalTransition>();


    for (RelyGuaranteeEnvironmentalTransition  et: newEnvTransitions){
      Formula f = et.getFormula();
      PathFormula pf = et.getPathFormula();
      CFAEdge localEdge = et.getEdge();
      int sourceThread = et.getSourceThread();
      // don't generate transition with 'false' or transitions that assign to local variables
      if (f.isFalse() || pf.getFormula().isFalse() || isLocalAssigment(localEdge)) {
        toDelete.add(et);
        System.out.println("Removed (syn,false): "+et);
      } else {
        // check if the transition has been produced before
        for (RelyGuaranteeEnvironmentalTransition oldEt : envTransitionsCreatedBy[i]) {
          if (et.equals(oldEt)) {
            toDelete.add(et);
            System.out.println("Removed (syn,old): "+et);
          }
        }
      }
    }
    newEnvTransitions.removeAll(toDelete);

    // remove duplicate transitions from newEnvTransitions
    toDelete.removeAllElements();
    Vector<RelyGuaranteeEnvironmentalTransition> toProcess = new Vector<RelyGuaranteeEnvironmentalTransition>(newEnvTransitions);
    while (! toProcess.isEmpty()){
      RelyGuaranteeEnvironmentalTransition et = toProcess.remove(0);
      for (RelyGuaranteeEnvironmentalTransition other : toProcess){
        if (et.equals(other)){
          toDelete.add(other);
          System.out.println("Removed (syn,new): "+other);
        }
      }
    }
    newEnvTransitions.removeAll(toDelete);
    envTransitionsCreatedBy[i].addAll(newEnvTransitions);
  }

  // returns true iff edge is an assignment to a non-global variable
  private boolean isLocalAssigment(CFAEdge edge) {
    String var = getLhsVariable(edge);
    if (var != null && !globalVarsSet.contains(var)){
      return true;
    }
    return false;
  }


  // get the variable in the lhs of an expression or return null
  private String getLhsVariable(CFAEdge edge){
    IASTNode node = edge.getRawAST();
    if (node instanceof IASTExpressionAssignmentStatement) {
      IASTExpressionAssignmentStatement stmNode = (IASTExpressionAssignmentStatement) node;
      if (stmNode.getLeftHandSide() instanceof IASTIdExpression) {
        IASTIdExpression idExp = (IASTIdExpression) stmNode.getLeftHandSide();
        return new String(idExp.getName());
      }
    }
    return null;
  }


  // removes new  and old edges (from rgEdges and envEdgesForThread[i], respectivly) that are covered
  private void semanticCoverageCheck(Vector<RelyGuaranteeCFAEdge> rgEdges, int i) {

    //Vector<RelyGuaranteeCFAEdge> uncovered = new Vector<RelyGuaranteeCFAEdge>(rgEdges);
    Vector<RelyGuaranteeCFAEdge> toProcess = new Vector<RelyGuaranteeCFAEdge>(rgEdges);
    Vector<RelyGuaranteeCFAEdge> toDelete = new Vector<RelyGuaranteeCFAEdge>();

    // remove edges in rgEdges that are covered by some other edge in this vector
    for(RelyGuaranteeCFAEdge edge : rgEdges){
      for(RelyGuaranteeCFAEdge other : toProcess){
        if (!edge.equals(other) && isCovered(edge, other)){
          toProcess.remove(edge);
          toDelete.add(edge);
          System.out.println("Semantic check "+edge+" => "+other);
          break;
        }
      }
    }

   rgEdges.removeAll(toDelete);
   // removed edges in rgEdges or in envEdgesForThread[i] if they are covered
   while(! toProcess.isEmpty()){
     RelyGuaranteeCFAEdge newEdge = toProcess.remove(0);
     for (RelyGuaranteeCFAEdge oldEdge : envEdgesForThread[i]){
       if (isCovered(newEdge, oldEdge)) {
         // newEdge => oldEdge
         rgEdges.remove(newEdge);
         System.out.println("Semantic check "+newEdge+" => "+oldEdge);
         break;
       } else if (isCovered(oldEdge, newEdge)) {
         // oldEdge => newEdge, but not newEdge => oldEdge
         toDelete.add(oldEdge);
         rgEdges.add(newEdge);
         System.out.println("Semantic check "+oldEdge+" => "+newEdge);
       }
     }
     envEdgesForThread[i].removeAll(toDelete);
     toDelete.removeAllElements();
   }
  }

  //returns true if env1 => env2, sound but not complete
  private boolean isCovered(RelyGuaranteeCFAEdge env1, RelyGuaranteeCFAEdge env2) {
    if (env1.equals(env2)){
      return true;
    }
    if (!env1.getLocalEdge().equals(env2.getLocalEdge())){
      return false;
    }

    Formula f1 = env1.getPathFormula().getFormula();
    Formula f2 = env2.getPathFormula().getFormula();
    SSAMap s1 = env1.getPathFormula().getSsa();
    SSAMap s2 = env2.getPathFormula().getSsa();
    if (f1.isFalse() || f2.isTrue()) {
      return true;
    }
    /*int offset = env1.getPathFormula().getPrimedNo() + 1;
    Formula f2p = fManager.primeFormula(f2, offset);
    Formula ef = fManager.makeTrue();
    // every last unprimed value in f2 must equal to the  last value in f1
    for (String var : s2.allVariables()){
      // skip primed variables
      if(PathFormula.getPrimeData(var).getSecond()>0) {
        continue;
      }
      int idx1 = s1.getIndex(var);
      if (idx1 == -1){
        idx1 = 1;
      }
      int idx2 = s2.getIndex(var);
      String name2 = var+"^"+offset;
      Formula var1 = fManager.makeVariable(var, idx1);
      Formula var2 = fManager.makeVariable(name2, idx2);
      Formula eq = fManager.makeEqual(var1, var2);
      ef = fManager.makeAnd(ef, eq);
    }*/
    Formula nImpl = fManager.makeAnd(f1, fManager.makeNot(f2));
    tProver.init();
     try {
      return tProver.isUnsat(nImpl);
    } finally {
      tProver.reset();
    }
  }

  // runs a thread
  private boolean runThread(int i, ReachedSet reached, boolean stopAfterError) throws CPAException, InterruptedException {
    boolean sound = true;
    do {
      sound &=  threadCPA[i].run(reached);
    } while (!stopAfterError && reached.hasWaitingElement());

    if (reached.hasWaitingElement()) {
      return true;
    }
    return false;
  }

  // chose the next thread for running; return -1 if there are no new env edges for any thread
  private int pickThread() {
    int i=0;
    while(i<this.threadNo && this.newEnvEgesForThread[i].isEmpty()){
      i++;
    }
    if (i==this.threadNo){
      return -1;
    }
    else {
      return i;
    }
  }

  // writes a DOT file for CFA pI
  private void dumpDot(int pI, String file) {
    FileWriter fstream;
    try {
      fstream = new FileWriter(file);
      BufferedWriter out = new BufferedWriter(fstream);;
      String s = DOTBuilder.generateDOT(this.cfas[pI].getFunctions().values(), this.mainFunctions[pI]);
      out.write(s);
      out.close();
    } catch (IOException e) {
      e.printStackTrace();
    }
  }

  // apply env transitions to CFA no. i and return true if at least one node has been applied
  private boolean addEnvTransitionsToCFA(int i) {
    boolean modified = false;
    RelyGuaranteeCFA cfa = this.cfas[i];
    Multimap<CFANode, String> map = cfa.getRhsVariables();

    // remove old env edges from the CFA
    for (CFANode node : cfa.getCFANodes().values()){
      for (int j=0; j<node.getNumLeavingEdges(); j++) {
        CFAEdge edge = node.getLeavingEdge(j);
        if (edge.getEdgeType() == CFAEdgeType.RelyGuaranteeCFAEdge){
          node.removeLeavingEdge(edge);
        }
      }
    }
    this.dumpDot(i, "test/output/revertedCFA"+i+".dot");
    // iterate over both new and old env edges
    Vector<RelyGuaranteeCFAEdge> union = new Vector<RelyGuaranteeCFAEdge>(envEdgesForThread[i]);
    union.addAll(newEnvEgesForThread[i]);

    for (RelyGuaranteeCFAEdge envTransition : union){
      String var = getLhsVariable(envTransition.getLocalEdge());
      for(Entry<String, CFANode> entry :   cfa.getCFANodes().entries()){
        CFANode node = entry.getValue();
        // check if the rhs of any edge leaving the node reads the variable assigned by 'envTransition'
        if (map.get(node).contains(var)){
          addEnvTransitionToNode(node, new  RelyGuaranteeCFAEdge(envTransition));
          modified = true;
        }
      }
    }
    this.dumpDot(i, "test/output/newCFA"+i+".dot");

    return modified;
  }


  // add the env transition to the CFA node
  private void addEnvTransitionToNode(CFANode pNode, RelyGuaranteeCFAEdge pEnvTransition) {
    pEnvTransition.setPredecessor(pNode);
    pEnvTransition.setSuccessor(pNode);
    pNode.addLeavingEdge(pEnvTransition);
    pNode.addEnteringEdge(pEnvTransition);
  }


  private void printEnvTransitions() {
    System.out.println();
    System.out.println("## Env transitions created ##");
    for (RelyGuaranteeEnvironmentalTransition edge : this.newEnvTransitions){
      System.out.println(edge);
    }
  }


  @Override
  public ConfigurableProgramAnalysis[] getCPAs() {
    // TODO Auto-generated method stub
    return this.cpas;
  }


  @Override
  public Result getResult() {
    // TODO Auto-generated method stub
    return null;
  }

  // for testing 'isCovered' method, commented cases are for completness
  private boolean isCoveredTest() {
    Formula g1 = fManager.makeVariable("g", 1);
    Formula g2 = fManager.makeVariable("g", 2);
    Formula g3 = fManager.makeVariable("g", 3);
    Formula t = fManager.makeTrue();
    Formula f = fManager.makeFalse();
    Formula r2 = fManager.makeVariable("r", 2);
    Formula n0 = fManager.makeNumber(0);
    Formula n1 = fManager.makeNumber(1);
    Formula n2 = fManager.makeNumber(2);
    Formula g2_1 = fManager.makeEqual(g1, n1);
    Formula g2_2 = fManager.makeEqual(g2, n2);
    Formula r2_1 = fManager.makeEqual(r2, n1);
    Formula g1geq0 = fManager.makeGeq(g1, n0);
    Formula g1lt0 = fManager.makeLt(g1, n0);
    Formula g2minus1 = fManager.makeMinus(g2, n1);
    Formula g3_g2minus1 = fManager.makeEqual(g3, g2minus1);
    Formula l2 = fManager.makeAnd(fManager.makeOr(g1geq0, g1lt0),r2_1);
    Formula l3 = fManager.makeAnd(r2_1, g1geq0);
    Formula l4 = fManager.makeAnd(g2_2, g3_g2minus1);
    // test I
    CFANode node = new CFANode(0, "f");
    CFAEdge edge = new BlankEdge("test",0,node,node);
    SSAMapBuilder ssa1_I = SSAMap.emptySSAMap().builder();
    ssa1_I.setIndex("g", 1);
    PathFormula pf1_I = new PathFormula(g2_1,ssa1_I.build(),0);
    PathFormula pf2_It = new PathFormula(t,SSAMap.emptySSAMap(),0);
    PathFormula pf2_If = new PathFormula(f,SSAMap.emptySSAMap(),0);
    RelyGuaranteeCFAEdge ef1_I = new RelyGuaranteeCFAEdge(edge, pf1_I, 0);
    RelyGuaranteeCFAEdge ef2_It = new RelyGuaranteeCFAEdge(edge, pf2_It, 0);
    RelyGuaranteeCFAEdge ef2_If = new RelyGuaranteeCFAEdge(edge, pf2_If, 0);
    if (!isCovered(ef1_I, ef2_It)){
      return false;
    }
    if (isCovered(ef1_I, ef2_If)){
      return false;
    }

    // test III
    RelyGuaranteeCFAEdge ef1_III = ef1_I;
    SSAMapBuilder ssa2_IIIt = SSAMap.emptySSAMap().builder();
    ssa2_IIIt.setIndex("g", 2);
    PathFormula pf2_IIIt = new PathFormula(l4, ssa2_IIIt.build(), 0);
    PathFormula pf2_IIIf = new PathFormula(g2_2, ssa1_I.build(), 0);
    RelyGuaranteeCFAEdge ef2_IIIt = new RelyGuaranteeCFAEdge(edge, pf2_IIIt, 0);
    RelyGuaranteeCFAEdge ef2_IIIf = new RelyGuaranteeCFAEdge(edge, pf2_IIIf, 0);
   /* if (!isCovered(ef1_III, ef2_IIIt)){
      return false;
    }*/
    if (isCovered(ef1_III, ef2_IIIf)){
      return false;
    }
    // test II
    SSAMapBuilder ssa1_II = SSAMap.emptySSAMap().builder();
    ssa1_II.setIndex("r", 1);
    PathFormula pf1_II = new PathFormula(r2_1,ssa1_II.build(),0);
    SSAMapBuilder ssa2_IIt = SSAMap.emptySSAMap().builder();
    ssa2_IIt.setIndex("r", 1);
    ssa2_IIt.setIndex("g", 2);
    PathFormula pf2_IIt = new PathFormula(l2,ssa2_IIt.build(),0);
    PathFormula pf2_IIf = new PathFormula(l3,ssa2_IIt.build(),0);
    RelyGuaranteeCFAEdge ef1_II = new RelyGuaranteeCFAEdge(edge, pf1_II, 0);
    RelyGuaranteeCFAEdge ef2_IIt = new RelyGuaranteeCFAEdge(edge, pf2_IIt, 0);
    RelyGuaranteeCFAEdge ef2_IIf = new RelyGuaranteeCFAEdge(edge, pf2_IIf, 0);
   /* if (!isCovered(ef1_II, ef2_IIt)){
      return false;
    }*/
    if (isCovered(ef1_II, ef2_IIf)){
      return false;
    }

    return true;
  }


}

/*
// placeholder for environmental transitions
class EnvTransitions{
  Vector<RelyGuaranteeEnvEdge> envTrans;

  public EnvTransitions(Vector<RelyGuaranteeEnvEdge> pEnvTrans) {
    this.envTrans = pEnvTrans;
  }

  Vector<RelyGuaranteeEnvEdge> getEnvTransitions() {
     return envTrans;
   }

  addEnvTransition(RelyGuaranteeEnvEdge edge){
    envTrans.add(edge);
  }

}*/
