// This file is part of CPAchecker,
// a tool for configurable software verification:
// https://cpachecker.sosy-lab.org
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

package org.sosy_lab.cpachecker.cfa.export.json.serialization;

import static com.google.common.base.Preconditions.checkNotNull;

import java.util.HashMap;
import java.util.Map;
import org.sosy_lab.cpachecker.cfa.export.json.CfaJsonExport;
import org.sosy_lab.cpachecker.cfa.export.json.mixins.AAstNodeMixin;
import org.sosy_lab.cpachecker.cfa.export.json.mixins.TypeMixin;

/**
 * This class is responsible for generating unique IDs for objects based on their class names.
 *
 * <p>It provides a mechanism to create unique identifiers by appending a counter to the class name.
 *
 * <p>It maintains a map to keep track of the counters for each class name encountered.
 *
 * @see CfaJsonExport
 * @see CfaEdgeIdGenerator
 * @see AAstNodeMixin
 * @see TypeMixin
 */
public class SimpleNameIdGenerator extends AbstractStringIdGenerator {
  private static final long serialVersionUID = -2736431011237852503L;

  protected final Map<String, Integer> nameToCounter;

  /* Jackson requires a default constructor for serialization. */
  public SimpleNameIdGenerator() {
    this(Object.class);
  }

  /**
   * Constructs a new {@link SimpleNameIdGenerator}.
   *
   * @param pScope The class scope for which the ID generator is created.
   */
  protected SimpleNameIdGenerator(Class<?> pScope) {
    super(pScope);
    this.nameToCounter = new HashMap<>();
  }

  /**
   * Creates a new instance of {@link SimpleNameIdGenerator} with the specified scope.
   *
   * @param pScope The class scope for the new instance.
   * @return a new instance of {@link SimpleNameIdGenerator}.
   */
  @Override
  protected AbstractStringIdGenerator newInstance(Class<?> pScope) {
    return new SimpleNameIdGenerator(pScope);
  }

  /**
   * Generates a unique ID for the given object based on its class name.
   *
   * <p>The ID is generated by appending a counter to the class name. If the class name has been
   * encountered before, the counter is incremented. Otherwise, the counter starts at 0.
   *
   * <p>In other words, each (sub)class gets its own counter.
   *
   * @param pForObject The object to generate an ID for.
   * @return a unique ID string for the given object in the format "<className>_<counter>".
   * @throws NullPointerException if the provided object is null.
   */
  @Override
  public String generateId(Object pForObject) {
    checkNotNull(pForObject, "The object to generate an ID for must not be null");

    String name = pForObject.getClass().getSimpleName();

    if (nameToCounter.containsKey(name)) {
      int counter = nameToCounter.get(name);
      nameToCounter.put(name, counter + 1);

      return name + "_" + counter;

    } else {
      /* Next ID is 1 */
      nameToCounter.put(name, 1);

      return name + "_0";
    }
  }
}
