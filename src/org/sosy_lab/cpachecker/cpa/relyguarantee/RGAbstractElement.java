/*
 *  CPAchecker is a tool for configurable software verification.
 *  This file is part of CPAchecker.
 *
 *  Copyright (C) 2007-2011  Dirk Beyer
 *  All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *
 *  CPAchecker web page:
 *    http://cpachecker.sosy-lab.org
 */
package org.sosy_lab.cpachecker.cpa.relyguarantee;

import org.sosy_lab.cpachecker.cfa.objectmodel.CFANode;
import org.sosy_lab.cpachecker.core.interfaces.AbstractElement;
import org.sosy_lab.cpachecker.core.interfaces.Partitionable;
import org.sosy_lab.cpachecker.cpa.relyguarantee.environment.transitions.RGEnvTransition;
import org.sosy_lab.cpachecker.util.predicates.AbstractionFormula;
import org.sosy_lab.cpachecker.util.predicates.PathFormula;

import com.google.common.collect.ImmutableMap;

public class RGAbstractElement implements AbstractElement, Partitionable {

  private static final ImmutableMap<Integer, RGEnvTransition> emptyMap = ImmutableMap.of();

  /**
   * Path formula for abstraction.
   */
  private final PathFormula absPathFormula;

  /**
   * Path formula for refinement. Every env. application has an unique prime number in the formula.
   */
  private final PathFormula refPathFormula;

  /** The abstraction which is updated only on abstraction locations */
  private final AbstractionFormula abstractionFormula;

  /**
   * Map from unique prime numbers to env. transition applied.
   */
  private final ImmutableMap<Integer, RGEnvTransition> envApplicationMap;

  /**
   * The element after merging this one.
   */
  private RGAbstractElement mergedInto = null;

  private final int blockItpSize;

  private final int itpSize;

  public RGAbstractElement(PathFormula absPf,
      PathFormula refPf,
      AbstractionFormula abs,
      ImmutableMap<Integer, RGEnvTransition> envRefMap,
      int itpSize) {
    this.absPathFormula = absPf;
    this.refPathFormula = refPf;
    this.abstractionFormula = abs;
    this.envApplicationMap = envRefMap;
    this.blockItpSize = itpSize;

    int size = itpSize + this.absPathFormula.getLength();
    for (RGEnvTransition et : envRefMap.values()){
      size += et.getTargetARTElement().getInterpolationSize();
    }
    this.itpSize = size;
  }


  /**
   * Path formula for abstraction.
   * @return
   */
  public PathFormula getAbsPathFormula() {
    return absPathFormula;
  }


  /**
   * Path formula for refinement.
   * @return
   */
  public PathFormula getRefPathFormula() {
    return refPathFormula;
  }



  public AbstractionFormula getAbstractionFormula() {
    return abstractionFormula;
  }



  public ImmutableMap<Integer, RGEnvTransition> getEnvApplicationMap() {
    return envApplicationMap;
  }


  public RGAbstractElement getMergedInto() {
    return mergedInto;
  }


  public void setMergedInto(RGAbstractElement pMergedInto) {
    mergedInto = pMergedInto;
  }

  public int getBlockItpSize() {
    return blockItpSize;
  }

  public int getItpSize(){
    return itpSize;
  }


  @Override
  public String toString() {
    return "RG element (not-abs): "+abstractionFormula+", absPf: "+this.absPathFormula+", refPf: "+this.refPathFormula;
  }

  @Override
  public Object getPartitionKey() {
    // TODO abstractionFormula;
    return null;
  }


  @Override
  public int hashCode() {
    return (83 * abstractionFormula.hashCode()) +absPathFormula.hashCode() + 7*refPathFormula.hashCode();
    //return abstractionFormula.hashCode();
  }

  /**
   * Marker type for abstract elements that were generated by computing an
   * abstraction.
   */
  public static class AbstractionElement extends RGAbstractElement {



    /** Refinement path formula in the path formula that generated the abstraction. */
    private final PathFormula blockRefPathFormula;

    /** Information on env. app in the path formula that generated the abstraction. */
    private final ImmutableMap<Integer, RGEnvTransition> blockEnvApplicationMap;

    /** Precision used to abstract this element */
    private final RGPrecision abstractionPrec;

    public AbstractionElement(AbstractionFormula abs,
        PathFormula absPf,
        PathFormula refPf,
        PathFormula blockRefPf,
        ImmutableMap<Integer, RGEnvTransition> blockEnvAppMap,
        RGPrecision abstractionPrec,
        int blockItpSize) {
      super(absPf, refPf, abs, emptyMap, blockItpSize);
      assert absPf.getFormula().isTrue();
      assert refPf.getFormula().isTrue();

      this.blockRefPathFormula = blockRefPf;
      this.blockEnvApplicationMap = blockEnvAppMap;
      this.abstractionPrec = abstractionPrec;
    }


    @Override
    public Object getPartitionKey() {
      if (super.abstractionFormula.asFormula().isFalse()) {
        // put unreachable states in a separate partition to avoid merging
        // them with any reachable states
        return Boolean.FALSE;
      } else {
        return null;
      }
    }


    public PathFormula getBlockRefPathFormula() {
      return blockRefPathFormula;
    }


    public ImmutableMap<Integer, RGEnvTransition> getBlockEnvApplicationMap() {
      return blockEnvApplicationMap;
    }


    public RGPrecision getAbstractionPrecision() {
      return abstractionPrec;
    }

    @Override
    public int getItpSize(){
      return super.blockItpSize;
    }


    @Override
    public String toString() {
      return "RG element (abs): "+super.abstractionFormula;
    }
  }

  public static class ComputeAbstractionElement extends RGAbstractElement {

    private final CFANode location;


    public ComputeAbstractionElement(PathFormula absPf,
        PathFormula refPf,
        AbstractionFormula abs,
        ImmutableMap<Integer, RGEnvTransition> envRefMap,
        CFANode loc,
        int blockItpSize) {
      super(absPf, refPf,  abs, envRefMap, blockItpSize);
      this.location = loc;
    }


    @Override
    public Object getPartitionKey() {
      return null;
    }

    @Override
    public String toString() {
      return "RG element (compute): "+super.abstractionFormula+", absPf: "+super.absPathFormula+", refPf"+super.refPathFormula;
    }

    public CFANode getLocation() {
      return location;
    }

  }





}