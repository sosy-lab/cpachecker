/*
 *  CPAchecker is a tool for configurable software verification.
 *  This file is part of CPAchecker.
 *
 *  Copyright (C) 2007-2011  Dirk Beyer
 *  All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *
 *  CPAchecker web page:
 *    http://cpachecker.sosy-lab.org
 */
package org.sosy_lab.cpachecker.cpa.relyguarantee;

import java.util.HashMap;
import java.util.Map;

import org.sosy_lab.cpachecker.cfa.objectmodel.CFAEdge;
import org.sosy_lab.cpachecker.cfa.objectmodel.CFANode;
import org.sosy_lab.cpachecker.core.interfaces.AbstractElement;
import org.sosy_lab.cpachecker.core.interfaces.Partitionable;
import org.sosy_lab.cpachecker.util.assumptions.FormulaReportingElement;
import org.sosy_lab.cpachecker.util.predicates.AbstractionFormula;
import org.sosy_lab.cpachecker.util.predicates.PathFormula;
import org.sosy_lab.cpachecker.util.predicates.interfaces.Formula;
import org.sosy_lab.cpachecker.util.predicates.interfaces.FormulaManager;

import com.google.common.base.Preconditions;
import com.google.common.base.Predicate;


public class RelyGuaranteeAbstractElement implements AbstractElement, Partitionable, FormulaReportingElement {

  protected int tid;
  public static int UNKOWN = -1;
  private CFAEdge parentEdge = null;


  public void setTid(int tid){
    this.tid = tid;
  }

  public int getTid(){
    return this.tid;
  }

  public static Predicate<AbstractElement> FILTER_ABSTRACTION_ELEMENTS = new Predicate<AbstractElement>() {
    @Override
    public boolean apply(AbstractElement ae) {
      return (ae instanceof AbstractionElement);
    }
  };

  /**
   * Marker type for abstract elements that were generated by computing an
   * abstraction.
   */
  public static class AbstractionElement extends RelyGuaranteeAbstractElement {

    private final Map<RelyGuaranteeCFAEdge, PathFormula> oldEdgeMap;


    public AbstractionElement(PathFormula pf, AbstractionFormula pA,  int tid, Map<RelyGuaranteeCFAEdge, PathFormula> oldEdgeMap) {
      super(pf, pA, tid, new HashMap<RelyGuaranteeCFAEdge, PathFormula>());
      this.oldEdgeMap = oldEdgeMap;
      // Check whether the pathFormula of an abstraction element is just "true".
      // partialOrder relies on this for optimization.
    }


    public AbstractionElement(PathFormula pf, AbstractionFormula pA, CFAEdge edge, int tid, Map<RelyGuaranteeCFAEdge, PathFormula> oldEdgeMap) {
      super(pf, pA, edge, tid, new HashMap<RelyGuaranteeCFAEdge, PathFormula>());
      this.oldEdgeMap = oldEdgeMap;
      // Check whether the pathFormula of an abstraction element is just "true".
      // partialOrder relies on this for optimization.

    }



    @Override
    public Object getPartitionKey() {
      if (super.abstractionFormula.asFormula().isFalse()) {
        // put unreachable states in a separate partition to avoid merging
        // them with any reachable states
        return Boolean.FALSE;
      } else {
        return null;
      }
    }


    public Map<RelyGuaranteeCFAEdge, PathFormula> getOldEdgeMap() {
      return oldEdgeMap;
    }


    @Override
    public String toString() {
      /*if (this.pathBuilder == null){
        return "T:"+this.tid+", Abstraction, '"+this.getAbstractionFormula()+"','"+this.getPathFormula()+"' with SSA "+this.getPathFormula().getSsa()+", empty template";
      } else {
        return "T:"+this.tid+", Abstraction, '"+this.getAbstractionFormula()+"','"+this.getPathFormula()+"' with SSA "+this.getPathFormula().getSsa()+", "+this.pathBuilder;
      }*/
      return "T:"+this.tid+", Abstraction, '"+this.getAbstractionFormula()+"','"+this.getPathFormula()+"' with SSA "+this.getPathFormula().getSsa();
    }


  }


  public static class ComputeAbstractionElement extends RelyGuaranteeAbstractElement {

    private final CFANode location;

    /*public ComputeAbstractionElement(PathFormula pf, AbstractionFormula pA, CFANode pLoc) {
     super(pf, pA);
     location = pLoc;
   }

   public ComputeAbstractionElement(PathFormula pf, AbstractionFormula pA, CFANode pLoc, CFAEdge edge) {
     super(pf, pA, edge);
     location = pLoc;
   }*/

    public ComputeAbstractionElement(PathFormula pf, AbstractionFormula pA, CFANode pLoc,  int tid,   Map<RelyGuaranteeCFAEdge, PathFormula> oldEdgeMap) {
      super(pf, pA,  tid,   oldEdgeMap);
      location = pLoc;
    }

    public ComputeAbstractionElement(PathFormula pf, AbstractionFormula pA, CFANode pLoc, CFAEdge edge,  int tid, Map<RelyGuaranteeCFAEdge, PathFormula> oldEdgeMap) {
      super(pf, pA, edge,  tid,  oldEdgeMap);
      location = pLoc;
    }


    @Override
    public Object getPartitionKey() {
      return null;
    }

    @Override
    public String toString() {
      return "T:"+this.tid+", Abstraction location: true, Abstraction: <TO COMPUTE>";
    }

    public CFANode getLocation() {
      return location;
    }
  }

  /** The path formula for the path from the last abstraction node to this node.
   * it is set to true on a new abstraction location and updated with a new
   * non-abstraction location */
  private final PathFormula pathFormula;

  /** The abstraction which is updated only on abstraction locations */
  private final AbstractionFormula abstractionFormula;

  /**
   * The abstract element this element was merged into.
   * Used for fast coverage checks.
   */
  private RelyGuaranteeAbstractElement mergedInto = null;

  private final Map<RelyGuaranteeCFAEdge, PathFormula> edgeMap;

  /* public RelyGuaranteeAbstractElement(PathFormula pf, AbstractionFormula a) {
   this.pathFormula = pf;
   this.abstractionFormula = a;
   this.tid = RelyGuaranteeAbstractElement.UNKOWN;
   this.rgFormulaTemplate = null;
 }

 public RelyGuaranteeAbstractElement(PathFormula pf, AbstractionFormula a, CFAEdge edge) {
   this.pathFormula = pf;
   this.abstractionFormula = a;
   this.tid = RelyGuaranteeAbstractElement.UNKOWN;
   this.parentEdge = edge;
   this.rgFormulaTemplate = null;
 }*/

  public RelyGuaranteeAbstractElement(PathFormula pf, AbstractionFormula a,  int tid, Map<RelyGuaranteeCFAEdge, PathFormula> edgeMap) {
    this.pathFormula = pf;
    this.abstractionFormula = a;
    this.tid = RelyGuaranteeAbstractElement.UNKOWN;
    this.tid = tid;
    this.edgeMap   = edgeMap;
  }

  public RelyGuaranteeAbstractElement(PathFormula pf, AbstractionFormula a, CFAEdge edge,   int tid, Map<RelyGuaranteeCFAEdge, PathFormula> edgeMap) {
    this.pathFormula = pf;
    this.abstractionFormula = a;
    this.tid = RelyGuaranteeAbstractElement.UNKOWN;
    this.parentEdge = edge;
    this.tid = tid;
    this.edgeMap   = edgeMap;
  }

  public AbstractionFormula getAbstractionFormula() {
    return abstractionFormula;
  }

  public RelyGuaranteeAbstractElement getMergedInto() {
    return mergedInto;
  }

  public PathFormula getPathFormula() {
    return pathFormula;
  }

  void setMergedInto(RelyGuaranteeAbstractElement pMergedInto) {
    Preconditions.checkNotNull(pMergedInto);
    mergedInto = pMergedInto;
  }

  @Override
  public String toString() {
    /* if (this.pathBuilder == null){
      return "T:"+this.tid+", Non-abstraction, '"+this.getAbstractionFormula()+"','"+this.getPathFormula()+"' SSA "+this.getPathFormula().getSsa()+", empty template";
    } else {
      return "T:"+this.tid+", Non-abstraction, '"+this.getAbstractionFormula()+"','"+this.getPathFormula()+"' SSA "+this.getPathFormula().getSsa()+", "+this.pathBuilder;
    }*/
    return "T:"+this.tid+", Non-abstraction, '"+this.getAbstractionFormula()+"','"+this.getPathFormula()+"' SSA "+this.getPathFormula().getSsa();

  }


  @Override
  public Object getPartitionKey() {
    //return abstractionFormula;
    return null;
  }

  @Override
  public Formula getFormulaApproximation(FormulaManager manager) {
    return getAbstractionFormula().asFormula();
  }

  public CFAEdge getParentEdge() {
    return this.parentEdge;
  }

  public Map<RelyGuaranteeCFAEdge, PathFormula> getEdgeMap() {
    return edgeMap;
  }

  @Override
  public int hashCode() {
    return (83 * abstractionFormula.hashCode()) +pathFormula.hashCode();
    //return abstractionFormula.hashCode();
  }




}