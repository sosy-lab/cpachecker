// This file is part of CPAchecker,
// a tool for configurable software verification:
// https://cpachecker.sosy-lab.org
//
// SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

package org.sosy_lab.cpachecker.cpa.automaton;

import com.google.common.base.Throwables;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.logging.Level;
import java.util.zip.GZIPInputStream;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Scanner;
import java_cup.runtime.SymbolFactory;
import org.sosy_lab.common.configuration.Configuration;
import org.sosy_lab.common.configuration.InvalidConfigurationException;
import org.sosy_lab.common.log.LogManager;
import org.sosy_lab.common.ShutdownNotifier;
import org.sosy_lab.common.UniqueIdGenerator;
import org.sosy_lab.cpachecker.cfa.CParser;
import org.sosy_lab.cpachecker.cfa.DummyParser;
import org.sosy_lab.cpachecker.cfa.DummyScope;
import org.sosy_lab.cpachecker.cfa.Language;
import org.sosy_lab.cpachecker.cfa.ast.AExpression;
import org.sosy_lab.cpachecker.cfa.parser.Scope;
import org.sosy_lab.cpachecker.cfa.types.MachineModel;
import org.sosy_lab.cpachecker.cpa.automaton.AutomatonVariable.AutomatonIntVariable;
import org.sosy_lab.cpachecker.util.CParserUtils;

parser code {:
  private LogManager logger;
  private CParser cparser;
  private MachineModel machineModel;
  private Scope scope;

  // this is used to determine unique names for anonymous automata
  private static final UniqueIdGenerator anonymousCounter = new UniqueIdGenerator();

  AutomatonParser(
      Scanner scanner,
      SymbolFactory sf,
      LogManager pLogger,
      CParser pCparser,
      MachineModel pMachineModel,
      Scope pScope) {
    super(scanner, sf);
    logger = pLogger;
    cparser = pCparser;
    machineModel = pMachineModel;
    scope = pScope;
  }
  
  AutomatonParser(Scanner scanner, SymbolFactory sf, LogManager pLogger) {
    super(scanner, sf);
    logger = pLogger;
    cparser = DummyParser.getInstance();
    machineModel = MachineModel.LINUX32; // won't be used anyway
    scope = DummyScope.getInstance();
  }

  @Override
  public void report_error(String message, Object info) {
    if (info != null) {
      logger.log(Level.WARNING, message, "near", info);
    } else {
      logger.log(Level.WARNING, message);
    }
  }

  Automaton generateSkeletonForAssertion(AutomatonBoolExpr pA) throws InvalidAutomatonException {
    AutomatonTransition trans =
        new AutomatonTransition.Builder(AutomatonBoolExpr.TRUE, "OK").withAssertion(pA).build();
    AutomatonInternalState okState = new AutomatonInternalState("OK", ImmutableList.of(trans));
    return new Automaton(
        "AnonymousAutomaton" + anonymousCounter.getFreshId(),
        ImmutableMap.of(),
        ImmutableList.of(okState),
        "OK");
  }

  /** Parses a Specification File and returns the Automata found in the file. */
  public static List<Automaton> parseAutomatonFile(
      Path pInputFile,
      Configuration config,
      LogManager pLogger,
      MachineModel pMachine,
      Scope scope,
      Language pLanguage,
      ShutdownNotifier pShutdownNotifier)
      throws InvalidConfigurationException {

    try (InputStream inputStream = Files.newInputStream(pInputFile);
        InputStream gzipInputStream = new GZIPInputStream(inputStream);
        InputStreamReader unzippedInput =
            new InputStreamReader(gzipInputStream, StandardCharsets.UTF_8)) {
      return parseAutomaton(
          unzippedInput,
          Optional.of(pInputFile),
          config,
          pLogger,
          pMachine,
          scope,
          pLanguage,
          pShutdownNotifier);

    } catch (IOException e) {
      // Fallback if file is not compressed
      try (Reader input = Files.newBufferedReader(pInputFile, StandardCharsets.UTF_8)) {
        return parseAutomaton(
            input,
            Optional.of(pInputFile),
            config,
            pLogger,
            pMachine,
            scope,
            pLanguage,
            pShutdownNotifier);

      } catch (IOException e2) {
        throw new InvalidConfigurationException(
            "Could not load automaton from file " + e2.getMessage(), e2);
      }
    }
  }

  /** Parses a Specification File and returns the Automata found in the file. */
  public static List<Automaton> parseAutomaton(
      Reader reader,
      Optional<Path> pInputFile,
      Configuration config,
      LogManager pLogger,
      MachineModel pMachine,
      Scope scope,
      Language pLanguage,
      ShutdownNotifier pShutdownNotifier)
      throws InvalidConfigurationException {
    final ComplexSymbolFactory sf = new ComplexSymbolFactory();
    final Scanner scanner =
        new AutomatonScanner(reader, pInputFile.orElse(Path.of("")), pLogger, sf);

    final AutomatonParser automatonParser;
    switch (pLanguage) {
      case C:
        CParser cparser =
            CParser.Factory.getParser(
                pLogger, CParser.Factory.getOptions(config), pMachine, pShutdownNotifier);
        automatonParser = new AutomatonParser(scanner, sf, pLogger, cparser, pMachine, scope);
        break;
      default:
        automatonParser = new AutomatonParser(scanner, sf, pLogger);
    }

    try {
      return (List<Automaton>) automatonParser.parse().value;
    } catch (Exception e) {
      Throwables.propagateIfPossible(e, InvalidConfigurationException.class);
      throw new InvalidConfigurationException(
          String.format(
              "Could not load automaton from file (%s)",
              e.getMessage() != null ? e.getMessage() : e.getClass().getSimpleName()),
          e);
    }
  }
:};



terminal EXCLAMATION, AND, OR, ARROW, SEMICOLON, COMMA, COLON, OPEN_BRACKETS,
    CLOSE_BRACKETS, AUTOMATON,OBSERVER, CONTROL, END, LOCAL, INITIAL, STATE,
    ERROR, STOP, EXIT, ENTRY, FUNCTIONCALL, BREAK, ASSERT, ASSUME, MATCH, LABEL, CHECK, EVAL,
    MODIFY, DO, PRINT, PRINTONCE, GOTO, IDENTIFIER, INTEGER_LITERAL, NEQ, EQ, EQEQ, PLUS,
    MINUS, TRUE, FALSE, STRING_LITERAL, CURLYEXPR, SQUAREEXPR, USEALL, USEFIRST,
    TARGET, IS_TARGET_STATE, COVERS_LINES, OPEN_ANGLE_BRACKETS, CLOSE_ANGLE_BRACKETS ;
non terminal List<Automaton> initial ;  
non terminal Automaton Specification ;
non terminal Automaton Automaton ;
non terminal String InitDef ;
non terminal Automaton Body ;
non terminal Map<String, AutomatonVariable> LocalDefs ;
non terminal List<AutomatonInternalState> StateDefs ;
non terminal List<AutomatonTransition> Transitions ;
non terminal List<AutomatonBoolExpr> Assertions ;
non terminal List<AExpression> Assume ;
non terminal List<AutomatonAction> Actions ;
non terminal Set<Integer> Integers ;

non terminal AutomatonVariable LocalDef ;
non terminal AutomatonInternalState StateDef ;
non terminal Boolean StateTypeDef ;
non terminal Boolean StateNonDetDef ;
non terminal AutomatonTransition Transition ;
non terminal AutomatonBoolExpr Assertion ;
non terminal AutomatonAction Action ;
non terminal Boolean SetValue ;

non terminal List<AutomatonExpression<?>> PrintArguments ;

non terminal AutomatonIntExpr.Constant ConstantInt ;
non terminal AutomatonIntExpr Int ;
non terminal AutomatonIntExpr InnerInt ;
non terminal AutomatonBoolExpr Bool ;
non terminal AutomatonExpression<?> Expression ;

precedence left PLUS, MINUS;
precedence left AND, OR;
precedence left EQEQ, NEQ;
precedence left EXCLAMATION;
//precedence left EVAL;

initial ::= Specification:s initial:lst {: lst.add(0, s); RESULT = lst; :}
          | /* empty */ {: RESULT = new LinkedList<Automaton>(); :}
          ;

Specification ::= Automaton:a
                  {: RESULT = a; :}
                | Assertion:a SEMICOLON 
                  {: RESULT = parser.generateSkeletonForAssertion(a); :} 
                ;

Automaton ::= OBSERVER Body:b 
              {: RESULT = b; b.assertObserverAutomaton(); :}
            | CONTROL Body:b 
              {: RESULT = b; :}
            | Body:b // the CONTROL keyword is optional
              {: RESULT = b; :}
            ;

Body      ::= AUTOMATON IDENTIFIER:id LocalDefs:vars InitDef:init StateDefs:states END AUTOMATON
              {: RESULT = new Automaton(id.toString(), vars, states, init); :}
            ;

InitDef    ::= INITIAL STATE IDENTIFIER:id SEMICOLON {: RESULT = id.toString(); :};

LocalDefs ::= LocalDef:d LocalDefs:lst {: lst.put(d.getName(), d); RESULT = lst; :}
              | /* empty */ {: RESULT = new HashMap<String, AutomatonVariable>(); :}
              ;

LocalDef  ::= LOCAL IDENTIFIER:type IDENTIFIER:name  SEMICOLON {: RESULT = AutomatonVariable.createAutomatonVariable(type.toString(), name.toString()); :}
            | LOCAL IDENTIFIER:type OPEN_ANGLE_BRACKETS IDENTIFIER:elemType CLOSE_ANGLE_BRACKETS IDENTIFIER:name SEMICOLON {: RESULT = AutomatonVariable.createAutomatonVariable(type.toString(), name.toString(), elemType.toString()); :}
            | LOCAL IDENTIFIER:type OPEN_ANGLE_BRACKETS IDENTIFIER:elemType CLOSE_ANGLE_BRACKETS IDENTIFIER:name EQ SQUAREEXPR:expr SEMICOLON 
              {: RESULT = AutomatonVariable.createAutomatonVariable(type.toString(), name.toString(), elemType.toString(), expr.toString()); :}
            | LOCAL IDENTIFIER:type IDENTIFIER:name  EQ ConstantInt:ci SEMICOLON 
              {: RESULT = AutomatonVariable.createAutomatonVariable(type.toString(), name.toString()); 
                 if (RESULT instanceof AutomatonIntVariable) ((AutomatonIntVariable) RESULT).setValue(ci.getIntValue());
                 else throw new InvalidConfigurationException("Cannot initialize automaton variable of type '" + RESULT.getType() + "' with integer expression");
              :}
            ;

StateDefs ::= StateDef:s StateDefs:lst  {: lst.add(0, s); RESULT = lst; :}
            | /* empty */ {: RESULT = new LinkedList<AutomatonInternalState>(); :}
              ;

StateDef  ::= StateTypeDef:type STATE StateNonDetDef:nd IDENTIFIER:id COLON  Transitions:ts
              {: RESULT = new AutomatonInternalState(id.toString(), ts, type, nd); :}
            ;
            
StateTypeDef ::= TARGET {: RESULT = true; :}
               | /* empty */ {: RESULT = false; :}
               ;

StateNonDetDef ::= USEFIRST {: RESULT = false; :}
               | USEALL {: RESULT = true; :}
               | /* empty */ {: RESULT = true; :}
               ;

Transitions   ::= Transition:t Transitions:lst {: lst.add(0, t); RESULT = lst; :}
            | /* empty */ {: RESULT = new LinkedList<AutomatonTransition>(); :}
            ;

Transition   ::= Bool:trigger  ARROW Assertions:ass Assume:a Actions:acts GOTO IDENTIFIER:follow SEMICOLON
              {: RESULT = new AutomatonTransition.Builder(trigger, follow.toString())
                  	.withAssertions(ass)
                  	.withAssumptions(a)
                  	.withActions(acts)
                  	.build(); :}
               | Bool:trigger  ARROW Assertions:ass Assume:a Actions:acts ERROR SEMICOLON
              {: RESULT = new AutomatonTransition.Builder(trigger, AutomatonInternalState.ERROR)
                  	.withAssertions(ass)
                  	.withAssumptions(a)
                  	.withActions(acts)
                  	.withTargetInformation(new AutomatonExpression.StringExpression(""))
                  	.build(); :}
               | Bool:trigger  ARROW Assertions:ass Assume:a Actions:acts ERROR OPEN_BRACKETS STRING_LITERAL:property CLOSE_BRACKETS SEMICOLON
              {: RESULT = new AutomatonTransition.Builder(trigger, AutomatonInternalState.ERROR)
                  	.withAssertions(ass)
                  	.withAssumptions(a)
                  	.withActions(acts)
                  	.withTargetInformation(new AutomatonExpression.StringExpression(property.toString()))
                  	.build(); :}
               | Bool:trigger  ARROW Assertions:ass Assume:a Actions:acts STOP SEMICOLON
              {: RESULT = new AutomatonTransition.Builder(trigger, AutomatonInternalState.BOTTOM)
                  	.withAssertions(ass)
                  	.withAssumptions(a)
                  	.withActions(acts)
                  	.build(); :}
               | Bool:trigger  ARROW Assertions:ass Assume:a Actions:acts BREAK SEMICOLON
              {: RESULT = new AutomatonTransition.Builder(trigger, AutomatonInternalState.BREAK)
                  	.withAssertions(ass)
                  	.withAssumptions(a)
                  	.withActions(acts)
                  	.build(); :}
              ;

Assertions ::= Assertion:a Assertions:lst {: lst.add(0,a); RESULT = lst; :}
             | /* empty */ {: RESULT = new LinkedList<AutomatonBoolExpr>(); :}
             ;
Assertion  ::= ASSERT  Bool:b   {: RESULT = b; :};

Assume    ::= ASSUME CURLYEXPR:a {: RESULT = CParserUtils.convertStatementsToAssumptions(CParserUtils.parseListOfStatements(a.toString(), cparser, scope), machineModel, logger); :}
             | /* empty */ {: RESULT = new ArrayList<AExpression>(); :};

Actions   ::= Action:a Actions:lst {: lst.add(0,a); RESULT = lst; :} // insert at the beginning of the list to preserve the order.
            | /* empty */ {: RESULT = new LinkedList<AutomatonAction>(); :}
            ;
Action    ::= DO  IDENTIFIER:var EQ InnerInt:i   {: RESULT = new AutomatonAction.Assignment(var.toString(), i); :}
                        // InnerInt in this position allows for x = EVAL(..) Statements
            | DO IDENTIFIER:var SQUAREEXPR:expr EQ SetValue:val {: RESULT = new AutomatonAction.SetAssignment(var.toString(), expr.toString(), val); :}
            | PRINT PrintArguments:args {: RESULT = new AutomatonAction.Print(args); :}
            | PRINTONCE PrintArguments:args {: RESULT = new AutomatonAction.PrintOnce(args); :}
/*next statement is deprecated*/
            | MODIFY OPEN_BRACKETS IDENTIFIER:cpa OPEN_BRACKETS STRING_LITERAL:query CLOSE_BRACKETS CLOSE_BRACKETS
              {: RESULT = new AutomatonAction.CPAModification(cpa.toString(), query.toString()); :}
            | MODIFY OPEN_BRACKETS IDENTIFIER:cpa COMMA STRING_LITERAL:query CLOSE_BRACKETS
              {: RESULT = new AutomatonAction.CPAModification(cpa.toString(), query.toString()); :}
            ;

SetValue  ::= TRUE {: RESULT = true; :}
            | FALSE {: RESULT = false; :};

PrintArguments ::= Expression:a PrintArguments:lst {: lst.add(0,a); RESULT = lst; :}
             | /* empty */ {: RESULT = new LinkedList<AutomatonExpression<?>>(); :}
             ;
            
Int       ::= ConstantInt:c  {: RESULT = c; :}
                        | OPEN_BRACKETS Int:i CLOSE_BRACKETS {: RESULT = i; :}
            | IDENTIFIER:x  {: RESULT = new AutomatonIntExpr.VarAccess(x.toString()); :}
            | InnerInt:a PLUS InnerInt:b  {: RESULT = new AutomatonIntExpr.Plus(a,b); :}
            | InnerInt:a MINUS InnerInt:b  {: RESULT = new AutomatonIntExpr.Minus(a,b); :}
            ;
            
// the int Expression "( EVAL(...) )" is forbidden (would conflict with the same BoolExpression if Bool would use EVAL instead of CHECK)

InnerInt  ::= Int:i {: RESULT = i; :}
/*next statement is deprecated*/
                        | EVAL OPEN_BRACKETS IDENTIFIER:cpa OPEN_BRACKETS STRING_LITERAL:query CLOSE_BRACKETS CLOSE_BRACKETS
             {: RESULT = new AutomatonIntExpr.CPAQuery(cpa.toString(), query.toString()); :}
            | EVAL OPEN_BRACKETS IDENTIFIER:cpa COMMA STRING_LITERAL:query CLOSE_BRACKETS
             {: RESULT = new AutomatonIntExpr.CPAQuery(cpa.toString(), query.toString()); :}
             ;
            
ConstantInt ::= INTEGER_LITERAL:c  {: RESULT = new AutomatonIntExpr.Constant(c.toString()); :}
                        ;

Bool      ::= TRUE  {: RESULT = AutomatonBoolExpr.TRUE; :}
            | FALSE  {: RESULT = AutomatonBoolExpr.FALSE; :}
            | EXCLAMATION Bool:b  {: RESULT = new AutomatonBoolExpr.Negation(b); :}
            | OPEN_BRACKETS Bool:b CLOSE_BRACKETS {: RESULT = b; :}
            | InnerInt:a EQEQ InnerInt:b  {: RESULT = new AutomatonBoolExpr.IntEqTest(a,b); :}
            | InnerInt:a NEQ InnerInt:b  {: RESULT = new AutomatonBoolExpr.IntNotEqTest(a,b); :}
            | Bool:a EQEQ Bool:b  {: RESULT = new AutomatonBoolExpr.BoolEqTest(a,b); :}
            | Bool:a NEQ Bool:b  {: RESULT = new AutomatonBoolExpr.BoolNotEqTest(a,b); :}
            | Bool:a AND Bool:b {: RESULT = new AutomatonBoolExpr.And(a,b); :}
            | Bool:a OR Bool:b {: RESULT = new AutomatonBoolExpr.Or(a,b); :}
            | MATCH STRING_LITERAL:lit
              {: RESULT = new AutomatonBoolExpr.MatchCFAEdgeExact(lit.toString()); :}
            | MATCH CURLYEXPR:expr
              {: RESULT = new AutomatonBoolExpr.MatchCFAEdgeASTComparison(AutomatonASTComparator.generatePatternAST(expr.toString(), cparser, scope)); :}
            | MATCH SQUAREEXPR:expr
              {: RESULT = new AutomatonBoolExpr.MatchCFAEdgeRegEx(expr.toString()); :}
            | MATCH LABEL STRING_LITERAL:lit
              {: RESULT = new AutomatonBoolExpr.MatchLabelExact(lit.toString()); :}
            | MATCH LABEL SQUAREEXPR:expr
              {: RESULT = new AutomatonBoolExpr.MatchLabelRegEx(expr.toString()); :}
            | MATCH ASSERT
              {: RESULT = AutomatonBoolExpr.MatchJavaAssert.INSTANCE; :}
            | MATCH EXIT
              {: RESULT = AutomatonBoolExpr.MatchProgramExit.INSTANCE; :}
            | MATCH ENTRY
              {: RESULT = AutomatonBoolExpr.MatchProgramEntry.INSTANCE; :}
            | MATCH FUNCTIONCALL STRING_LITERAL:functionname
              {: RESULT = new AutomatonBoolExpr.MatchFunctionCall(functionname.toString()); :}
/*next statement is deprecated*/ 
            | CHECK OPEN_BRACKETS IDENTIFIER:cpa OPEN_BRACKETS STRING_LITERAL:query CLOSE_BRACKETS CLOSE_BRACKETS
              {: RESULT = new AutomatonBoolExpr.CPAQuery(cpa.toString(), query.toString()); :}
            | CHECK OPEN_BRACKETS IDENTIFIER:cpa COMMA STRING_LITERAL:query CLOSE_BRACKETS
              {: RESULT = new AutomatonBoolExpr.CPAQuery(cpa.toString(), query.toString()); :}
            | CHECK OPEN_BRACKETS STRING_LITERAL:query CLOSE_BRACKETS
              {: RESULT = new AutomatonBoolExpr.ALLCPAQuery(query.toString()); :}
            | CHECK OPEN_BRACKETS IS_TARGET_STATE CLOSE_BRACKETS
              {: RESULT = AutomatonBoolExpr.CheckAllCpasForTargetState.INSTANCE; :}
            | COVERS_LINES OPEN_BRACKETS Integers:set CLOSE_BRACKETS
              {: RESULT = new AutomatonBoolExpr.CheckCoversLines(set); :}
            ;
            
Integers            ::= ConstantInt:i Integers:set {: set.add(i.getIntValue()); RESULT = set; :}
                        | /* empty */ {: RESULT = new HashSet<Integer>(); :}
                        ;

Expression          ::= Int:i {: RESULT = i; :}
                        | Bool:b {: RESULT = b; :}
                        | STRING_LITERAL:lit {: RESULT = new AutomatonExpression.StringExpression(lit.toString()); :}
/*next statement is deprecated*/
                        | EVAL OPEN_BRACKETS IDENTIFIER:cpa OPEN_BRACKETS STRING_LITERAL:query CLOSE_BRACKETS CLOSE_BRACKETS
             {: RESULT = new AutomatonExpression.CPAQuery(cpa.toString(), query.toString()); :}
            | EVAL OPEN_BRACKETS IDENTIFIER:cpa COMMA STRING_LITERAL:query CLOSE_BRACKETS
             {: RESULT = new AutomatonExpression.CPAQuery(cpa.toString(), query.toString()); :}
             ; 
