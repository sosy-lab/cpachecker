# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2025 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA
# for predicate analysis with CEGAR as described in
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et.al.).
# This .properties file is specified for Predicate Analysis with Transition Predicate Abstraction.
# The configuration is copy from some others .properties
# ------------------------------------------------------------------------

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.TPACPA, $specification

analysis.algorithm.CEGAR = true

# Enable MultiEdges, this gives a little bit of performance.
cpa.composite.aggregateBasicBlocks = true

# ----------------------------------------------------------------------
# Source file: predicateAnalysis-PredAbsRefiner-ABEl.properties
specification = specification/default.spc
# For overflow checking we have an equivalent config.
overflow.config = predicateAnalysis--overflow.properties
# ----------------------------------------------------------------------

# Default resource limits for CPAchecker configurations.
limits.time.cpu = 900s

# --------------------------------------------------------------------------
# This configures the Adjustable-Block Encoding CPA
# to use the classical refinement approach for predicate abstraction
# (BLAST-like).
# Source: predicateAnalysis-PredAbsRefiner.properties
# --------------------------------------------------------------------------
cegar.refiner = cpa.predicate.PredicateRefiner
# Guessing predicates statically from the CFA is a heuristic that pays off.
cpa.predicate.refinement.performInitialStaticRefinement = true

# ----------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA
# for predicate analysis with CEGAR as described in
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et al.).
# It is configured to support ABE with the largest loop-free blocks
# (abstractions only at loop heads).
# Source: include/predicateAnalysis-ABEl.properties
# ----------------------------------------------------------------------
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = true

# ----------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA
# for predicate analysis with CEGAR as described in
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et al.).
# It is configured to support ABE with large blocks.
# Source: inculde/predicateAnalysis-ABE.properties
# ----------------------------------------------------------------------
# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
# callstack is necessary for ABE with blocks across function boundaries to work well
[analysis.traversal]
order = bfs
useReversePostorder = true
useCallstack = true