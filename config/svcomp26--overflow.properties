# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2025 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ------------------------------------------------------------------------------
# This configuration file uses sets of intervals to check the overflow property
# for SV-COMP26.
# ------------------------------------------------------------------------------

specification = specification/sv-comp-overflow.spc

# CFA simplifications might remove overflows:
cfa.simplifyCfa = false
cfa.simplifyConstExpressions = false

# Expressions without live variables can contain overflows, e.g. if they contain literals!
cfa.findLiveVariables = false
overflow.useLiveness = false

# The file to which the witness is written (required by competition).
counterexample.export.graphml = witness.graphml
# cpa.arg.proofWitness = witness.graphml
cpa.arg.yamlProofWitness = witness.yml
counterexample.export.yaml = witness.yml

# Compression is not supported by UltimateAutomizer
counterexample.export.compressWitness = false
cpa.arg.compressWitness = false

# Use sequential combination of analyses.
analysis.restartAfterUnknown = true

# The analyses used for overflow properties.
restartAlgorithm.configFiles = components/parallel-overflow.properties, \
                               predicateAnalysis-bam-rec--overflow.properties::if-recursive, \
                               predicateAnalysis-concurrency--overflow.properties::if-concurrent

# self-reference to allow direct usage
overflow.config = svcomp26--overflow.properties

# malloc never returns null according to SV-Comp rules
cpa.predicate.memoryAllocationsAlwaysSucceed = true

cfa.useCFACloningForMultiThreadedPrograms=true
