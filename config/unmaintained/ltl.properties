# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# LassoRanker requires SMTInterpol as SMT-Solver
# solver.solver = SMTINTERPOL

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA, cpa.dca.DCACPA
DCACPA.cpa = $specification

analysis.algorithm.CEGAR = true
cegar.refiner = cpa.dca.DCARefiner
# Global refinement -- only refine after the ARG has been unrolled completely
cegar.globalRefinement = true

# SlicingAbstractionsRefiner depends on this (possibly unnecessary for LTL model checking)
cpa.arg.keepCoveredStatesInReached = true
cpa.arg.coverTargetStates = true
# We want to merge back instead of relying on coverage:
cpa.arg.mergeOnWrappedSubsumption = true

# Do not abort building the ARG when it comes across a target-state in ControlAutomatonCPA
cpa.automaton.breakOnTargetState = 0

# Enable MultiEdges, this gives a little bit of performance.
cpa.composite.aggregateBasicBlocks = false

# SlicingAbstractions does not use BDDs (possibly unnecessary for LTL model checking)
cpa.predicate.abstraction.type = FORMULA

# The following two options are set because LassoRanker requires SMTInterpol as library,
# which cannot handle bitvectors.
# Use unbounded integers in formulas instead of int variables.
cpa.predicate.encodeBitvectorAs=INTEGER
# Use rationals in formulas instead of float variables.
cpa.predicate.encodeFloatAs=RATIONAL

cpa.predicate.invariants.generationStrategy=RF_INTERPOLANT_KIND

# Disable useless caches
cpa.predicate.abs.useCache = false
cpa.predicate.blk.useCache = false

cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = true
# abstraction after every post operation (similar to SBE)
cpa.predicate.blk.threshold = 1
cpa.predicate.ignoreIrrelevantVariables = false

# cpa.predicate.checkBlockFeasibility=true
cpa.predicate.satCheckAtAbstraction = true
cpa.predicate.targetStateSatCheck = true

# Do not compute successor state if conjunction of edge and automaton assumption is unsat
cpa.predicate.assumptionStrengtheningSatCheck = true

# Disable invariant export, these contain the raw ASTs and might be very large.
cpa.predicate.invariants.export = false

# Special settings for things that break if the ARG contains loops:
# cpa.predicate.refinement.graphblockformulastrategy = true
# For counterexample check this would be needed:
# counterexample.ambigiousARG = true
counterexample.export.exportAsSource = false
counterexample.export.exportWitness = false

# This currently leads to an assertion error and is hence disabled temporarily
# (c.f. #781 and #598)
counterexample.export.enabled = false

# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
# callstack is necessary for ABE with blocks across function boundaries to work well
[analysis.traversal]
order = bfs
useReversePostorder = true
useCallstack = true

