# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# This configuration file uses a combination of value analysis
# and symbolic memory graphs to verify memory safety properties.
# ----------------------------------------------------------------------

#include ../includes/valueAnalysis.properties

# specification to find memory related problems
specification = ../specification/sv-comp-memorysafety.spc

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.value.ValueAnalysisCPA, cpa.smg.SMGCPA, cpa.conditions.global.GlobalConditionsCPA, cpa.assumptions.storage.AssumptionStorageCPA,cpa.loopbound.LoopBoundCPA

analysis.unknownAsTrue = true

cpa.conditions.global.reached.size = 60000

cpa.loopbound.maxLoopIterations = 130
cpa.loopbound.trackStack = true


# checking counterexamples, esp. with CBMC does not make sense
analysis.checkCounterexamples = false

analysis.traversal.order                  = bfs
analysis.traversal.useReversePostorder    = false
analysis.traversal.useCallstack           = false

cpa.smg.enableMallocFail       = false
cpa.smg.handleUnknownFunctions = assume_safe
cpa.smg.guessSizeOfUnknownMemorySize = true

cpa.composite.aggregateBasicBlocks = false

# Disable all output files except the error path.
 output.disable = true

# Write counterexample to file (required by competition).
counterexample.export.file = ErrorPath.txt

# Disable statistics for memory consumption.
statistics.memory = false

# This is the configuration used when verifying memory safety properties (actually this configuration).
memorysafety.config = svcomp15--memorysafety.properties
