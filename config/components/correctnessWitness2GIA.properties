# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2022 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# include ../predicateAnalysis-PredAbsRefiner-ABEl.properties

# Disable CPU time limit
limits.time.cpu =

cpa.composite.aggregateBasicBlocks = false

analysis.checkCounterexamples = false

cpa = cpa.arg.ARGCPA

ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.assumptions.storage.AssumptionStorageCPA

# this automaton defines which locations are the error locations
specification = ../specification/NoError.spc

analysis.collectAssumptions = true
assumptions.automatonFile = AssumptionAutomaton.txt

assumptions.transformGIA = true
assumptions.giaFile = UniversalConditionAutomaton.txt
assumptions.genGIA4Witness = true
cpa.assumptionStorage.extractAssumptionsFromAutomatonState = true
# analysis.stopAfterError = false
# counterexample.continueAfterInfeasibleError = false
# counterexample.removeInfeasibleErrorState = false


witness.invariantsSpecificationAutomaton = WITNESSBASED_GIA
# (unused) witness.checkInvariantViolations = true

# Tell all analyses to skip (non-explicit) recursion
cpa.callstack.skipVoidRecursion = true
cpa.callstack.skipFunctionPointerRecursion = true

# do not ignore any variables; otherwise assumptions over these variables mess up strengthening
cpa.predicate.ignoreIrrelevantVariables = false