# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2025 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

#include ../includes/predicateAnalysis-PredAbsRefiner-ABEl.properties
#include ../includes/predicateAnalysis-linear.properties

# Insert TerminationCPA in the stack of CPAs.
cpa = cpa.arg.ARGCPA
TerminationCPA.cpa = cpa.composite.CompositeCPA
ARGCPA.cpa = cpa.termination.TerminationCPA

# Override list of CPAs to add one automaton that TerminationAlgorithm needs,
# and another that implements C functions like exit().
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA, cpa.automaton.ControlAutomatonCPA NonTerminationLabelAutomaton, cpa.automaton.ControlAutomatonCPA TerminatingFunctionsAutomaton

analysis.algorithm.terminationWitnessCheck=true
termination.validation.checkWithInfiniteSpace=true

# Prevent the merge of two abstract states where one of them
# already has at least one child state.
# This prevents warnings about unexpected ARG branching
cpa.arg.lateMerge = prevent
cpa.arg.export=false

# Strengthen PredicateAbstractState with ranking relation from TerminationState.
cpa.predicate.strengthenWithFormulaReportingStates = true

# Add invariants generated by the LassoRanker library to the precision
cpa.predicate.invariants.addToPrecision = true

# The TerminationCPA adds variables that are relevant, but would not be tracked.
cpa.predicate.ignoreIrrelevantVariables = false

# The termination analysis requires TerminationARGBasedRefiner as wrapper.
cegar.refiner = cpa.termination.TerminationARGBasedRefiner
cpa.termination.refiner = cpa.predicate.PredicateRefiner

# Set a default for solver.nonLinearArithmetic, because with JavaSMT's default
# CPAchecker would crash with UnsupportedOperationExceptions depending on which
# solver is used.
solver.nonLinearArithmetic = APPROXIMATE_FALLBACK

# Output the termination witness in 2.1 version of YAML format.
# Moreover, do not let ARGStatistics output a witness as termination has its own exporter.
witness.yamlexporter.witnessVersions=V2d1
cpa.arg.exportYamlCorrectnessWitness=false

# Counterexample for terminationAnalysis is not yet implemented
analysis.checkCounterexamples = false

[NonTerminationLabelAutomaton]
cpa.automaton.inputFile = ../specification/termination_as_reach.spc

[TerminatingFunctionsAutomaton]
cpa.automaton.inputFile = ../specification/TerminatingFunctions.spc
