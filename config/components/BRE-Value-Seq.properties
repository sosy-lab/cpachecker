# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0


# A bit-precise predicate analysis is used to cross-check counterexamples
analysis.checkCounterexamples = true
counterexample.checker = CPACHECKER
counterexample.checker.config = ../cex-checks/predicateAnalysis-as-cex-check.properties

analysis.alwaysStoreCounterexamples = true

# Do not skip recursion to avoid false proofs
cpa.callstack.skipVoidRecursion = false

# enable use of multi-edges
cpa.composite.aggregateBasicBlocks = true

# ARGCPA is needed for counterexample analysis
analysis.summaryEdges = true

cpa = cpa.arg.ARGCPA

ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA,  cpa.callstack.CallstackCPA,   cpa.rangedAnalysisSequence.RangedAnalysisCPA,  cpa.functionpointer.FunctionPointerCPA,  cpa.value.ValueAnalysisCPA, cpa.pointer2.PointerCPA, $specification


# BFS has shown to be a good traversal strategy for value analysis,
# so we use this by default

analysis.algorithm.CEGAR               = true
cegar.refiner                          = cpa.value.refiner.ValueAnalysisRefiner
precision.sharing                      = SCOPE


# weighting exponent for random weighted traversal
analysis.traversal.random.exponent = 3.3

[analysis.traversal]
order = bfs
weightedDepth = true
useReversePostorder = false
useCallstack        = false


[cpa.value.refinement]
restart           = ROOT
prefixPreference = DOMAIN_MIN,WIDTH_MIN,LENGTH_MIN

[cpa.value.interpolation]
applyItpEqualityOptimization = false
applyRenamingOptimization    = false
applyUnsatSuffixOptimization = false


