# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# This configuration runs a single precision refinement
# for predicate abstraction.
# Computed predicates can be used in other analyses
# through the created predmap.txt or witness.graphml.

#include ../predicateAnalysis-PredAbsRefiner-ABEl.properties
#include ../includes/witness-validation.properties

cegar.maxIterations = 1

# Use summary edges for recursion handling
analysis.summaryEdges = true

cpa.composite.aggregateBasicBlocks = false

analysis.checkCounterexamples = false

# Tell all analyses to skip (non-explicit) recursion
cpa.callstack.skipVoidRecursion = true
cpa.callstack.skipFunctionPointerRecursion = true

# ignore irrelevant variables.
# Otherwise witness-based craig interpolation is not comparable to internal craig interpolation
cpa.predicate.ignoreIrrelevantVariables = true

# Initial static refinement does not work well with witness automata
cpa.predicate.refinement.performInitialStaticRefinement = false

# A found counterexample may be imprecise because of predicate analysis's merge.
# Export it as-is for further analyses to use.
counterexample.export.allowImpreciseCounterexamples = true

cpa.arg.proofWitness = witness.graphml
cpa.arg.compressWitness = false

# Do not create default correctness witnesses,
# but try to include as many path invariants in the produced witness
# as possible. (their atoms can then be used as predicates in consecutive runs)
cpa.arg.witness.produceInvariantWitnesses = true

# We want predicate analysis to fully analyze the violation witness
# and create the best possible predicates (usually the more generic ones).
# Exploring towards the closest violating automaton states first
# works against the merge of predicate analysis, leading to
# too precise predicates. These precise predicates may lead to poor performance,
# but also to repeated counterexamples.
# Therefore, do not explore towards the automaton state closest to a violation.
analysis.traversal.byAutomatonVariable = null
