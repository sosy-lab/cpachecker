# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2023 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

analysis.useTestCaseGeneratorAlgorithm = true
analysis.algorithm.CEGAR = true

cegar.refiner = cpa.predicate.PredicateRefiner

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA, cpa.testtargets.TestTargetCPA,  cpa.automaton.ControlAutomatonCPA TerminatingFunctions

TerminatingFunctions.cpa.automaton.inputFile = ../../specification/test-comp-terminatingfunctions.spc

# harness export cannot deal with aggregated blocks
cpa.composite.aggregateBasicBlocks=false

cpa.callstack.skipVoidRecursion = true
cpa.callstack.depth=20

cpa.predicate.handlePointerAliasing = true

# Guessing predicates statically from the CFA is a heuristic that pays off.
cpa.predicate.refinement.performInitialStaticRefinement = true

# set abstraction locations according to BAM
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = true

cpa.predicate.ignoreIrrelevantVariables = false

# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
# callstack is necessary for ABE with blocks across function boundaries to work well
[analysis.traversal]
order = bfs
useReversePostorder = true
useCallstack = true
