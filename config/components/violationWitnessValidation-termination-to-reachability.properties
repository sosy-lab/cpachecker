# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2021 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

#include ../includes/terminationToSafety.properties
#include ../includes/predicateAnalysis-PredAbsRefiner-ABEl.properties

# Variables classified as irrelevant might be in fact relevant,
cpa.predicate.ignoreIrrelevantVariables = false

cpa.predicate.enableSharedInformation = true

cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, \
                    cpa.predicate.PredicateCPA, \
                    cpa.value.ValueAnalysisCPA, \
                    cpa.loopbound.LoopBoundCPA, \
                    cpa.callstack.CallstackCPA, \
                    cpa.automaton.ControlAutomatonCPA, \
                    cpa.assumptions.storage.AssumptionStorageCPA, \
                    cpa.terminationviamemory.TerminationToReachCPA

# Use this configuration as configuration for termination analysis.
termination.config = violationWitnessValidation-termination-to-reachability.properties
termination.violation.witness = witness.graphml

# Do not compress witnesses for SVCPOMP; not all validators support compressed witnesses
cpa.arg.compressWitness = false

# do not use the ARG to export the counterexample
# because it only exports the stem (path to infinite loop) and
# we can write the complete counterexample
counterexample.export.exportWitness = false

cpa.automaton.inputFile = ../specification/termination_as_reach.spc