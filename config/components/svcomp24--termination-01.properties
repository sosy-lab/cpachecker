# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# This configuration file uses predicate-analysis to check for terminations
# in non-recursive programs.
# ----------------------------------------------------------------------

#include ../includes/predicateAnalysis-PredAbsRefiner-ABEl.properties
#include ../includes/terminationToSafety.properties

# This is the configuration used when verifying the termination property
termination.config = terminationToSafety.properties

# disable termination algorithm, because for this analysis, classical CPAAlgorithm is used
analysis.algorithm.termination = false

# Do not compress witnesses for SVCPOMP; not all validators support compressed witnesses
cpa.arg.compressWitness = false

# Enable sharing information from predicateCPA, needed to get its formulaManagerView
cpa.predicate.enableSharedInformation=true

# do not use the ARG to export the counterexample
# because it only exports the stem (path to infinite loop) and
# we can write the complete counterexample
counterexample.export.exportWitness = false

terminationtoreach.violation.witness = witness.graphml
terminationtoreach.compressWitness = false

# Prevent the merge of two abstract states where one of them
# already has at least one child state.
# This prevents warnings about unexpected ARG branching
cpa.arg.lateMerge = prevent

limits.time.cpu = 300s
limits.time.cpu::required = 300s
