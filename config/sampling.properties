# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2022 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

// ----------------------------------------------------------------------
// This configuration file enables the InvLearn algorithm
// with incremental loop bounds.
// ----------------------------------------------------------------------

analysis.useSamplingAlgorithm = true

samplingAlgorithm.initial.forward.config = valueAnalysis-predicateAnalysis-Cegar-ABEl.properties
samplingAlgorithm.initial.backward.config = predicateAnalysisBackward.properties

// this automaton defines which locations are the error locations
specification = specification/default.spc

// ARGCPA is needed in order to create an error path for unsafe programs
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA, cpa.value.ValueAnalysisCPA

// Use merge^{JOIN} for value analysis alongside predicate to prevent unnecessary unrolling
cpa.value.merge = JOIN

// best traversal order for formula creation
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true
analysis.traversal.useReverseLoopstack = true
analysis.traversal.useReverseLoopIterationCount = true

// No caching, the formulas are never created twice
cpa.predicate.blk.useCache = false

// No abstractions
cpa.predicate.handlePointerAliasing = false
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = false

// Do not dump stuff that is not meaningful when using BMC.
cpa.predicate.predmap.export = false
cpa.predicate.invariants.export = false
cpa.predicate.invariants.exportAsPrecision = false

// Ignore target states during formula creation
cpa.automaton.breakOnTargetState = 0

// There are known cases of late merges (cf. #991) in BMC, at least
// https://gitlab.com/sosy-lab/software/cpachecker/-/issues/1002
// Until we have a solution that prevents the root cause
// (no strict reverse post order), we can at least prevent the merge itself.
// This leads to less redundant formulas and no crashes due to unexpected
// ARG branching.
cpa.arg.lateMerge = prevent
