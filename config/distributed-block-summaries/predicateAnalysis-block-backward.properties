# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2022 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# configuration for a distributed backward predicate analysis
# see predicateAnalysis-block for more information

#include ../includes/predicateAnalysisBackward.properties

CompositeCPA.cpas = cpa.block.BlockCPABackward, cpa.location.LocationCPABackwards, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA

analysis.algorithm.CEGAR=true

backwardSpecification=../specification/MainEntry.spc
specification=../specification/MainEntry.spc
analysis.initialStatesFor=TARGET
cpa.predicate.strengthenWithFormulaReportingStates=true
staticRefiner.addAllControlFlowAssumes=true
cpa.predicate.useArraysForHeap=false
cpa.predicate.memoryAllocationsAlwaysSucceed=true

# we already have abstraction at all block ends
# if blocks are merged we need to at least abstract at loops to avoid infinite computation within
# block with missing information
[cpa.predicate.blk]
alwaysAtJoin=false
alwaysAtBranch=false
alwaysAtProgramExit=false
alwaysAtLoops=true
alwaysAtFunctions=false
alwaysAfterThreshold=false
alwaysAtFunctionCallNodes=false