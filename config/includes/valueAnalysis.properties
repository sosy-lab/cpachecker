# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ------------------------------------------------------------------
# This configuration file uses value analysis of integer
# variables in a model-checking configuration.
# A bit-precise predicate analysis is used to cross-check
# counterexamples.
# ------------------------------------------------------------------

# A bit-precise predicate analysis is used to cross-check counterexamples
analysis.checkCounterexamples = true
counterexample.checker = CPACHECKER
counterexample.checker.config = ../cex-checks/predicateAnalysis-as-cex-check.properties

analysis.alwaysStoreCounterexamples = true

# enable use of multi-edges
cpa.composite.aggregateBasicBlocks = true

# ARGCPA is needed for counterexample analysis
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.value.ValueAnalysisCPA, $specification

analysis.summaryEdges = true

# BFS has shown to be a good traversal strategy for value analysis,
# so we use this by default.
# DFS with weighted-random traversal also works well, 
# while plain DFS seems to work not so well compared to others.
# Enables a weighted-random traversal order over the waitlist 
# of abstract states. Abstract states
# deeper in the CFA get a weaker weighting, and abstract states
# high up in the CFA get a stronger weighting.
# You can use analysis.traversal.random.exponent to influence
# the strength of the weighting 
# (higher number => stronger weighting on states high up in the CFA).
# 3.3 was found to work well overall.
[analysis.traversal]
order = bfs
useReversePostorder = false
useCallstack = false
weightedDepth = true
random.exponent = 3.3
