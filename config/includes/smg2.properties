# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ------------------------------------------------------------------
# SMGv2 w symbolic execution properties
# ------------------------------------------------------------------

# enable use of multi-edges
# Test if this is useful
cpa.composite.aggregateBasicBlocks = true

# ARGCPA is needed for counterexample analysis
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.smg2.SMGCPA

cpa.callstack.unsupportedFunctions=pthread_create,pthread_key_create

# Test if this is useful
analysis.summaryEdges = true

# We allow recursion up to some degree. Reason: we might abstract recursive list creation and stop before the limit is reached
cpa.callstack.depth = 15

# Required by competition
cpa.smg2.enableMallocFail = false

# There are lots of calls to functions that are irrelevant, e.g. time(). We want to check the inputs, but are ok with the rest
cpa.smg2.handleUnknownFunctions = ASSUME_EXTERNAL_ALLOCATED

# Symbolic execution options
# trackPredicates -> track predicates based on symbolic values and assumptions and check assumptions (or error locations) w a SMT solver
cpa.smg2.trackPredicates = true
# trackErrorPredicates -> check for MemorySafety properties using predicates and symbolic values
cpa.smg2.trackErrorPredicates = true

# We want to be able to discern symbolic values from each other
cpa.smg2.treatSymbolicValuesAsUnknown = false

# Disable precision adjustment searches as we don't use CEGAR per default
cpa.smg2.abstraction.abstractProgramVariables = false
cpa.smg2.abstraction.abstractHeapValues = false

# The file to which the witness is written (required by competition for example).
counterexample.export.graphml = witness.graphml
cpa.arg.proofWitness = witness.graphml
# Compression is bad for witness validation
counterexample.export.compressWitness = false
cpa.arg.compressWitness = false

# simplified CFA is bad for witnesses
cfa.simplifyCfa = false

[analysis.traversal]
order = bfs
useReversePostorder = false
useCallstack = false
