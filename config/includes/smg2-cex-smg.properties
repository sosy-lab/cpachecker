# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ------------------------------------------------------------------
# This configuration file uses value analysis of integer
# variables in a model-checking configuration.
# A bit-precise predicate analysis is used to cross-check
# counterexamples.
# ------------------------------------------------------------------

# specification = ../specification/memorysafety.spc

# Old SMG is used to cross-check counterexamples as it is more precise
analysis.checkCounterexamples = true
counterexample.checker = CPACHECKER
counterexample.checker.config = ../cex-checks/smgAnalysis-as-cex-check.properties

analysis.alwaysStoreCounterexamples = true

# enable use of multi-edges
cpa.composite.aggregateBasicBlocks = true

# ARGCPA is needed for counterexample analysis
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.smg2.SMGCPA

analysis.summaryEdges = true

# We allow recursion up to some degree. Reason: we might abstract recursive list creation and stop before the limit is reached
cpa.callstack.depth = 15

# There are lots of calls to functions that are irrelevant, e.g. time(). We want to check the inputs, but are ok with the rest
cpa.smg2.handleUnknownFunctions = ASSUME_EXTERNAL_ALLOCATED

# BFS has shown to be a good traversal strategy for value analysis,
# so we use this by default
[analysis.traversal]
order = bfs
useReversePostorder = false
useCallstack = false