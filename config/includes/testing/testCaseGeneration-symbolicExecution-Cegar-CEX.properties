# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# This configuration file uses the TestCaseGeneratorAlgorithm.
# ----------------------------------------------------------------------

#include ../symbolicExecution.properties

analysis.traversal.order = bfs
analysis.traversal.weightedDepth = true
analysis.traversal.random.exponent = 8
analysis.traversal.useReversePostorder = false
analysis.traversal.useCallstack        = false

analysis.algorithm.CEGAR = true
cegar.refiner = cpa.value.symbolic.refiner.SymbolicValueAnalysisRefiner

cpa.value.refinement.restart=ROOT

cpa.value.optimizeBooleanVariables = false
cpa.value.assignEqualityAssumptions = false

cpa.constraints.removeOutdated = false

analysis.checkCounterexamples = true
counterexample.checker.config = ../../cex-checks/predicateAnalysis-as-cex-check-testgeneration.properties

# use counterexample information from counterexample check
counterexample.checker.changeCEXInfo = true

analysis.useTestCaseGeneratorAlgorithm = true

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.value.ValueAnalysisCPA, cpa.constraints.ConstraintsCPA, cpa.testtargets.TestTargetCPA

# deactivate, led to assertion failures
counterexample.continueAfterInfeasibleError = false

testcase.inStats = false
# harness export cannot deal with aggregated blocks
cpa.composite.aggregateBasicBlocks = false
cpa.predicate.ignoreIrrelevantVariables = false

