# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0


// the loop unrolling bound
cpa.loopbound.maxLoopIterations = 1

analysis.algorithm.backwardBMC = true

// ARGCPA is needed in order to create an error path for unsafe programs
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA

// AssumptionStorageCPA is needed for unrolling to stop at loop bound
CompositeCPA.cpas = cpa.location.LocationCPABackwards, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA, cpa.loopbound.LoopBoundCPA, cpa.assumptions.storage.AssumptionStorageCPA
cpa.callstack.traverseBackwards = true
cpa.loopbound.traverseBackwards = true

cpa.predicate.direction = BACKWARD
// The main entry state is the target
backwardSpecification = ../specification/MainEntry.spc
analysis.initialStatesFor = TARGET
analysis.partitionInitialStates = true

// Inverting specifications allows the user to use the regular error specs in the command line
analysis.invertSpecifications=true

// No caching, the formulas are never created twice
cpa.predicate.blk.useCache = false

// No pointer aliasing for backward analysis
cpa.predicate.handlePointerAliasing = false

// No abstractions
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = false

// Do not dump stuff that is not meaningful when using BBMC.
cpa.predicate.predmap.export = false
cpa.predicate.invariants.export = false
cpa.predicate.invariants.exportAsPrecision = false

// Ignore target states during formula creation
cpa.automaton.breakOnTargetState = 0

[analysis.traversal]
order = bfs
useReversePostorder = false
usePostorder = true
useCallstack = true
