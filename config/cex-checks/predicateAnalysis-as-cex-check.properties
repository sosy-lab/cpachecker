# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

// Configuration for checking a counterexample with bitprecise predicate analysis.

#include ../includes/predicateAnalysis-ABE.properties

#include ../includes/witness-validation.properties

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA, cpa.pointer2.PointerCPA

cpa.pointer2.merge = SEP

analysis.algorithm.CEGAR = false

// No caching, the formulas are never created twice
cpa.predicate.blk.useCache = false

// No abstractions
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = false

// Ensure SAT check at target location in precision adjustment
cpa.predicate.checkBlockFeasibility = true

// Secondary analysis should not produce output.
output.disable = true

// If main analysis has -skipRecursion, we want to ignore recursive calls here as well.
// If main analysis does not have -skipRecursion, setting this here has no effect.
cpa.callstack.skipRecursion = true

// As specification automata generated by the main analysis contain additional
// ASSUMEs over variables possibly classified as irrelevant, this option
// guarantees that these ASSUMEs are properly handled nonetheless
cpa.predicate.ignoreIrrelevantVariables = false

// Witness validation has a traversal order that does not enforce reverse post-order.
// This is inefficient for predicate analysis due to redundant formulas
// and SAT checks.
// With the following option we at least avoid the redundancy,
// although we still have more than one SAT check.
// Cf. https://gitlab.com/sosy-lab/software/cpachecker/-/issues/907
cpa.arg.lateMerge = prevent

specification = ../specification/default.spc
