# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

// Configuration for checking a counterexample with bitprecise predicate analysis
// for multi-threaded programs.

#include ../includes/predicateAnalysis-ABE.properties

#include ../includes/witness-validation.properties

CompositeCPA.cpas = cpa.threading.ThreadingCPA, cpa.predicate.PredicateCPA

analysis.algorithm.CEGAR = false

// No caching, the formulas are never created twice
cpa.predicate.blk.useCache = false

// No abstractions
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = false

// Ensure SAT check at target location in precision adjustment
cpa.predicate.checkBlockFeasibility = true

// Secondary analysis should not produce output.
output.disable = true

// As specification automata generated by the main analysis contain additional
// ASSUMEs over variables possibly classified as irrelevant, this option
// guarantees that these ASSUMEs are properly handled nonetheless
cpa.predicate.ignoreIrrelevantVariables = false

analysis.traversal.useReversePostorder = false
analysis.traversal.useCallstack        = false
analysis.traversal.useNumberOfThreads  = false

cpa.callstack.unsupportedFunctions={}
cfa.useCFACloningForMultiThreadedPrograms=true

// instead of precise conditional branching points, we have thread interleavings.
counterexample.export.allowImpreciseCounterexamples = true

// we require all thread interleavings, lets disable block summaries.
cpa.composite.aggregateBasicBlocks = false

specification = ../specification/default.spc
