# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2022-2023 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

// ----------------------------------------------------------------------
// This configuration file enables invariant validation
// with counterexamples.
// ----------------------------------------------------------------------

analysis.useInvariantValidationAlgorithm = true

// this automaton defines which locations are the error locations
specification = specification/default.spc

// ARGCPA is needed in order to create an error path for unsafe programs
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA, $specification

// Do not break on target states, otherwise the reached set may not include all relevant states
cpa.automaton.breakOnTargetState = -1

// Enable MultiEdges, this gives a little bit of performance.
cpa.composite.aggregateBasicBlocks = true

// best traversal order for formula creation
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true

// Use ABEl
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = true

// Do not dump stuff that is not meaningful for validation.
cpa.predicate.predmap.export = false
cpa.predicate.invariants.export = false
cpa.predicate.invariants.exportAsPrecision = false
