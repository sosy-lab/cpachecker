# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2021 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# This configuration file for SV-COMP'22 uses strategy selection
# to verify a wide range of benchmarks and properties.
# ----------------------------------------------------------------------

# The specification to check in SV-COMP'22
specification = specification/sv-comp-reachability.spc

# The file to which the witness is written (required by competition).
counterexample.export.graphml = witness.graphml
cpa.arg.proofWitness = witness.graphml
termination.violation.witness = witness.graphml
# Compression is not supported by UltimateAutomizer
counterexample.export.compressWitness = false
cpa.arg.compressWitness = false

# Multi edges are not important for our efficiency,
# but prevent precise witnesses and concurrency analysis
cpa.composite.aggregateBasicBlocks = false

# Simplified CFA is bad for witnesses
cfa.simplifyCfa = false

# if we find a concurrent program, we copy the CFA to avoid colliding function names.
cfa.useCFACloningForMultiThreadedPrograms = true

# The analyses used for memory safety properties;
# everything in this file is then ignored.
memorysafety.config = svcomp22--memorysafety.properties

# The analyses used for memory safety property 'memcleanup';
# everything in this file is then ignored.
memorycleanup.config = svcomp22--memorycleanup.properties

# This is the configuration used when verifying the overflow property;
# everything in this file is then ignored.
overflow.config = svcomp22--overflow.properties

# This is the configuration used for verifying the termination property:
# everything in this file is then ignored.
termination.config = svcomp22--termination.properties

# Tell all analyses to skip (non-explicit) recursion
analysis.summaryEdges = true
cpa.callstack.skipFunctionPointerRecursion = true
# We set skipVoidRecursion per component
# cpa.callstack.skipVoidRecursion = true

# define unsupported functions globally, the nested concurrency analysis overrides this option
cpa.callstack.unsupportedFunctions=pthread_create,pthread_key_create,sin,cos,__builtin_uaddl_overflow

# malloc never returns null according to SV-Comp rules
cpa.predicate.memoryAllocationsAlwaysSucceed = true

limits.time.cpu::required = 900


# Our main analysis based on heuristics and strategy selection:

# Use sequential combination of analyses.
analysis.restartAfterUnknown = true

# The analyses used for reachability properties.
restartAlgorithm.configFiles = components/optim22--01-predicateAnalysis.properties, \
                               components/optim22--02-kInduction.properties, \
                               components/optim22--03-bmc.properties, \
                               components/optim22--04-valueAnalysis-itp.properties, \
                               components/svcomp21--recursion.properties::if-recursive, \
                               components/svcomp21--concurrency.properties::if-concurrent
