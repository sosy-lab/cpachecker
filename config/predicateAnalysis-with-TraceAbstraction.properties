# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2021 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# This configuration file uses Trace-Abstraction automata for
# refinement in predicate analysis with CEGAR
# (c.f. "Refinement of Trace Abstraction" [Heizmann, Hoenicke, Podelski]).
#
# Apart from that all optimizations from the default predicate analysis
# are used, such as the Adjustable-Block Encoding CPA for example. 
# ----------------------------------------------------------------------

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, \
  cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.traceabstraction.TraceAbstractionCPA
TraceAbstractionCPA.cpa = cpa.predicate.PredicateCPA

analysis.algorithm.CEGAR = true
cegar.refiner = cpa.traceabstraction.TraceAbstractionRefiner

# Enable MultiEdges, this gives a little bit of performance.
cpa.composite.aggregateBasicBlocks = true

#include includes/resource-limits.properties

# this automaton defines which locations are the error locations
specification = specification/default.spc


# For now TraceAbstraction uses SBE
cpa.predicate.blk.threshold = 1

# use the whole interpolant as predicate, instead of only the atoms from it (the interppolant)
cpa.predicate.refinement.atomicInterpolants = false
