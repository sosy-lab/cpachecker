# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2021 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# This file provides a configuration of CPAchecker
# that should work reasonably well for a wide range of programs and properties.
# It uses
# - memory graphs for memory-safety properties,
# - predicate abstraction for overflow properties,
# - lasso-based analysis and termination-as-safety for termination properties,
# - BDDs for concurrent programs,
# - predicate abstraction and value analysis for recursive programs, and
# - parallel-portfolio of k-induction, IMC, BMC, value analysis, etc. for all other cases.
# ----------------------------------------------------------------------

# This automaton defines which locations are the error locations
specification = specification/default.spc

# if we find a concurrent program, we copy the CFA to avoid colliding function names.
cfa.useCFACloningForMultiThreadedPrograms = true

# The analyses used for memory safety properties;
# everything in this file is then ignored.
memorysafety.config = smg.properties

# This is the configuration used when verifying the overflow property;
# everything in this file is then ignored.
overflow.config = default--overflow.properties

# This is the configuration used when verifying the data race property;
# everything in this file is then ignored.
datarace.config = dataRaceAnalysis.properties

# This is the configuration used for verifying the termination property:
# everything in this file is then ignored.
termination.config = default--termination.properties

# define unsupported functions globally, the nested concurrency analysis overrides this option
cpa.callstack.unsupportedFunctions=pthread_create,pthread_key_create,sin,cos,__builtin_uaddl_overflow,_longjmp,longjmp,siglongjmp,atexit

# Our main analysis based on heuristics and strategy selection:

# Use heuristic selection of algorithms
analysis.selectAnalysisHeuristically = true

# Threshold for addressedConfig (double) in [0..1]
heuristicSelection.addressedRatio = 0.0

# The standard analysis used for loop-free programs
heuristicSelection.loopFreeConfig = components/configselection-restart-bmc-fallbacks.properties

# The standard analysis used for programs with a single loop
heuristicSelection.singleLoopConfig = components/singleLoopConfig.properties

# The standard analysis used for programs with multiple loops
heuristicSelection.loopConfig = components/multipleLoopsConfig.properties

# The analysis used for programs with loops and complex datastructures
heuristicSelection.complexLoopConfig = components/configselection-restart-valueAnalysis-fallbacks.properties