# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2022 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ------------------------------------------------------------------------------
# This configuration file enables checking for overflows in a setup
# with concurrent threads.
# ------------------------------------------------------------------------------

specification = specification/overflow.spc

#include includes/concurrency.properties
#include includes/resource-limits.properties

#include includes/predicateAnalysis--overflow.properties

#include includes/predicateAnalysis-ABEl.properties
#include includes/predicateAnalysis-PredAbsRefiner.properties

CompositeCPA.cpas = cpa.threading.ThreadingCPA, cpa.predicate.PredicateCPA, cpa.value.ValueAnalysisCPA, cpa.overflow.OverflowCPA

cpa.threading.allowMultipleLHS = true

# self-reference to allow direct usage
overflow.config = predicateAnalysis-concurrency--overflow.properties

# instead of precise conditional branching points, we have thread interleavings.
counterexample.export.allowImpreciseCounterexamples = true

[analysis.traversal]
order = bfs
# none of the following ordering brings a benefit for a larger set of programs according to predicateAnalysis-concurrency.properties
useCallstack        = false
useNumberOfThreads  = false
# we have no unique location, so postorder computation would currently fail:
useReversePostorder = false
