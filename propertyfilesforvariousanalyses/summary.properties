# where to save the log file
log.path = /home/erkan/cpa/logs/CPALog.txt

# set the log level, only on, off supported currently to switch on or off
log.level = 490

# do we want to print cfa as .dot, true or false
dot.export = true

# where to save the dot file
dot.path = /home/erkan/cpa/graphs/

# do we want to simplify cfa?
cfa.simplify = false

# do we want to combine multiple assignments and 
# if cpa.simplify is set to true and cfa.combineBlockStatements is set
# to false only blank edges will be removed while simplfying

cfa.combineBlockStatements = false

# set to true if you want to run an interprocedural analysis
analysis.interprocedural = true
analysis.useSummaryLocations = true

# where are predicates
predicates.path = /home/erkan/cpa/predicates/

# entry function
analysis.entryFunction = main
    
# which strategy to adopt for visiting states? DFS or BFS? BFS, unless
# bfs is false
analysis.bfs = false

# where to keep the programs to run, this is the workspacedata if
# you use eclipse to run CPAChecker. if it changes, you should change this
# parameter.
analysis.programs = /home/erkan/cpa/tests/

# which CPAs do we want to use? where is the CPA class that represents the corresponding analysis?
analysis.cpas = cpaplugin.cpa.cpas.symbpredabs.summary.SummaryCPA

# what merge operator do we want to use for each cpa? give the merge types in respective order with analysis.cpas property
# use sep for MergeSep and join for MergeJoin
analysis.mergeOperators = sep, sep

# what stop operator do we want to use for each cpa? give the merge types in respective order with analysis.cpas property
# use sep for StopSep and join for StopJoin
analysis.stopOperators = sep, sep

# if true, don't print the set of reachable states at the end of the analysis
analysis.dontPrintReachableStates = true

# if true, perform a (very) simple "cone-of-influence" reduction, to get rid
# of all the nodes and edges that are not reachable from the error locations
cfa.removeIrrelevantForErrorLocations = true

#------------------------------------------------------------------------------
# some custom options for Symbolic Predicate Abstraction with Summaries
#------------------------------------------------------------------------------

# if true, cache queries to mathsat as much as possible
cpas.symbpredabs.mathsat.useCache = false

# if true, refinement will add all discovered predicates to all the locations
# in the abstract trace
cpas.symbpredabs.refinement.addPredicatesGlobally = false

# if true, encode program variables as INTEGERs in MathSAT, instead of using
# REALs. Since interpolation is not really supported by the laz solver, when
# computing interpolants we still use the LA solver, but encoding variables
# as ints might still be a good idea: we can tighten strict inequalities, and
# split negated equalities
cpas.symbpredabs.mathsat.useIntegers = true

# if true, refinement will try to build "well-scoped" predicates, by cutting
# spurious traces as explained in Section 5.2 of the paper "Abstractions From
# Proofs"
cpas.symbpredabs.refinement.addWellScopedPredicates = false

# where to dump the counterexample formula in case the error location is reached
cpas.symbpredabs.refinement.msatCexPath =  /home/erkan/cpa/cex.msat

# if true, try to add some useful static-learning-like axioms for bitwise
# operations (which are encoded as UFs): essentially, we simply collect all
# the numbers used in bitwise operations, and add axioms like (0 & n = 0)
cpas.symbpredabs.useBitwiseAxioms = false

# if true, initialize all variables to 0 when they are declared
cpas.symbpredabs.initAllVars = false

# if initAllVars is true, we get rid of all non-determinism. This might not be
# desirable. If the following property is set to a non-empty value, all
# variables starting with this prefix will not be initialized automatically
cpas.symbpredabs.noAutoInitPrefix = __BLAST_NONDET

# where to dump the final predicate map in case the error location is not
# reached
cpas.symbpredabs.refinement.finalPredMapPath = /home/erkan/cpa/predmap.txt

# whether to use a Boolean or a Cartesian abstraction
cpas.symbpredabs.abstraction.cartesian = true

# if true, limit the size of summary locations
cpas.symbpredabs.smallSummaries = false

# if true, use incremental search in counterexample analysis, to find the
# minimal infeasible prefix
cpas.symbpredabs.shortestCexTrace = false

# if true, don't use abstraction refinement, but read predicates from the map
# specified below
cpas.symbpredabs.abstraction.norefinement = false

# when not using refinement, where to get the list of predicates from
cpas.symbpredabs.abstraction.fixedPredMap = /home/alb/mathsat/cpachecker/fixedpredmap.msat

# if true, split arithmetic equalities when extracting predicates from
# interpolants
cpas.symbpredabs.refinement.splitItpAtoms = true

# if true, dump the abstraction formulas in both .msat and .smv formats
cpas.symbpredabs.mathsat.dumpHardAbstractionQueries = false
